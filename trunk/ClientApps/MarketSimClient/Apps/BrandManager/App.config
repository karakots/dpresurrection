<configuration>
	<appSettings>
		<!-- Special Application Code, only one app_code please... for now-->
		<add key="app_code" value="" />
		<add key="devl_version" value = "false"></add>
				
		<!-- where we like to keep data -->
		<add key="Data" value="C:\data" />
		
		<!-- Messsages -->
		<add key="WANTPRODUCT_PREREQ" value="I do NOT need this Product" />
		<add key="ProdMatrix.PleaseSelect" value="Drag a Product to create a relation" />
		<add key="ProdMatrix.RelationExists" value="The products already have a relation, Please delete the relation first" />
		<add key="Model.Locked" value="The model is currently being edited, it will be opened for viewing only" />
		<add key="Scenario.Queued" value="The scenario is either in the simulation queue or has results, it will be opened for viewing only" />
		
		<!-- For BrandManInterface: running a scenario -->
		<add key="scenario.sim_num" value="Status" />

		<!-- Product Grid Begin-->
		<add key="product.product_name" value="Product" />
		<add key="product.product_name.desc" value="Name of Product.
Change product name by editing this field" />
		<add key="product.brandName" value="Brand" />
		<add key="product.brandName.desc" value="Product Brand - this field is not editable." />
		<add key="product.type" value="Type" />
		<add key="product.type.desc" value="Type
When a new product is introduced, it can have various different relationships to other products in the category(s) being simulated.  MarketSim explicitly models 4 types of relationships

1. Initial:  This is a product made available from the star of the simulation, or introduced as a normal new initiative the category.  (e.g. new scent of  shampoo).
2. Line Extension: Taking the brand into a new category.  (e.g. Harley Davidson desk accessories)
3. Flanker: Taking the brand into a related category.  (e.g. low-carb. Beer)
4. Restage: Re-launching an existing product (New and Improved).


To turn off  this functionality, enter the following:
- Type: initial
- Product Group: 1
- Related Group none
- % relation: irrelevant" />
		<add key="product.product_group" value="Product Group" />
		<add key="product.product_group.desc" value="Product Group
This is a set of products that a consumer considers as alternatives to each other when making a choice.  The products available at the start of a sim would be labeled as '1' if they all belong to the same set of alternatives.  It is possible that there would be multiple groups of alternatives present from the start of a sim." />
		<add key="product.related_group" value="Related Group" />
		<add key="product.related_group.desc" value="Related Group
For a product introduced after the start of a sim (a new initiative), the 'Related Group' field describes which 'Product Group' with which the  new initiative is associated." />
		<add key="product.percent_relation" value="Relation" />
		<add key="product.percent_relation.desc" value="Percent Relation
The amount that the new initiative is related to the 'related group'.  This is a percentage from 0 to 100." />
		<add key="product.cost" value="Cost" />
		<add key="product.cost.desc" value="The cost column is the manufacturing cost, and any other per-unit costs.  In MarketSim you can add development cost, and any other fixed costs.  (Fixed costs are entered in the property sheet for a product).
Cost data is only used to create financial reports and do ROI calculations.  It does not influence consumer behavior." />
		<add key="product.initial_dislike_probability" value="Initial DisLike" />
		<add key="product.initial_dislike_probability.desc" value="Initial 'Dislike' Percentage
Product rejection works on a brand basis.  So if a brand has two 'sibling' products, A and B, then if a consumer rejects A, that consumer is also simultaneously rejecting B.

When consumers first try a product, there is some chance they will dislike that product and not try it again.  The Initial 'Dislike' Percentage is the percentage value of this chance. Please enter a number between 0 and 100, without using the percent sign (%).  For example, an 'initial Dislike Percentage' of 25% means that if 100 agents purchase a product (SKU), 25 of them will make the decision to never purchase that product again.  The other 75 are further affected by the 'Repeat Like Percentage'.

Agents who are tagged as a result of the 'Initial Dislike Percentage' or 'Repeat Like Percentage' as not further considering a purchase, will actually never make another purchase of this product.  In other words, they reduce the size of the target population for that product (but necessarily other products in the category), no matter what future interventions might be made by the manufacturer of that product.   It is possible to introduce a new product (SKU) which is a 'new and improved' version of the rejected one, and all consumers will initially consider this new product, even if the 'old' version was rejected.

It is possible for rejecters of a product to be permanently removed from purchasing in the category.  Please see the 'Category Rejection' parameter in the 'Segment Characteristics' section for further details." />
		<add key="product.repeat_like_probability" value="Repeat Like" />
		<add key="product.repeat_like_probability.desc" value="Initial Repeat 'Like Percentage'
After the first trial, there is a diminishing chance that a consumer will develop a dislike of a product.  The Repeat 'Like' Percentage is the percent chance that a person who likes the product on the nth trial will also like the product on the (n+1)th trial.  Please enter a number between 0 and 100, without using the percent sign (%).  This applies to a maximum of four trials.
As a specific example, following the example described in 'Initial Dislike Percentage', we have 75 consumers that decide to purchase again.  If the 'Repeat Like Percentage' is set to 66%, then when each of those 75 consumers makes a second purchase, there will be a 33% chance that any given consumer that makes a second purchase will NOT consider making a third purchase.

- Specifically, 25 of the 75 consumers that make a second purchase will not consider making a third purchase.  These leaves 50 consumers to consider making a third purchase.  
- If all 50 make a third purchase, 1/3 of them (about 17) will not consider making a fourth purchase. This leaves a final purchasing population of 33:   75% * 66% * 66% = 33%" />
		<add key="product.color" value="Color" />
		<add key="product.color.desc" value="Products have a color associated with them in the MarketSim graphical interface." />
		<!-- Product Grid End-->
		<!-- Segment Grid Begin -->
		<add key="segment.segment_name" value="segment" />
		<add key="segment.show_current_share_pie_chart" value="share" />
		<add key="segment.show_cmulative_share_chart" value="share total" />
		<add key="segment.segment_size" value="size" />
		<add key="segment.growth_rate" value="growth rate" />
		<add key="segment.growth_rate_people_percent" value="people/percent" />
		<add key="segment.growth_rate_month_year" value="month/year" />
		<add key="segment.compress_population" value="compress population" />
		<add key="segment.variability" value="variablity" />
		<add key="segment.price_disutility" value="price disutility" />
		<add key="segment.attribute_sensitivity" value="attribute sensitivity" />
		<add key="segment.persuasion_scaling" value="persuasion scaling" />
		<add key="segment.display_utility" value="display utility" />
		<add key="segment.display_utility_scaling_factor" value="display utility factor" />
		<add key="segment.max_display_hits_per_trip" value="max display hits/trip" />
		<add key="segment.inertia" value="Inertia" />
		<add key="segment.repurchase" value="repurchase" />
		<add key="segment.repurchase_model" value="model" />
		<add key="segment.gamma_location_parameter_a" value="gamma_a" />
		<add key="segment.gamma_shape_parameter_k" value="gamma_k" />
		<add key="segment.repurchase_period_frequency" value="frequency" />
		<add key="segment.repurchase_frequency_variation" value="frequency variation" />
		<add key="segment.repurchase_timescale" value="time scale" />
		<add key="segment.avg_max_units_purch" value="maxs units" />
		<add key="segment.shopping_trip_interval" value="interval" />
		<add key="segment.category_penetration" value="penetration" />
		<add key="segment.category_rejection" value="rejection" />
		<add key="segment.num_initial_buyers" value="num buyers" />
		<add key="segment.initial_buying_period" value="buying period" />
		<add key="segment.seed_with_repurchasers" value="seed with repurchasers" />
		<add key="segment.use_budget" value="use budget" />
		<add key="segment.budget" value="budget" />
		<add key="segment.budget_period" value="budget period" />
		<add key="segment.save_unspent" value="save unspent" />
		<add key="segment.initial_savings" value="savings" />
		<add key="segment.units_desired_trigger" value="units desired trigger" />
		<add key="segment.awareness_model" value="model" />
		<add key="segment.awareness_threshold" value="threshold" />
		<add key="segment.awareness_decay_rate_pre" value="decay rate (pre)" />
		<add key="segment.awareness_decay_rate_post" value="decay rate (post)" />
		<add key="segment.persuasion_decay_rate_pre" value="decay rate (pre)" />
		<add key="segment.persuasion_decay_rate_post" value="decay rate (post)" />
		<add key="segment.persuasion_decay_method" value="decay method" />
		<add key="segment.loyalty" value="channel loyalty" />
		
		<!-- Segment Grid Descriptions -->
		<add key="segment.segment_name.desc" value="Segment name.
To change the name of the segment, edit this field" />
		<add key="segment.show_current_share_pie_chart.desc" value="show current share - during simulation" />
		<add key="segment.show_cmulative_share_chart.desc" value="show cumalative share - during simulation" />
		<add key="segment.segment_size.desc" value="Size
Use a population equal to the relevant real world population of each segment (if you want more accurate  demand estimates ), or scale down all the segments by the same factor from the real world (if you want to compare the results across the segments).  At the very least, segment size is important if you use an absolute number of advertising impressions.

MarketSim can handle populations of any size.  If you exceed 10,000 individuals in population size, you should use compressed populations to maintain efficient processing while simulating the model.  Look at the 'Compress Population' cell for more details on using this parameter." />
		<add key="segment.growth_rate.desc" value="Growth Rate
If the population of this segment is growing (or shrinking) over time, you enter the numerical rate at which the population is changing in this parameter.  The rate may be in people, or percent of the population, as defined by the 'Growth Rate People or Percent' parameter, which follows below.

If you are not considering a change in population size, se the growth rate to 0.  For an increasing population, use a positive number.  For a decreasing population, use a negative number.

NOTE:  Currently, the newly added members of a population do not purchase anything.  This will be fixed in a future version of MarketSim." />
		<add key="segment.growth_rate_people_percent.desc" value="Use this parameter to specify whether you are specifying entered growth rate in as an absolute number of people (enter 'people' for the this parameter), or as a percentage of the total population (enter 'percent' for the this parameter).  

Even if the growth rate is zero, you need to enter either 'people' or 'percent' in this field." />
		<add key="segment.growth_rate_month_year.desc" value="Growth Rate Month or Year
You can define growth rates per month or per year, by entering 'month' or 'year' in this field.  Even if the growth rate is zero, please enter one the two allowed values into this field." />
		<add key="segment.compress_population.desc" value="Compress Population
Entering Y (yes) for the 'Compress Population' parameter allows the software to process scenarios more efficiently, which means your simulations will run faster.

For relatively large populations (10,000 people and above), there is little if any loss in accuracy by using compressed populations.   To turn off compressed populations, uncheck the box for this parameter.

You can verify the accuracy of compressed populations in your particular MarketSim model by running scenarios with and without compressed populations and comparing the results. 

- Selecting one segment to be compressed has no influence on any other segment.  
- Compression scales back the number of consumers.  The number is scaled down to between 500 and 5000.  If there are less than 5000 consumers to start with, then compressing the population will do nothing.
- If there are 45,678 people, the population will be scaled down to 4567 groups of 10 people.  8 people would be lost due to round-off error.  This would not make a difference to your simulation results." />
		<add key="segment.variability.desc" value="Variability
You may enter a value between 0 and 100 to express the amount of variation within the individuals for a subset of the parameters that describe a consumer segment.  0 means a low diversity (everybody is the same) and 100 means a high variability (everybody is different).  Variation is randomly distributed, with a normal distribution, around an average value, which is the value that you define for a particular parameter for a consumer segment.  Technically, the variability percentage is the standard deviation and the average value is the mean.

Currently, variability applies to the following variables:

All Models
- Number of close contacts
- Number of distant contacts

Awareness Model (not Awareness and Persuasion Model):
- Messages to trigger a purchase

Fixed and NBD Repurchasing (Not Task-Based Buying)
- Repurchase period" />
		<add key="segment.price_disutility.desc" value="Price Disutility
The value for Price Disutility must be zero or greater.  Numbers lower than 10 are typical.  Consumers with a high price disutility will be much more likely to choose the least expensive product than consumers with a lower price disutility.  Consumers with a price disutility of 0 will ignore price.

Every product has a 'score' associated with it for every consumer segment.  Consumers choose the products with higher scores more than products with lower scores.  Scores that are too low may eliminate a product from consideration.  A product score is formed by combining its price score times its attribute score.

The price score is determined by a number of factors, such as the relative price of a product with respect to other product currently available (in the simulation) that have similar attributes. " />
		<add key="segment.attribute_sensitivity.desc" value="Attribute Sensitivity
The value for Attribute Sensitivity must be between 0 and 10.  Consumers with an attribute sensitivity of 10 will be much 'pickier' about how well product attributes map to their preferences than consumers with lower attribute sensitivity. Set this value to 1.0 as a starting value.

Every product has a score associated with it for every consumer segment.  Consumers like the products with higher scores more than products with lower scores.  Scores that are too low may eliminate a product from consideration.  A product score is formed by multiplying its price score times its attribute score.
The attribute score is determined by a how each product's attribute matches to a consumer's preference for that attribute.  All attributes are taken into account." />
		<add key="segment.persuasion_scaling.desc" value="Persuasion Scaling
This parameter allows you to scale communication elements (e.g., advertising GRPs).  A higher value means that the consumers in this segment are more influenced by advertising and product recommendations from other consumers.  A lower value for persuasion scaling means that consumers will be more influenced by the price and inherent attributes and price of a product and less by what they hear about a product.

A starting value for persuasion scaling typically ranges between 0 and 10." />
		<add key="segment.display_utility.desc" value="display utility" />
		<add key="segment.display_utility_scaling_factor.desc" value="display utility factor" />
		<add key="segment.max_display_hits_per_trip.desc" value="max display hits/trip" />
		<add key="segment.inertia.desc" value="Inertia
Inertia ranges between 0 and 10.  A higher value means that a consumer will be more likely to purchase the same brand as previously purchased when a series of purchases are being made repurchasing the category.  '0' means that they will never consider what they previously purchased when making a repurchase decision, while '10' means that they will always repurchase the brand they last purchased." />
		<add key="segment.repurchase.desc" value="Repurchase
Enter 'y' for this parameter if you want to force consumers in the segment to repurchase within the product category periodically.  Enter 'n' if you are not modeling periodic repurchasing.  

If you specify 'n', then the parameters listed here will be ignored (but you should still enter valid values for them):
- Repurchase model (f/n/t/b)
- Repurchase period or frequency
- Repurchase frequency variation
- Repurchase timescale
- Shopping Trip Interval" />
		<add key="segment.repurchase_model.desc" value="Repurchase Model
There are several different repurchasing behaviors that can be selected.  Enter the appropriate letter in the column for the type of behavior you wish this segment to implement.

1) Enter 'f' for fixed-period repurchasing.  In this case, a consumer will repurchase periodically, based on the repurchase period and timescale, specified below.  The following parameters apply to this purchase model:
- Repurchase Period or Frequency
- Repurchase Timescale

2)  Enter 'n' for frequency-based repurchasing, where purchases have a probability of happening on any given day, where that probability is set by the repurchase frequency and variation below.  The following parameters apply to this purchase model:
- Repurchase Period or Frequency
- Repurchase Frequency Variation
- Repurchase Timescale

3) Enter 't' for task-based repurchasing. For this choice, consumers will buy products based on their need to accomplish the tasks that you have specified in the 'Tasks' and 'Task Rates ' spreadsheets.  None of the other repurchase parameters on this sheet are required.  This 'baseline' task-based consumption and buying model works in the following way:

For a given consumer on a given day,
A. Do any tasks
- If consumer runs out of a product while attempting to do a task, add the out-of-stock product to the shopping list and schedule a shopping trip for that day.  Running out means that the consumer does not have enough to complete the tasks being attempted on that day.
- If it is time to go shopping and a trip has not already been scheduled for that day, then schedule a trip for that day
- If a trip has been scheduled for that day, for each task the consumer does, if the consumer does not have enough in stock to last until the next scheduled shopping trip, then put the product on the shopping list.  Otherwise, if the consumer did not run out that day and also has enough to last until the next scheduled shopping trip, then the shopping list will be empty.

B. If a shopping trip is scheduled, then shop
- For each item on the shopping list, find something at the store to buy.  This may or may not be the same product as purchased last time, depending on inertia and what is in stock at the time and place the consumer is shopping.
- It is possible that the consumer will have gone shopping with an empty list (if it was time for a regularly scheduled shopping trip).  In this case, the consumer will still have a probability of gaining awareness and persuasion from all products in distribution at that time in the channel that the consumer shops.
- Another shopping trip is scheduled a 'shopping trip interval' in the future.  This may be the next time the consumer shops, or the consumer may shop sooner if it run out before the next scheduled trip." />
		<add key="segment.gamma_location_parameter_a.desc" value="gamma_a" />
		<add key="segment.gamma_shape_parameter_k.desc" value="gamma_k" />
		<add key="segment.repurchase_period_frequency.desc" value="This parameter is used only with the repurchasing 'f' (fixed period) and 'n' (frequency-based) models. 

For 'fixed' repurchasing, enter the number of days, weeks, months or years (as specified in 'Repurchase Timescale', below) that elapse between repurchases.

For 'frequency-based' repurchasing, enter the number of purchases a consumer will make, on average, per year.

This number can be any integer (with or without a decimal point) positive floating point number, less than or equal to 365." />
		<add key="segment.repurchase_frequency_variation.desc" value="Repurchase Frequency Variation
This parameter is used only with 'frequency-based' ('n')  repurchasing.  In this case, the Repurchase Frequency (above) defines the average frequency of purchases a consumer will make per year.  Some consumers will make fewer purchases per year, and some will make more purchases per year.  'Repurchase Period Variation' specifies the standard deviation of the repurchase frequency.

This number should be an integer (with or without a decimal point)  positive floating-point number, greater than 0.3, and probably between 1.0 and 5.0." />
		<add key="segment.repurchase_timescale.desc" value="Repurchase Timescale
This parameter is only used for 'fixed period' repurchasing.  Enter one of the following:
- Days
- Weeks
- Months
- Years

This defines the time units that go along with the 'Repurchase Period' parameter." />
		<add key="segment.avg_max_units_purch.desc" value="maxs units" />
		<add key="segment.shopping_trip_interval.desc" value="Shopping Trip Interval
When Repurchasing is enabled, the 'Shopping Trip Interval' defines how frequently a given consumer goes to the store.  This is the number of days between shopping trips.  For example, entering a 7 for this parameter defines that consumers go shopping once a week.  Entering a 1 means consumers go shopping every day.  

This parameter defines ALL shopping trips, not just the shopping trips for products in the category of your simulation.

The trips to the store can influence a consumer in two ways:

1. Awareness and persuasion can be built up by exposure to products on the shelf, even if the consumer is not making a purchase

2. For task-based buying, a consumer will buy enough of a product to last until the next 'scheduled' shopping trip.  This is an estimate that the simulated consumer makes, and may be different from the actual consumption over the subsequent shopping trip interval.   This is true because consumption can be stochastic, especially in NBD repurchasing model options.

For the case of NBD rate-specified task-based buying (choice 'r' for the Repurchase Model), The Shopping Trip Interval parameter is NOT used.  Instead, a unique 'baseline' shopping trip interval is specified for each consumer, chosen from a gamma distribution using the Gamma Location Parameter 'a' and Gamma Shape Parameter 'k'.  The gamma-distributed number 'G' describes the yearly purchase frequency, and 365/G specifies Shopping Trip Interval." />
		<add key="segment.category_penetration.desc" value="Category Penetration
Defines how much of the population will participate in buying products in the category being simulated.  Category Penetration must be above 0 and less than or equal to 100.  A value of 100 means that 100% of the population will try to buy products, even if the products do not measure up well to the consumer preferences.  A value near 0 means that very few people will buy, even if the products are perfect.

If a scenario starts out with average products and later introduces much better products, then consider starting with an Category Penetration of less than 100%, so that there is room for more consumers to participate in the purchasing when better products are introduced" />
		<add key="segment.category_rejection.desc" value="Category Rejection
Defines the percentage chance a consumer will reject the product category when rejecting a product.  Rejecting the category means that the consumer will not try any other products in this category, ever." />
		<add key="segment.num_initial_buyers.desc" value="# Initial Buyers
This is a way to remove the need for advertising when using 'Crossing the Chasm' or 'Emergent' demand models.  You can seed the consumer segment with a specified number of people that automatically buy a product by choosing among all available products in the normal fashion, but ignoring awareness messages.  The people who buy will then communicate their purchase decisions into the social network, as described by the social network parameters." />
		<add key="segment.initial_buying_period.desc" value="When initial purchases are specified, you need to enter a value for the Initial Buying Period.

Please note that during the Initial Buying Period, you may get more than the specified number of initial purchases, because purchasers will recommend purchased products to others, who may then buy.  

It is also possible to get fewer than the specified # Initial Buyers during the Initial Buying Period.  This can occur because it takes time to make a purchase (as defined by the Purchase Step Time parameter).  This delay in making a purchase may delay initial purchases." />
		<add key="segment.seed_with_repurchasers.desc" value="Seed with Repurchasers
If you have specified repurchasing behavior by specifying Y for the Repurchase parameter, you can use the Seed with Repurchasers parameter to make the population believe it has previously bought products.  To do this, check the box for this parameter.  Otherwise, enter N.

The time of last purchase for each individual will be randomly distributed between 0 and the Repurchase Period parameter.  This makes forced repurchasing more realistic for products that have existed in the market previous to the start of your scenario. 

Consumers will also be give a current 'stock' of some product (based on the starting shares defined in the 'Share and Penetration' worksheet).  This stock will be enough to get them to their next scheduled shopping trip, on average.  If the 'Shopping Trip Interval' is 1 day, then consumers will get no 'stock' and everyone will purchase on the first day of the simulation (and every subsequent day)." />
		<add key="segment.use_budget.desc" value="Use Budget
If you want consumers to have budgetary constraints, check the box for this parameter." />
		<add key="segment.budget.desc" value="Budget ($)
Thus parameter specifies the amount of money each consumer gets each Budget Period (defined in the Budget Parameter).  Please don't use the $ character when specifying this parameter.  Even if you have entered N for the Use Budget parameter, you must enter a value for the Budget." />
		<add key="segment.budget_period.desc" value="This is the time period over which the budget is replenished.  It may be one of the following:
- Day
- Week
- Month
- Year

If you define a budget of $20 per month, then at the start of each month each consumer will get an additional $20 to spend." />
		<add key="segment.save_unspent.desc" value="Save Unspent Money
If you check the box for Save Unspent Money, then each consumer will carry over any remaining money from one Budget Period to the next.  If you uncheck the box for Save Unspent Money, then each consumer will have its cash available set to the amount of the Budget ($) parameter at the start of each Budget Period." />
		<add key="segment.initial_savings.desc" value="You may give each consumer a starting cash balance, if desired.  Enter the average amount you want a consumer to have using the Initial Savings ($) parameter.  Do not use the $ character when specifying this value.  

The actual amount of cash that each consumer gets will be affected by the Diversity parameter.  The higher the diversity, the larger the difference in the actual amount of cash that each consumer gets at the start of a simulation run." />
		<add key="segment.units_desired_trigger.desc" value="units desired trigger" />
		<add key="segment.awareness_model.desc" value="Awareness Model
There are two models to choose from:

1. Awareness Threshold Model:  This is the 'old' awareness model in MarketSim 
- Persuasion values of messages are ignored
- Uses the 'awareness threshold' parameter

2. Awareness and Persuasion Model: 
- Uses both awareness and persuasion values
- Awareness is yes/no, rather than threshold-based
- Persuasion does not begin to accumulate until a consumer is aware" />
		<add key="segment.awareness_threshold.desc" value="Awareness Threshold
When selecting the 'Awareness' model, the awareness threshold indicates the number of awareness units that an individual consumer must accumulate about any given product before that product can be considered for purchase.  This is a threshold that the combination of mass-media, coupons, samples, in-store display and the social network must exceed, taking into consideration that consumers may be forgetting messages, as defined in parameters below." />
		<add key="segment.awareness_decay_rate_pre.desc" value="Awareness Decay Rate
Awareness decays in the population at a rate defined by the Awareness Decay Rate.  This is the probability (0 to 100%), per day, that consumers who are aware of a product but have not yet used the product will 'forget' about (become unaware of) the product, on each day.   Once a consumer has purchased  of a product, that consumer can no longer become unaware of it.  If a consumer loses awareness of a product, that consumer's persuasion for the forgotten product goes to 0." />
		<add key="segment.awareness_decay_rate_post.desc" value="" />
		<add key="segment.persuasion_decay_rate_pre.desc" value="Persuasion Decay Rate
Persuasion decays in the population at a rate defined by the Persuasion Decay Rate.  This is the percentage (0 to 100%) of persuasion units that each  consumer will lose each day.  These persuasion units are replenished by marketing and word of mouth." />
		<add key="segment.persuasion_decay_rate_post.desc" value="" />
		<add key="segment.persuasion_decay_method.desc" value="decay method" />
		<add key="segment.loyalty.desc" value="channel loyalty" />
		<!-- End segment grid descriptions -->
		
		<!-- Segment Grid Choice formulae begin -->
		<add key="segment.product_choice_model" value="Model" />
		<add key="segment.product_choice_model.desc" value="Purchase Model
There are 5 choices for the overall Purchase Model, as listed below. 
 
(E) Emergent: This purchasing model makes the fewest assumptions. This model does not assume a demand curve.  You must stimulate demand by initial purchasers, the social network, and/or advertising. There are no adoption groups.  

(L) Logit: Like the emergent model, but it computes product choice percentages based on a model consistent with getting data from a conjoint analysis.  Try attribute sensitivities between 0 and 1, rather than 0 and 10, with Emergent Logit.

(N) Linear: The Linear model linearly combines attributes, price and messages to compute a probability of choice.  This is handy if utilities were derived by fitting sampled data to a linear equation.

(V) Linear with 'Share of Voice': This is similar to the linear mode, except with respect to how messages are handled.  The Linear model uses the absolute number of messages a consumer has for a product when computing the probability of choice.  The Linear with Share of Voice model divides the absolute number of messages a consumer has for a specific product by the number of all messages that consumer has for products.

(G) General This choice allows you to build an equation for computing the probability of choice, using parameters f1 through f10 below." />
		<add key="segment.persuasion_value_computation" value="Persuasion" />
		<add key="segment.persuasion_value_computation.desc" value="Persuasion Value Computation
- Share of Voice:  The persuasion value for product j is computed by dividing the number of persuasion units for product j by the total number of persuasion units of all products in the consideration set of consumer k.
- Absolute: The persuasion value of product j is equal to the total number of persuasion units for product j.
- Square root: The persuasion value of product j is equal to the square root of the total number of persuasion units for product j.
- Base 10 Log: The persuasion value of product j is equal to the log base 10 of the total number of persuasion units for product j." />
		<add key="segment.persuasion_score" value="*" />
		<add key="segment.persuasion_score.desc" value="Persuasion Score
*  multiply the persuasion value by the persuasion scaling parameter
^  take the persuasion value to the power of the persuasion scaling parameter 

Note that if the persuasion scaling parameter  is less than 1, then exponentiation is equivalent to taking the nth root of the total persuasion." />
		<add key="segment.persuasion_contribution_overall_score" value="+" />
		<add key="segment.persuasion_contribution_overall_score.desc" value="Persuasion Contribution to Overall Score
+  Persuasion score of product j added in to the rest of the score of product j
*  Persuasion score of product j multiplied by the rest of the score of product j" />
		<add key="segment.utility_score" value="Score" />
		<add key="segment.utility_score.desc" value="Utility Score
*  multiple the utility value by the attribute sensitivity parameter
^  take the utility value to the power of the attribute sensitivity

Note that if the attribute sensitivity is less than 1, then exponentiation is equivalent to taking the nth root of the utility." />
		<add key="segment.combination_part_utilities" value="Combination" />
		<add key="segment.combination_part_utilities.desc" value="Combination of Part Utilities

A 'part utility' is the utility of a single attribute i of product j to consumer k.  It is a function of the value of attribute i of product j and consumer k's preference for attribute i.

Unscaled Sum of Products:  The total utility is computed by the sum (across all attributes) of the products of each part utility and a consumer's preference for that attribute.

Scaled Sum of Products:  The total utility is computed by the sum (across all attributes) of the products of each part utility and a consumer's preference for that attribute.  Before the product is taken, then preference is scaled to a number between 0 and 1." />
		<add key="segment.price_contribution_overall_score" value="+" />
		<add key="segment.price_contribution_overall_score.desc" value="Price Contribution to Overall Score

+ Price score of product j added to the rest of the score of product j
-  Price score of product j subtracted from the rest of the score of product j
*  Price score of product j multiplied by the rest of the score of product j
/  Rest of the score of product j divide by price score of product j" />
		<add key="segment.price_score" value="*" />
		<add key="segment.price_score.desc" value="Price Score
*  multiply the price value by the price disutility sensitivity parameter
^  take the price value to the power of the price disutility sensitivity

Note that if the price disutility sensitivity is less than 1, then exponentiation is equivalent to taking the nth root of the price value." />
		<add key="segment.price_value" value="Value" />
		<add key="segment.price_value.desc" value="Price Value
To compute the price value:

- Absolute Price: Use the price of the product. 

- Price/Use: For task-based buying, use the price divided by the number of uses per product.  This assumes that the total price has been entered in the input spreadsheet, and that the software should divide this price by the number of uses in a product.  This is the recommended choice for task-based buying.  All other choices do not modify the price by the number of uses, even if task-based buying is being used. 

- Relative Price: Divide the price of the product j by the price of all products in the market (including those outside of the consumer's consideration set)

- Reference Price: Divide the price of the product by the 'Reference Price' specified by the Reference price parameter" />
		<add key="segment.reference_price" value="Price" />
		<add key="segment.reference_price.desc" value="Reference Price
This is the reference price value, in dollars.  It is only used in conjunction with the 'Reference Price' choice of the 'Price Value' parameter." />
		<add key="segment.choice_prob" value="Probability" />
		<add key="segment.choice_prob.desc" value="Choice Probability
Once a score is computed for each product, based on persuasion , brand utility and price disutility, these scores are used to compute a probability of choice of product j for consumer k.  The products used to compute the price score are only those within the consideration set of consumer k.

- Share of Score: The probability of choice of product j is the score of product j, divided by the sum of the scores of all products in consumer k's consideration set.

- Logit:  The probability of choice of product j is e to the score of product j, divided by the sum of e to the score of each product in consumer k's consideration set.  For use with full-product utilities, where there is only one attribute.

- Scaled Logit: Like Logit, except that all utilities are scaled, where scaled utility(p) = utility(p) / (product(all utilities))^(1/number of products).  For use with attribute-based utilities, where there are multiple attributes specified." />
		<add key="segment.inertia_model" value="Inertia" />
		<add key="segment.inertia_model.desc" value="Inertia Model
As mentioned above, the 'Brand Loyalty' parameter defines the probability that a consumer will make the same choice on trip N as on trip N-1.  The 'Inertia Model' determines whether 'same' means:

- Same product 
- Same Brand (and product within that brand)" />
		<add key="segment.error_term" value="Error" />
		<add key="segment.error_term.desc" value="Error Term

This captures the random element in the choice calculation.  It chooses a uniform random number between a negative limit and positive limit, with the specified standard deviation, where the limit is defined as

- None: Ignore the error value.

- User Value: A value entered by the user

- Utility: The utility of the product (or sum of part utilities), times the user value (so that a fraction of the utility can be used as the error).

- Score: The total value of the score, which would be fed into the logit calculation, , times the user value (so that a fraction of the score can be used as the error).

The error term for each product is independent of the error term for every other product." />
		<add key="segment.error_term_user_value" value="Error Value" />
		<add key="segment.error_term_user_value.desc" value="" />
		<!-- Choice formulae end-->
		<!-- Segment Grid End-->
		
		<!-- attribute grid begin -->
		<add key="product_attribute.cust_tau" value="Tau" />
		<add key="product_attribute.cust_tau.desc" value="Tau
When modeling a market, consumer research typically requires that some SKUs are left out when measuring customer responses.  To be mathematically consistent, the missing SKUs need to be accounted for when modeling consumer choice.  The Tau parameter provides a mechanism for handling this, in conjunction with the 'Logit' probability of choice equation in the 'Segment Characteristics'

If you have no data on which to base a value of Tau, then enter 0.0 for Tau.  Otherwise, the value you enter for Tau will be added to both the pre-use and post-use preference values in columns G and beyond in the 'Preferences' sheet." />
		
		<add key="product_attribute.utility_min" value="Attribute Min" />
		<add key="product_attribute.utility_min.desc" value="Minimum

- Numerical Attributes:  You can put any number equal to or less than the lowest valued numerical attribute for all the products.  In the case of an attribute where a lower number is 'better' (such as weight in a laptop computer), you should define your attribute as 1/weight.  This way, larger values will be better.  You may not specify a minimum value that is less than zero, or larger than the maximum value.   .
- High, Medium, Low:  If you want to define attributes in terms of high, medium and low, you still must use numbers for the minimum and maximum values for an attribute.  For example, you could use '3' for High, '2' for Medium, and '1' for Low.
- Yes/No:  If you define an attribute as Yes/No, you still must use numbers for the minimum and maximum values for an attribute.  For example, you could use '1' for Yes, and '0' for No.
" />
		
		<add key="product_attribute.utility_max" value="Attribute Max" />
		<add key="product_attribute.utility_max.desc" value="Maximum

- Numerical Attributes:  You can put any number equal to or greater than the highest valued numerical attribute for all the products.  In the case of an attribute where a lower number is 'better' (such as weight in a laptop computer), you should define your attribute as 1/weight.  This way, larger values will be better.  You may not specify a maximum value that is less than zero, or less than the minimum value.   .
- High, Medium, Low:  If you want to define attributes in terms of high, medium and low, you still must use numbers for the minimum and maximum values for an attribute.  For example, you could use '3' for High, '2' for Medium, and '1' for Low.
- Yes/No:  If you define an attribute as Yes/No, you still must use numbers for the minimum and maximum values for an attribute.  For example, you could use '1' for Yes, and '0' for No.
" />
		
		<add key="product_attribute.cust_pref_min" value="Preference Min" />
		<add key="product_attribute.cust_pref_min.desc" value="Minimum
It is necessary that you fill in the Minimum and Maximum values for each consumer preference.  This indicates to the software important information on how products are considered.  These must be numbers.  

A negative value indicates that the associated consumer dislikes the associated attribute.  A positive value indicates that the consumer likes the attribute.  A value of 0 means that the consumer does not care.  The minimum value can be any negative number, as long as it is the negative of the maximum.  For example, acceptable Min/Max pairs are (-10, 10), (-1.7, 1.7), (10000, - 10000)." />
		
		<add key="product_attribute.cust_pref_max" value="Preference Max" />
		<add key="product_attribute.cust_pref_max.desc" value="Maximum
t is necessary that you fill in the Minimum and Maximum values for each consumer preference.  This indicates to the software important information on how products are considered.  These must be numbers.  

A negative value indicates that the associated consumer dislikes the associated attribute.  A positive value indicates that the consumer likes the attribute.  A value of 0 means that the consumer does not care.  The minimum value can be any negative number, as long as it is the negative of the maximum.  For example, acceptable Min/Max pairs are (-10, 10),  (-1.7, 1.7), (10000, - 10000).

You may have different minimum and maximum values for each attribute.  This technique allows you to scale attributes according to how important they are relative to each other." />
		
		<!-- attribute grid end -->
		
		<!-- product attribute grid begin -->
		<add key="product_attribute_value.attribute_name" value="Attribute" />
		<add key="product_attribute_value.attribute_name.desc" value="" />
		
		<add key="product_attribute_value.product_name" value="Product" />
		<add key="product_attribute_value.product_name.desc" value="" />
		
		<add key="product_attribute_value.has_attribute" value="Assign" />
		<add key="product_attribute_value.has_attribute.desc" value="" />
				
		<add key="product_attribute_value.pre_attribute_value" value="Pre Use" />
		<add key="product_attribute_value.pre_attribute_value.desc" value="" />
		
		<add key="product_attribute_value.post_attribute_value" value="Post Use" />
		<add key="product_attribute_value.post_attribute_value.desc" value="" />
		
		<add key="product_attribute_value.has_attribute" value="" />
		<add key="product_attribute_value.has_attribute.desc" value="Turn Attribute On or Off
By checking this box the attribute will be be used.
By de-selecting this bix the attribute will be not be used." />
		
		<add key="product_attribute_value.start_date" value="Start Date" />
		<add key="product_attribute_value.start_date.desc" value="Start Date
Many products have attributes that change over time e.g. 'new and improved'.  The start date provides a mechanism to handle this in MarketSim.  For each product, enter the first day the product is on the market (or the date of the first day of the simulation) in the 'Start Date' field.

Each time the attributes change for a product, add a new attribute value for the product with the new date. This will change the attribute value on that date and subsequent dates. 
Only one attribute value can be specified for a given date. " />
		<!-- product attribute grid end -->
		
		
		<!-- consumer preferences grid begin -->
		<add key="consumer_preference.attribute_name" value="Attribute" />
		<add key="consumer_preference.attribute_name.desc" value="" />
		
		<add key="consumer_preference.segment_name" value="Segment" />
		<add key="consumer_preference.segment_name.desc" value="" />
		
		<add key="consumer_preference.pre_preference_value" value="Pre Value" />
		<add key="consumer_preference.pre_preference_value.desc" value="Preference Values
A value here indicates how much a consumer segment likes or dislikes a product attribute. A negative value indicates that the associated consumer dislikes the associated attribute.  A positive value indicates that the consumer like the attribute.  A value of 0 means that the consumer does not care.
" />
		
		<add key="consumer_preference.post_preference_value" value="Post Value" />
		<add key="consumer_preference.post_preference_value.desc" value="Preference Values
A value here indicates how much a consumer segment likes or dislikes a product attribute AFTER the consumer has tried the product. A negative value indicates that the associated consumer dislikes the associated attribute.  A positive value indicates that the consumer like the attribute.  A value of 0 means that the consumer does not care.
" />
		
			<add key="consumer_preference.start_date" value="Start Date" />
		<add key="consumer_preference.start_date.desc" value="Start Date
Consumer preferences may change over time.  The start date provides a mechanism to handle this in MarketSim.  For each segment, enter the date of the first day of the simulation in the 'Start Date' field.  

Each time the preferences change for a segment, add a new customer preference with a new date. This will change the preference value on that date and subsequent dates. 
Only one preference value can be specified for a given date." />
		<!-- consumer preferences grid end -->
		
		<!-- Market Grid -->
		<add key="selectedTable.product_id" value="Product" />
		<add key="selectedTable.channel_id" value="Channel" />
		<add key="selectedTable.segment_id" value="Segment" />
		<add key="selectedTable.name" value="Plan Name" />
		<add key="selectedTable.type" value="Plan Type" />
		
		<!-- distribution grid begin-->
	
		
		
		<add key="distribution.product_name" value="Product" />
		<add key="distribution.product_name.desc" value="" />
		
		<add key="distribution.channel_name" value="Channel" />
		<add key="distribution.channel_name.desc" value="" />
		
		<add key="distribution.attr_value_F" value="% Avail." />
		<add key="distribution.attr_value_F.desc" value="Percent Availability
		 This specifies the % of shopping occasions for which the specified product will be available for purchase consideration in the specified channel.  This applies to the FIRST time that the product is purchased. " />
		
		<add key="distribution.attr_value_G" value="% Considered" />
		<add key="distribution.attr_value_G.desc" value="
		 This specifies the % of shopping occasions for which the specified product will be available for repurchase consideration in the specified channel.  In other words, this applies to the SECOND and SUBSEQUENT times that the product is purchased (once the consumer knows where to look for it).  A value of 100 means 100%." />
		
		<add key="distribution.message_awareness_probability" value="Aware Prob." />
		<add key="distribution.message_awareness_probability.desc" value="" />
		
		<add key="distribution.message_persuation_probability" value="Persuasion" />
		<add key="distribution.message_persuation_probability.desc" value="" />
		
		<add key="distribution.start_date" value="Start Date" />
		<add key="distribution.start_date.desc" value="" />
		
		<add key="distribution.end_date" value="End Date" />
		<add key="distribution.end_date.desc" value="" />
	
		<!-- distribution grid end-->
		
		<!-- price grid begin-->
		
		<add key="product_channel.productName" value="Product" />
		<add key="product_channel.productName.desc" value="" />
		
		<add key="product_channel.channelName" value="Channel" />
		<add key="product_channel.channelName.desc" value="" />
		
		<add key="product_channel.markup" value="Markeup" />
		<add key="product_channel.markup.desc" value="" />
		
		<add key="product_channel.price" value="Price" />
		<add key="product_channel.price.desc" value="" />
		
		<add key="product_channel.periodic_price" value="Periodic Price" />
		<add key="product_channel.periodic_price.desc" value="" />
		
		<add key="product_channel.how_often" value="Freq." />
		<add key="product_channel.how_often.desc" value="" />
		
		<add key="product_channel.ptype" value="Purchase Type" />
		<add key="product_channel.ptype.desc" value="" />
		
		<add key="product_channel.percent_SKU_in_dist" value="% Dist." />
		<add key="product_channel.percent_SKU_in_dist.desc" value="" />
		
		<add key="product_channel.start_date" value="Start Date" />
		<add key="product_channel.start_date.desc" value="" />
		
		<add key="product_channel.end_date" value="End Date" />
		<add key="product_channel.end_date.desc" value="" />
		
		<!-- price grid end-->
		
		<!-- display grid begin-->
		
		<add key="display.product_name" value="Product" />
		<add key="display.product_name.desc" value="" />
		
		<add key="display.channel_name" value="Channel" />
		<add key="display.channel_name.desc" value="" />

		<add key="display.media_type" value="Display Type" />
		<add key="display.media_type.desc" value="" />
		
		<add key="display.attr_value_F" value="% Display" />
		<add key="display.attr_value_F.desc" value="Persent on Display
		
This specifies the % of shopping occasions for which the specified product is on display in the specified channel." />

		<add key="display.message_awareness_probability" value="Aware Prob." />
		<add key="display.message_awareness_probability.desc" value="" />

		<add key="display.message_persuation_probability" value="Persuasion" />
		<add key="display.message_persuation_probability.desc" value="" />

		<add key="display.start_date" value="Start Date" />
		<add key="display.start_date.desc" value="" />

		<add key="display.end_date" value="End Date" />
		<add key="display.end_date.desc" value="" />
		
		<!-- display grid end-->
		
		<!-- media grid begin-->
		
		<add key="mass_media.product_name" value="Product" />
		<add key="mass_media.product_name.desc" value="" />
		
		<add key="mass_media.segment_name" value="Segment" />
		<add key="mass_media.segment_name.desc" value="" />
		
		<add key="mass_media.channel_name" value="Channel" />
		<add key="mass_media.channel_name.desc" value="" />
		
		<add key="mass_media.media_type" value="Type" />
		<add key="mass_media.media_type.desc" value="Type
There are five types of mass media actions you can define:

A: Absolute number of impressions.  You will get the exact number of impressions specified in the GRP column.  Impressions are not guaranteed to be unique-- some people will get more, some people less, than the AVERAGE number or percentage specified.  Variable is generally easier to use than Absolute, because it automatically scales as you change segment sizes.

V: Variable number of impressions.  You will get a number of impressions equal to the percentage of the population specified in the GRP's.  Variable is the best choice when you may be changing the size of a segment, as the number of impressions per person will remain constant.  Impressions are not guaranteed to be unique-- some people will get more, some people less, than the AVERAGE number or percentage specified.  Variable is generally easier to use than Absolute, because it automatically scales as you change segment sizes.

C: Coupons.                         This choice will cause coupons for the specified product (and optionally a specific channel) to be distributed to the specified segments.

S: Samples.                         This choice will cause free samples for the specified product (and optionally a specific channel) to be distributed to the specified segments."
/>
		<add key="mass_media.attr_value_G" value="GRP" />
		<add key="mass_media.attr_value_G.desc" value="Number of Imppressions
		This column defines the total number of impressions that will be delivered to the consumer segment(s) you have defined for this particular advertising task.  

For a type of 'Absolute', you will get exactly the number of impressions specified in this column RANDOMLY distributed within the consumer population.  Not all individuals will get the same number of impressions.

For a type of 'Variable', this column is used to specify the number of impressions as a percentage of the total size of the specified consumer segment(s).  This is also known as Gross Rating Points (GRP), which is the product of reach and frequency.  Typically you will enter a number greater than 100, meaning that you want more than 1 impression per person, on average.  A value of 640 does NOT mean than some individuals will receive four-tenths of an impression.  In simply means that for a population of 1000 people, 6,400 impressions will be RANDOMLY sent to the 1000 individuals.  Any one individual will always receive an integer number of impressions.

For a type of 'Coupon', this column is the % of segment population that receives coupons.  A value of 100 means 100%.

For a type of 'Sample', this column is the % of segment population that receives samples.  A value of 100 means 100%." />
		
		<add key="mass_media.attr_value_H" value="Cost/Impression" />
		<add key="mass_media.attr_value_H.desc" value="Cost per Impression
To compute the financial cost of an advertising campaign, the number of impressions is multiplied by the cost per impression.  MarketSim will aggregate the total marketing costs both for individual products and brands (which might sell multiple products).

The cost for an impression might be low (pennies) for something like a TV commercial, as the number of impressions is quite high.  For a direct sales call, the cost for an impression might be quite high (hundreds of dollars).  Usually impressions cost more as the audience becomes more targeted, which usually also makes the audience smaller.

For those of you familiar with cost per impression specified as CPM (cost per thousand), be sure to translate your numbers into cost per individual impressions.  Do this by dividing the CPM number by 1000 before entering it into this cell.

For coupons, enter the coupon discount of the product in this column.  For example, if it is a $0.50 off coupon, enter 0.5.

For samples, 
- for fixed period repurchasing or NBD repurchasing ,enter the days of use that the sample provides
- For Task-Based Buying, enter the percent of a SKU that the sample has (from 0 to 100)." />
		
		<add key="mass_media.attr_value_I" value="Redemption Rate" />
		<add key="mass_media.attr_value_I.desc" value="Coupon Redemption Rate or Sample Usage Rate

For a coupon, column I is used to specify what percentage of the population receiving the coupon (column G) will redeem the coupon.  Please enter a number between 0 and 100.

Example: If 30% of the population receives the coupon (column G), and the redemption rate is 10% (column I), then 3% of the total population will redeem the coupon (the net result in MarketSim).  Any rate greater than 100% will be limited to 100%.

For a sample, strength is used to specify the percentage of people receiving the sample that will try the sample.  Any rate greater than 100% will be limited to 100%. 

The consumers redeem coupons at a 'front loaded' rate:
- The number of impressions is divided by the duration (in days) of the drop.  This produces an average number of redemptions per day.
- The simulated redemption rate is front loaded, such that the number of redemptions on the first day of the drop is twice the average.  Redemptions scale down linearly each day, such that in the middle day of the drop, the number of redemptions on that day equals the average redemption rate.  On the last day of the drop, the number of coupons redeemed is half the average redemption rate.

The values in column I are ignored for Advertising and Distribution tasks.

Important note:  If coupons or samples are sent to a segment that has eliminated the product from consideration, then the coupons or samples will be ignored by that segment, regardless of the value entered in this column for coupon redemption or sample trial." />
		
		<add key="mass_media.message_awareness_probability" value="Aware Prob." />
		<add key="mass_media.message_awareness_probability.desc" value="" />
		
		<add key="mass_media.message_persuation_probability" value="Persuasion" />
		<add key="mass_media.message_persuation_probability.desc" value="" />
		
		<add key="mass_media.start_date" value="Start Date" />
		<add key="mass_media.start_date.desc" value="" />
		
		<add key="mass_media.end_date" value="End Date" />
		<add key="mass_media.end_date.desc" value="" />
		
		<!-- media grid end-->
		
		
		
		
		<!-- Results Form Variables Begin -->
		
		<!-- Marketing Inputs -->
		<add key="results_std.promoprice" value="Promoted Price" />
		<add key="results_std.promoprice.desc" value="Promoted Price as reported by the segments during the simulation" />
		<add key="results_std.unpromoprice" value="Unpromoted Price" />
		<add key="results_std.unpromoprice.desc" value="Unpromoted Price  as reported by the segments during the simulation" />
		<add key="results_std.percent_sku_at_promo_price" value="% of Promoted price" />
		<add key="results_std.percent_sku_at_promo_price.desc" value="Percent of units at the promoted price" />
		<add key="results_std.ave_percent_sku_at_promo_price" value="Average % of Promoted price" />
		<add key="results_std.ave_percent_sku_at_promo_price.desc" value="Average perccentile of units at the Promoted price"/>
		<add key="results_std.ave_promoprice" value="Average Promoted Price" />
		<add key="results_std.ave_promoprice.desc" value="Average promoted price, average is computed over all products" />
		<add key="results_std.rel_promoprice" value="Relative Promoted Price" />
		<add key="results_std.rel_promoprice.desc" value="Promoted price relative to other products" />
		<add key="results_std.percent_preuse_distribution_sku" value="% Product Distribution" />
		<add key="results_std.percent_preuse_distribution_sku.desc" value="% Product Distribution" />
		<add key="results_std.ave_percent_preuse_distribution_sku" value="Average % Product Distribution" />
		<add key="results_std.ave_percent_preuse_distribution_sku.desc" value="" />
		
		<add key="results_std.rel_unpromoprice" value="Relative Unpromoted Price" />
		<add key="results_std.rel_unpromoprice.desc" value="Relative to average unpromoted price" />
		
		<add key="results_std.ave_unpromoprice" value="Average Unpromoted Price" />
		<add key="results_std.ave_unpromoprice.desc" value="Average is computed  over all products" />
		
		<!-- Marketing outputs -->
		
		<!-- Unit Sales -->
		<add key="results_std.sku_share" value="Product Share" />
		<add key="results_std.sku_share.desc" value="Percent of Units Bought" />
		
		<add key="results_std.total_sku_bought" value="Total Sales" />
		<add key="results_std.total_sku_bought.desc" value="Total Sales each day" />
		
		<add key="results_std.num_sku_bought" value="Unit Sales" />
		<add key="results_std.num_sku_bought.desc" value="How may products were bought each day" />
		
		<!-- Dollar Sales -->
		<add key="results_std.dollar_share" value="Dollar Share" />
		<add key="results_std.dollar_share.desc" value="Sales for a given product each day" />
		
		<add key="results_std.sku_dollar_purchased_tick" value="Dollar Sales" />
		<add key="results_std.sku_dollar_purchased_tick.desc" value="Sales for a given product each day" />
		
		<add key="results_std.total_sku_dollar_purchased_tick" value="Total Dollar Sales" />
		<add key="results_std.total_sku_dollar_purchased_tick.desc" value="Total dollar Sales for a given product each day" />
		
		<!-- More -->
		
		<add key="results_std.percent_aware_sku_cum" value="Product Awareness" />
		<add key="results_std.percent_aware_sku_cum.desc" value="Value of Awareness for a given product" />
		
		<add key="results_std.persuasion_sku" value="Product Persuasion" />
		<add key="results_std.persuasion_sku.desc" value="Value of Persuasion for a given product" />
		
		<add key="results_std.persuasion_sku" value="Product Persuasion" />
		<add key="results_std.persuasion_sku.desc" value="Value of Persuasion for a given product" />
		
		<add key="results_std.max_persuasion_sku" value="MAX Persuasion" />
		<add key="results_std.max_persuasion_sku.desc" value="Maximum of Persuasion for products in brand" />
		
		<add key="results_std.num_sku_triers" value="Triers" />
		<add key="results_std.num_sku_triers.desc" value="Number of Consumers whi have tried a product" />
		
		<add key="results_std.num_sku_repeater_trips_cum" value="Num Repeats" />
		<add key="results_std.num_sku_repeater_trips_cum.desc" value="Number of repeats trips for a product" />
		
		<add key="results_std.num_sku_repeaters" value="Num Repeaters" />
		<add key="results_std.num_sku_repeaters.desc" value="Number of repeat buyers for a product" />
		
		<add key="results_std.repeaters_per_trier" value="Repeaters rate" />
		<add key="results_std.repeaters_per_trier.desc" value="Percent of consumers who repeat purchase.
		This is defined as Repeaters/Triers" />
		
		<add key="results_std.repeats_per_repeater" value="Repeats per Repeater" />
		<add key="results_std.repeats_per_repeater.desc" value="Number of repeat buys per repeater" />
		
		<add key="results_std.purchase_frequency" value="Purchase Frequency" />
		<add key="results_std.purchase_frequency.desc" value="Number of repeat buys per repeater" />
		
		<add key="results_std.buying_rate" value="Buying Rate" />
		<add key="results_std.buying_rate.desc" value="" />
		
		<add key="results_std.num_trips" value="Number of shopping trips" />
		<add key="results_std.num_trips.desc" value="" />
		
		<add key="results_std.transaction_size" value="Transaction Size (Units)" />
		<add key="results_std.transaction_size.desc" value="" />
		
		<add key="results_std.avg_sku_transaction_dollars" value="Transaction Size ($)" />
		<add key="results_std.avg_sku_transaction_dollars.desc" value="" />
		
		<add key="results_std.num_coupon_redemptions" value="Coupons Received" />
		<add key="results_std.num_coupon_redemptions.desc" value="" />
		
		<add key="results_std.num_units_bought_on_coupon" value="Coupon Purchases" />
		<add key="results_std.num_units_bought_on_coupon.desc" value="" />
		
		<add key="results_std.num_adds_sku" value="Product Adds" />
		<add key="results_std.num_adds_sku.desc" value="" />
		
		<add key="results_std.num_drop_sku" value="Product Drops" />
		<add key="results_std.num_drop_sku.desc" value="" />
		
		<add key="results_std.GRPs_SKU_tick" value="GRPs" />
		<add key="results_std.GRPs_SKU_tick.desc" value="" />
		
		<add key="results_std.ave_GRPs_SKU_tick" value="Average GRPs" />
		<add key="results_std.ave_GRPs_SKU_tick.desc" value="" />
		
		<add key="results_std.rel_GRPs_SKU_tick" value="Relative GRPs" />
		<add key="results_std.rel_GRPs_SKU_tick.desc" value="" />
		
		<add key="results_std.percent_on_display_sku" value="% on Display" />
		<add key="results_std.percent_on_display_sku.desc" value="" />
		
		<!-- external data -->
		<add key="results_std.real_sales" value="Real Sales" />
		<add key="results_std.real_sales.desc" value="" />
		
		<add key="results_std.real_total_sales" value="Real Total Sales" />
		<add key="results_std.real_total_sales.desc" value="" />
		
		<add key="results_std.real_share" value="Real Share" />
		<add key="results_std.real_share.desc" value="" />
		
		
		<!-- summary form -->
		<add key="SummaryTable.name" value="Scenario" />
		<add key="SummaryTable.brand_name" value="Brand" />
		<add key="SummaryTable.product_name" value="Product" />
		<add key="SummaryTable.sim_sales" value="Sim Sales" />
		<add key="SummaryTable.real_sales" value="Real Sales" />
		<add key="SummaryTable.excess_sales" value="Excess Sales" />
		<add key="SummaryTable.percent_excess_sales" value="Percent Excess Sales" />
		<add key="SummaryTable.sim_share" value="Sim Share" />
		<add key="SummaryTable.real_share" value="Real Share" />
		<add key="SummaryTable.excess_share" value="Excess Share" />
		<add key="SummaryTable.percent_excess_share" value="Percent Excess Share" />
		<add key="SummaryTable.ms_units_error" value="RMS Error" />
		<add key="SummaryTable.dollars_sold" value="Dollars" />
		<add key="SummaryTable.dollar_share" value="$ Share" />
		<add key="SummaryTable.mape" value="MAPE" />
		<add key="SummaryTable.percent_aware_sku_cum_error" value="Awareness Error" />
		
		
		<add key="TotalsTable.name" value="Scenario" />
		<add key="TotalsTable.sim_sales" value="Sim Sales" />
		<add key="TotalsTable.real_sales" value="Real Sales" />
		<add key="TotalsTable.excess_sales" value="Excess Sales" />
		<add key="TotalsTable.percent_excess_sales" value="Percent Excess Sales" />
		<add key="TotalsTable.excess_share" value="Excess Share" />
		<add key="TotalsTable.percent_excess_share" value="Percent Excess Share" />
		<add key="TotalsTable.ms_units_error" value="RMS Error" />
		<add key="TotalsTable.dollars_sold" value="Dollars" />
		<add key="TotalsTable.mape" value="MAPE" />
		<add key="TotalsTable.percent_aware_sku_cum_error" value="Awareness Error" />
		
		<!-- Results Form Variables End -->
		
		<!-- Batch Processing UI -->
		<add key="scenario.name" value="Scenario" />
		<add key="scenario.model_id" value="Model" />
		
		<add key="sim_queue.name" value="Scenario" />
		<add key="sim_queue.model_id" value="Model" />
		<add key="sim_queue.current_status" value="Status" />
		
		<!-- Scenario parameters -->
		<add key="scenario_parameter.scenario_id" value="Scenario" />
		<add key="scenario_parameter.param_id" value="Parameter" />
		<add key="scenario_parameter.aValue" value="Value" />
		
		<!-- Model Parameter -->
		<add key="model_parameter.name" value="Parameter" />
		<add key="model_parameter.table_name" value="Type" />
		<add key="model_parameter.col_name" value="Property" />
		
		<!-- Segment Network -->
		<add key="segment_network.from_segment_name" value="Talking Segment" />
		<add key="segment_network.to_segment_name" value="Listening Segment" />
		<add key="segment_network.network_param" value="Network Parameter" />
			
		<add key="segment_network.from_segment_name.desc" value="" />
		<add key="segment_network.to_segment_name.desc" value="" />
		<add key="segment_network.network_param.desc" value="" />
		
		
		<!-- Network Model Parameters -->
		<add key="network_parameter.persuasion_pre_use" value="Persuasion (Pre-Use)" />
		<add key="network_parameter.persuasion_post_use" value="Persuasion (Post-Use)" />
		<add key="network_parameter.awareness_weight" value="Awareness Weight" />
		<add key="network_parameter.num_contacts" value="Number of Contacts" />
		<add key="network_parameter.prob_of_talking_pre_use" value="Prob. of Talking (Pre-Use)" />
		<add key="network_parameter.prob_of_talking_post_use" value="Prob. of Talking (Post-Use)" />
		<add key="network_parameter.use_local" value="Use Local" />
		
		<add key="network_parameter.persuasion_pre_use.desc" value="Pre-Use Persuasion

This is the amount of persuasion  that a personal recommendation will add  to the receiver.  This applies to the situation where the agent talking has never used the product, but is aware of the product." />
		<add key="network_parameter.persuasion_post_use.desc" value="Post-Use Persuasion Probability

This is the amount of persuasion that a personal recommendation will add to the receiver.  This applies to the situation where the agent talking has used the product." />
		<add key="network_parameter.awareness_weight.desc" value="Awareness Weight of a Personal Message

This is the number of 'awareness units' that a personal recommendation provides.  As a point of reference, the 'Awareness Threshold' parameter indicates the number of 'awareness units' a consumer must receive to become aware of a product.  This parameter is used only for the 'Awareness' awareness model.  It is not used for the 'Persuasion and Awareness' awareness model. " />
		<add key="network_parameter.num_contacts.desc" value="Number of Contacts

The average number of contacts that a consumer has.  Contacts are people that a consumer would talk to frequently.

The actual number of contacts is distributed randomly around the value you enter for this parameter.  The 'spread' of the distribution is defined by the Variability parameter.

You can enter any number between 0 and 100 for this parameter, but no greater than 1/10th of the population size.  The more contacts a consumer talks to, the faster product awareness and persuasion will spread within a consumer segment.

Also please read the description of the  'Use Local' parameter.
" />
		<add key="network_parameter.prob_of_talking_pre_use.desc" value="Probability of Talking to a Contact Pre-Use
		Defines the chance that a consumer, who has not yet used a specific product, will tell another consumer about that product.  If a consumer is not aware of a product, the probability of talking about that product is 0.  This requires that the consumer initiating the conversation must be aware of the product.  The value for this parameter should be between 0 and 1.0." />
		<add key="network_parameter.prob_of_talking_post_use.desc" value="Probability of Talking to a Contact Post-Use

Defines the chance that a consumer, who has used a specific product, will tell another consumer about that product.    The value for this parameter should be between 0 and 1.0.
" />
		<add key="network_parameter.use_local.desc" value="Use Local

You can use this parameter to define Close Contacts as consumers 'geographically' close to a given consumer. This is a good approximation of persistent social networks. To do so, check this box.

Geographically close is determined by placing the entire population of a consumer segment on a grid.  Consumers that are next to each other on this grid are considered geographically close. 

For example, if you have a population of 10,000 and a consumer has 10 close contacts, and has a 1.0 probability of talking to those close contacts each day, then:

- Without 'Use Local' not chosen , consumer 'A' will pick 10 people at random each day to talk to.  At the end of 100 days, the consumer will have picked 1000 people at random to talk to.  There will be some overlap, so the consumer 'A' will have reached less than 1000 different people, but certainly more than 10.

- With 'Use Local' chosen, people to talk to are chosen from the local 'neighborhood' of consumer 'A'.  A's 10 neighbors will be picked from neighboring grid elements.  So no matter how long the simulation runs, A will only ever make a maximum of 24 people aware.

Although MarketSim does not currently model real-world maps, using a grid provides a good approximation of the communication dynamics that occur on real-world maps. 

To model people who have a major influences in a product category (a.k.a. 'option leaders', 'connectors', etc.), you can define a small segment (even just one person) that has a large social network and a high persuasion value." />
		
		
		<!-- Simulation Metrics -->
		<add key="Metric.SimSummary" value="Sim Totals" />
		<add key="Metric.SimSummaryByProd" value="Summary by Product" />
		<add key="Metric.SimSummaryByProdChan" value="Summary by Product and Channel" />
		<add key="Metric.SimSummaryByProdChanSeg" value="Summary by Product, Channel, Segment" />
		<add key="Metric.CalSummary" value="MAPE Total" />
		<add key="Metric.CalSummaryByProd" value="Difference by Product" />
		<add key="Metric.CalSummaryByProdChan" value="Difference by Product and Channel" />
		<add key="Metric.CalSummaryByChan" value="Channel MAPE" />
		
		
		<!-- tables headings -->
		<add key="SummaryTable.scenario_id" value="Scenario" />
		<add key="SummaryTable.run_id" value="Simulation" />
		<add key="SummaryTable.product_id" value="Product" />
		<add key="SummaryTable.segment_id" value="Segment" />
		<add key="SummaryTable.channel_id" value="Channel" />
		
		<add key="TotalsTable.scenario_id" value="Scenario" />
		<add key="TotalsTable.run_id" value="Simulation" />
		<add key="TotalsTable.product_id" value="Product" />
		<add key="TotalsTable.segment_id" value="Segment" />
		<add key="TotalsTable.channel_id" value="Channel" />
		
		<!-- End Simulation Metrics -->

<!-- Scenario Type description -->
<add key="Scenario.type.standard" value=
"This runs the scenario without any variables being active.
Parameter values are still used.
This will generate one simulation.
" />

<add key="Scenario.type.Parallel Search" value=
"Variables are active. This will evaluate all variables at the prescribed values.
Note that stepped variables will always evaluate at Min and Max values as well as the number of interior points specified.
The number of simulations generated will be equal to the product of the number of variable values.
" />

<add key="Scenario.type.Serial Search" value=
"Variables are active. As in a parallel search all the variables are evaulted at all possible values.
In a serial search only one parameter is allowed to change at a time. This allows you to determine the effect of the variables on individual parameters.
The parameter values are held fixed at the value specified in the parameter grid.
The number of simulations generated is equal to the product of the number of variable values multiplied by the number of parameters.
Use this technique if you have one or two variables controlling a number of parameters.
" />

<add key="Scenario.type.Random Search" value=
"Variables are active. A random search will create random points in the domain specified for the variables.
If a variable is specified to be centered then the dispersion will have the same distribution.
Stepped variables are treated as uniformly distributed between the Min and Max values.

This differs from a parallel search in that the variable values will not have a grid stucture.

The number of simulations generated will be equal to the sum of the number of steps specified for the variables.
" />

<add key="Scenario.type.Optimization" value=
"Uses a gradient descent method to MINIMIZE the sum of selected metrics" />

<add key="Scenario.type.Statistical" value=
"Will generate multiple simulations based on a set of seed values" />

<add key="Scenario.type.Checkpoint" value=
"Stores a saved state for consumers at the end of simulation run. This date will then become the checkpoint date. 
Scenarios that begin after the checkpoint date will use the checkpoint state and will not need to start at the model start date." />

	</appSettings>
</configuration>