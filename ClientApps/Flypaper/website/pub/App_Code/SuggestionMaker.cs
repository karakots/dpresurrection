using System;
using System.Data;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;

using WebLibrary;
using BusinessLogic;
using MediaLibrary;

/// <summary>
/// Summary description for SuggestionMaker
/// </summary>
public class SuggestionMaker
{
    private const double keyWeightIncreaseRatio = 1.10;

    private MediaPlan basePlan;
    private MediaPlan suggestedPlan;
    private List<MediaItem> suggestedAddItems;
    private List<MediaItem> suggestedRemoveItems;
    private bool createNew;
    private double newBudget;
    private MediaCampaignSpecs.CampaignGoal goalToImprove;
    private Dictionary<string, List<PlanStorage.PlanVersionInfo>> allPlanVersions;

    double minRemoveTypeScore;
    double maxRemoveTypeScore;
    double minAddTypeScore;
    double maxAddTypeScore;

    /// <summary>
    /// Creates a new suggestion-maker object.
    /// </summary>
    /// <param name="basePlan"></param>
    /// <param name="createNew"></param>
    /// <param name="newBudget"></param>
    /// <param name="metricToImprove"></param>
    /// <param name="allPlanVersions"></param>
    public SuggestionMaker( MediaPlan basePlan, bool createNew, double newBudget, string metricToImprove, Dictionary<string, List<PlanStorage.PlanVersionInfo>> allPlanVersions ) {
        this.basePlan = basePlan;
        this.createNew = createNew;
        this.newBudget = newBudget;
        this.goalToImprove = (MediaCampaignSpecs.CampaignGoal) Enum.Parse( typeof( MediaCampaignSpecs.CampaignGoal ), metricToImprove );
        this.allPlanVersions = allPlanVersions;
    }

    /// <summary>
    /// Generates the suggested new plan, or the lists of items that the user can choose to add/remove. and returns the general-description HTML.  
    /// </summary>
    /// <remarks>Call GetSuggestedPlan() (if this.createNew == true), or GetSuggestedAddItems() and  GetSuggestedRemoveItems() after calling this method </remarks>
    /// <returns></returns>
    public string GetSuggestionHTML() {
        string suggs = "";

        string suggestedNewPlanName = Utils.GetSuggestedPlanName( basePlan.PlanName, basePlan.CampaignName, this.allPlanVersions, false );
        bool goalsImproved = true;
        List<MediaPlan.PlanGoal> adjustedGoals = GetAdjustedGoals( out goalsImproved );
        if( createNew ) {
            this.suggestedPlan = CreateNewAutogeneratedPlan( basePlan.Specs, suggestedNewPlanName, this.newBudget, adjustedGoals );
            suggs += SummarizePlan( this.suggestedPlan );
        }
        else {
            suggs += GetModificationSuggestions( suggestedNewPlanName, this.newBudget, adjustedGoals );
            this.suggestedPlan = new MediaPlan( basePlan, "temp" );
            this.suggestedPlan.Goals = adjustedGoals;
        }

        suggs += GetSuggestionFooter( suggestedNewPlanName );

        suggs += "<br><br><font color='#ffffff'>" + InternalGoalWeightSummary( this.suggestedPlan ) + "</font>";

        return suggs;
    }

    /// <summary>
    /// Gets the suggested plan, generated by the latest call to GetSuggestionHTML().
    /// </summary>
    /// <returns></returns>
    public MediaPlan GetSuggestedPlan() {
        return this.suggestedPlan;
    }

    /// <summary>
    /// Gets the list of suggested media items to add, generated by the latest call to GetSuggestionHTML().
    /// </summary>
    /// <returns></returns>
    public List<MediaItem> GetSuggestedAddItems() {
        return this.suggestedAddItems;
    }

    /// <summary>
    /// Gets the list of suggested media items to remove, generated by the latest call to GetSuggestionHTML().
    /// </summary>
    /// <returns></returns>
    public List<MediaItem> GetSuggestedRemoveItems() {
        return this.suggestedRemoveItems;
    }

    /// <summary>
    /// Returns HTML that describes the given plan and how it compares to the base plan.
    /// </summary>
    /// <param name="plan"></param>
    /// <returns></returns>
    private string SummarizePlan( MediaPlan plan ) {
        string s = "<table cellpadding=3 cellspacing=0>";

        s += "<tr><td colspan=4><b>Suggested Media Plan:</b></td></tr>";

        foreach( MediaItem typeItem in plan.MediaItems ){
            string mType = typeItem.MediaType.ToString();
            string mDesc = plan.GetTypeSummaryDescription( typeItem.MediaType );
            double mCost = plan.GetTypeSpending( typeItem.MediaType );
            double prevCost = this.basePlan.GetTypeSpending( typeItem.MediaType );
            double ratio = 1;
            if( prevCost != 0 ) {
                ratio = mCost / prevCost;
            }

            string costStr = null;
            if( mCost < 1000 ) {
                costStr = String.Format( "$ {0:0}", plan.GetTypeSpending( typeItem.MediaType ) );
            }
            else {
                costStr = String.Format( "$ {0:0,0}", plan.GetTypeSpending( typeItem.MediaType ) );
            }

            double pctDelta = 100 * (ratio - 1);
            string arrowImg = "";
            if( pctDelta > 5 ) {
                arrowImg = "<img src='images/UpArrowBig.gif' height=16 width=16>";
            }
            else if( pctDelta > 2.5 ) {
                arrowImg = "<img src='images/UpArrowMed.gif' height=16 width=16>";
            }
            else if( pctDelta > 0.8 ) {
                arrowImg = "<img src='images/UpArrowSml.gif' height=16 width=16>";
            }
            else if( pctDelta < -5 ) {
                arrowImg = "<img src='images/DnArrowBig.gif' height=16 width=16>";
            } 
            else if( pctDelta < -2.5 ) {
                arrowImg = "<img src='images/DnArrowMed.gif' height=16 width=16>";
            }
            else if( pctDelta < -0.8 ) {
                arrowImg = "<img src='images/DnArrowSml.gif' height=16 width=16>";
            }
            
            s += String.Format( "<tr><td>{0}:</td><td>{1}</td><td>{2}</td><td>{3}</td><td>{4:f0}%</td></tr>", 
                mType, mDesc, costStr, arrowImg, pctDelta );
        }

        s += "</table>";

        return s;
    }

    /// <summary>
    /// Adds the footer with the plan-name entry field and the accept-suggestions button.
    /// </summary>
    /// <param name="suggestedName"></param>
    /// <returns></returns>
    private string GetSuggestionFooter( string suggestedName ) {
        string existingPlanNamesList = Utils.ConvertToJavascriptArg( Utils.AllPlanNamesFor( this.basePlan.CampaignName, this.allPlanVersions ) );
        string chkName_JS = String.Format( "return VerifyImprovedPlanNameIsNew( \"{0}\" );", existingPlanNamesList );

        string f = String.Format( "<br><br>Name for Modified Plan: <input type=text size=40 value='{0}' name='SuggestedPlanName' ID='SuggestedPlanName' >" +
                 "<input type=image src='images/Button-CreateSuggested.gif' name='CreateSuggestedPlan' onclick='{1}' style='position:relative;top:5px;left:6px;' >",
                         suggestedName, chkName_JS );

        return f;
    }

    /// <summary>
    /// Returns a string summarizing the current values of the internal goal weights (for debug/devel)
    /// </summary>
    /// <param name="plan"></param>
    /// <returns></returns>
    private string InternalGoalWeightSummary( MediaPlan plan ) {
        string s = "";
        foreach( MediaPlan.PlanGoal pg in plan.Goals ) {
            s += String.Format( "{0}:{1} ", pg.Goal, pg.Weight );
        }
        s += "<br>";
        s += String.Format( "added type min,max = {0:f3}, {1:f3}  removed type min, max = {2:f3}, {3:f3}",
            this.minAddTypeScore, this.maxAddTypeScore, this.minRemoveTypeScore, this.maxRemoveTypeScore );
        return s;
    }

    /// <summary>
    /// Creates a new media plan based on the given adjusted goal weights.
    /// </summary>
    /// <param name="specs"></param>
    /// <param name="planName"></param>
    /// <param name="budget"></param>
    /// <param name="adjustedGoals"></param>
    /// <returns></returns>
    private MediaPlan CreateNewAutogeneratedPlan( MediaCampaignSpecs specs, string planName, double budget, List<MediaPlan.PlanGoal> adjustedGoals ) {
        specs.TargetBudget = budget;
        List<MediaCampaignSpecs.CampaignGoal> origGoals = specs.CampaignGoals;
        List<double> origWeights = specs.GoalWeights;

        specs.CampaignGoals = new List<MediaCampaignSpecs.CampaignGoal>();
        specs.GoalWeights = new List<double>();
        for( int i = 0; i < adjustedGoals.Count; i++ ) {
            specs.CampaignGoals.Add( adjustedGoals[ i ].Goal );
            specs.GoalWeights.Add( adjustedGoals[ i ].Weight );
        }

        AllocationService allocationService = new AllocationService();
        MediaPlan newPlan = allocationService.CreateNewMediaPlan( specs );
        newPlan.PlanName = planName;
        newPlan.TargetBudget = specs.TargetBudget;

        // restore the original goals to the campaign 
        newPlan.Specs.CampaignGoals = origGoals;
        newPlan.Specs.GoalWeights = origWeights;
        return newPlan;
    }

    /// <summary>
    /// Creates the lists of suggested media items to be added or removed.
    /// </summary>
    /// <param name="planName"></param>
    /// <param name="budget"></param>
    /// <param name="adjustedGoals"></param>
    /// <returns></returns>
    private string GetModificationSuggestions( string planName, double budget, List<MediaPlan.PlanGoal> adjustedGoals ) {

        MediaPlan tempPlan = new MediaPlan( this.basePlan, "Temp Plan" );
        tempPlan.Specs.TargetBudget = budget;

        AllocationService allocationService = new AllocationService();

        tempPlan.Specs.CampaignGoals = new List<MediaCampaignSpecs.CampaignGoal>();
        tempPlan.Specs.GoalWeights = new List<double>();
        foreach( MediaPlan.PlanGoal pg in adjustedGoals ) {
            tempPlan.Specs.CampaignGoals.Add( pg.Goal );
            tempPlan.Specs.GoalWeights.Add( pg.Weight );
        }
        Dictionary<MediaVehicle.MediaType, double> typeAllocation = allocationService.GetTypeDollarsAllocation( tempPlan );

        this.suggestedRemoveItems = new List<MediaItem>();

        List<string> allTypes = Utils.MediaDatabase.GetMediaTypes();
        MediaVehicle.MediaType[] addRmvTypes = new MediaVehicle.MediaType[ allTypes.Count ];
        double[] addRmvDelta = new double[ allTypes.Count ];
        Dictionary<string, double> deltaPlusBudgetDict = new Dictionary<string, double>();
        int indx = 0;
        foreach( string typStr in allTypes ) {
            MediaVehicle.MediaType t = (MediaVehicle.MediaType)Enum.Parse( typeof( MediaVehicle.MediaType ), typStr );
            addRmvTypes[ indx ] = t;
            addRmvDelta[ indx ] = 0;

            double oldAllocation = basePlan.GetTypeSpending( t );

            double newAllocation = 0;
            if( typeAllocation.ContainsKey( t ) ) {
                newAllocation = typeAllocation[ t ];
            }

            addRmvDelta[ indx ] = newAllocation - oldAllocation;

            deltaPlusBudgetDict.Add( t.ToString(), Math.Max( 0, addRmvDelta[ indx ] ) );

            indx += 1;
        }
        Array.Sort( addRmvDelta, addRmvTypes );
        Array.Reverse( addRmvDelta );
        Array.Reverse( addRmvTypes );

        MediaVehicle.MediaType typeToAdd = addRmvTypes[ 0 ];
        double addTypeAmount = addRmvDelta[ 0 ];
        MediaVehicle.MediaType typeToRemove = addRmvTypes[ addRmvTypes.Length - 1 ];

        double budgetDelta = budget - this.basePlan.TargetBudget;

        double addBudget = addTypeAmount + budgetDelta;
        double removeBudget = addTypeAmount - budgetDelta;
        
        List<MediaItem> existingItems = basePlan.GetAllItems();   
        List<Guid> existingVehicleIDs = new List<Guid>();
        foreach( MediaItem m in existingItems ){
            existingVehicleIDs.Add( m.vehicle_id );
        }

        List<MediaItem> ratedRemoveItems = basePlan.GetRatedItems( typeToRemove );

        double rmvTot = 0;
        int rmvIndx = ratedRemoveItems.Count - 1;
        while( rmvTot < removeBudget && rmvIndx >= 0 ) {
            suggestedRemoveItems.Add( ratedRemoveItems[ rmvIndx ] );
            rmvTot += ratedRemoveItems[ rmvIndx ].TotalPrice;
            rmvIndx -= 1;
        }

        // recalibrate the amount to add
        addBudget += (rmvTot - removeBudget);
        tempPlan.Specs.TargetBudget = addBudget;

        Dictionary<string, double> addTypeBudgetDict = new Dictionary<string, double>();
        foreach( MediaVehicle.MediaType t in typeAllocation.Keys ) {
            if( t == typeToAdd ) {
                addTypeBudgetDict.Add( t.ToString(), addBudget );
            }
            else {
                addTypeBudgetDict.Add( t.ToString(), 0 );
            }
        }

        MediaPlan addItemsPlan = allocationService.CreateNewMediaPlan( tempPlan.Specs, addTypeBudgetDict, existingVehicleIDs );
        this.suggestedAddItems = addItemsPlan.GetAllItems();

        // now we know how much of each media type we want to add or remove...get the range of ratings for the media types to add and remove
        Dictionary<SimpleOption, double> addItemOptions = allocationService.GetRatedProminence( typeToAdd, tempPlan );
        AdOption bestAddItemOption = null;
        double bestAddItemScore = -1;
        foreach (SimpleOption aOpt in addItemOptions.Keys)
        {
            if( addItemOptions[ aOpt ] > bestAddItemScore ) {
                bestAddItemOption = aOpt;
                bestAddItemScore = addItemOptions[ aOpt ];
            }
        }
        Dictionary<SimpleOption, double> removeItemOptions = allocationService.GetRatedProminence(typeToRemove, tempPlan);
        AdOption bestRemoveItemOption = null;
        double bestRemoveItemScore = -1;
        foreach (SimpleOption rOpt in removeItemOptions.Keys)
        {
            if( removeItemOptions[ rOpt ] > bestRemoveItemScore ) {
                bestRemoveItemOption = rOpt;
                bestRemoveItemScore = removeItemOptions[ rOpt ];
            }
        }

        //Dictionary<MediaVehicle, double> addVehicles = new Dictionary<MediaVehicle, double>();
        //Dictionary<MediaVehicle, double> removeVehicles = new Dictionary<MediaVehicle, double>();
        minAddTypeScore = double.MaxValue;
        maxAddTypeScore = double.MinValue;
        double minGeoAddTypeScore = 0;
        double maxGeoAddTypeScore = 0;
        minRemoveTypeScore = double.MaxValue;
        maxRemoveTypeScore = double.MinValue;
        double minGeoRemoveTypeScore = 0;
        double maxGeoRemoveTypeScore = 0;

        foreach( string geoRgn in tempPlan.Specs.GeoRegionNames ) {
            Dictionary<MediaVehicle, double> rgnAddVehicles = allocationService.GetRatedVehicles( typeToAdd.ToString(), geoRgn, bestAddItemOption.ID,
                tempPlan, false, out minGeoAddTypeScore, out maxGeoAddTypeScore );
            minAddTypeScore = Math.Min( minGeoAddTypeScore, minAddTypeScore );
            maxAddTypeScore = Math.Max( maxGeoAddTypeScore, maxAddTypeScore );
            //foreach( MediaVehicle addV in rgnAddVehicles.Keys ) {
            //    addVehicles.Add( addV, rgnAddVehicles[ addV ] );
            //}

            Dictionary<MediaVehicle, double> rgnRemoveVehicles = allocationService.GetRatedVehicles( typeToRemove.ToString(), geoRgn, bestRemoveItemOption.ID,
                tempPlan, false, out minGeoRemoveTypeScore, out maxGeoRemoveTypeScore );
            minRemoveTypeScore = Math.Min( minGeoRemoveTypeScore, minRemoveTypeScore );
            maxRemoveTypeScore = Math.Max( maxGeoRemoveTypeScore, maxRemoveTypeScore );
            //foreach( MediaVehicle rmvV in rgnRemoveVehicles.Keys ) {
            //    removeVehicles.Add( rmvV, rgnRemoveVehicles[ rmvV ] );
            //}
        }
        // now we have the dictionaries of best media items to add or remove
        //List<MediaItem> ratedAddItems = basePlan.GetRatedItems( typeToAdd );

        // sort the items to add
        //MediaVehicle[] sortedAddVehicles = new MediaVehicle[ addVehicles.Count ];
        //double[] sortedAddVehicleRating = new double[ addVehicles.Count ];
        //int i2 = 0;
        //foreach( MediaVehicle v in addVehicles.Keys ){
        //    sortedAddVehicles[ i2 ] = v;
        //    sortedAddVehicleRating[ i2 ] = addVehicles[ v ];
        //    i2 += 1;
        //}
        //Array.Sort( sortedAddVehicleRating, sortedAddVehicles );
        //Array.Reverse( sortedAddVehicles );

   //     this.suggestedAddItems = new List<MediaItem>();

        //suggestedAddItems.Add( basePlan.MediaItems[ 0 ].sub_items[ 0 ] );            //!!!!TEST!!!!
        //suggestedAddItems.Add( basePlan.MediaItems[ 0 ].sub_items[ 1 ] );            //!!!!TEST!!!!
        //double addTot = 0;
        //int addIndx = 0;
        //while( addTot < addBudget && addIndx < sortedAddVehicles.Length - 1  ) {
        //    foreach( MediaItem ex in existingItems ) {
        //        // don't suggest vehicles in the plan already
        //        if( sortedAddVehicles[ addIndx ].Guid == ex.vehicle_id ) {
        //            continue;
        //        }
        //    }
        //    AdOption bestAdOpion;
        //    int numAds;
        //    if( GetBestOption( sortedAddVehicles[ addIndx ], addBudget - addTot, out bestAdOpion, out numAds ) == false ){
        //        continue;
        //    }
        //    MediaItem itemToAdd  = new MediaItem( sortedAddVehicles[ addIndx ], bestAdOpion, basePlan );
        //    suggestedAddItems.Add( sortedAddVehicles[ addIndx ] );
        //    addTot += sortedAddVehicles[ addIndx ].TotalPrice;
        //    addIndx += 1;
        //}

        //suggestedRemoveItems.Add( basePlan.MediaItems[ 0 ].sub_items[ 0 ] );       //!!!!TEST!!!!
        //suggestedRemoveItems.Add( basePlan.MediaItems[ 0 ].sub_items[ 1 ] );       //!!!!TEST!!!!

    
        int nItems = 0;
        double suggPlanPrice = basePlan.SumOfItemBudgets;

        if( suggestedAddItems != null ) {
            nItems = suggestedAddItems.Count;
        }
        if( suggestedRemoveItems != null ) {
            nItems = (int)Math.Max( nItems,  suggestedRemoveItems.Count );
        }

        string s = "<table cellpadding='2' cellspacing='0' >";
        s += GetAddRemoveSuggestionsSummary( typeToAdd, typeToRemove, addBudget );

        if( suggestedAddItems != null ) {
            double addCost = 0;
            s += GetTableOftems( suggestedAddItems, "Add", nItems, minAddTypeScore, maxAddTypeScore, out addCost );
            suggPlanPrice += addCost;
        }
        if( suggestedRemoveItems != null ) {
            double rmvCost = 0;
            s += GetTableOftems( suggestedRemoveItems, "Remove", nItems, minRemoveTypeScore, maxRemoveTypeScore,  out rmvCost );
            suggPlanPrice -= rmvCost;
        }

        s += GetSuggestedTotalRow( suggPlanPrice );

        s += "</table>";
        return s;
    }

    private string GetAddRemoveSuggestionsSummary( MediaVehicle.MediaType typeToAdd, MediaVehicle.MediaType typeToRemove, double amt ) {
        int iamt = (int)Math.Ceiling( amt / 1000.0 );

        string s = String.Format( "<tr><td colspan=4>Summary: Increase the spending on {0} by about ${1},000, and decrease {2} by a similar amount.<br><br></td></tr>",
            typeToAdd, iamt, typeToRemove );
        return s;
    }

    /// <summary>
    /// Returns HTML for a table of media items to add or to remove.
    /// </summary>
    /// <param name="items"></param>
    /// <param name="cmd"></param>
    /// <param name="nItems"></param>
    /// <param name="totCost"></param>
    /// <returns></returns>
    private string GetTableOftems( List<MediaItem> items, string cmd, int nItems, double inputRangeMin, double inputRangeMax, out double totCost ) {
        totCost = 0;
        string s = String.Format( "<tr><td colspan='5'><b>Best Media Items to {0}:</b></td>", cmd );
        for( int i = 0; i < items.Count; i++ ) {
            double rating = AllocationService.DisplayRating( items[ i ].VehicleRating, inputRangeMin, inputRangeMax );
            if( rating < 1 ) {
                rating = 1;      // min rating will be 1
            }
            s = AddCheckableItemRow( s, items[ i ], i, rating, cmd, nItems );
            totCost += items[ i ].TotalPrice;
        }
        return s; 
    }

    /// <summary>
    /// Adds a suggested media item to the display, including a checkbox to include it in the list of items to be added (or removed)
    /// </summary>
    /// <param name="s"></param>
    /// <param name="item"></param>
    /// <param name="indx"></param>
    /// <param name="cmd"></param>
    /// <param name="nItems"></param>
    /// <returns></returns>
    private string AddCheckableItemRow( string s, MediaItem item, int indx, double rating,  string cmd, int nItems ) {
        s += "<tr>";

        string cbName = String.Format( "{0}{1}", cmd, indx );
        string pvalName = String.Format( "Price{0}{1}", cmd, indx );
        double totPrice = item.TotalPrice;

        s += String.Format( "<td><input type='checkbox' name='{0}' id='{0}' onclick='UpdateSuggestedPlanTotal({1},{2:f0});' checked />" +
            "<input type='hidden' id='{3}' name='{3}' value='{4:f0}' /></td>", cbName, nItems, basePlan.SumOfItemBudgets, pvalName, totPrice );

        s += String.Format( "<td>{0}</td>", item.VehicleName );
        s += String.Format( "<td style='padding-left: 20px;' >Rating: {0:f0}</td>", rating );       
        s += String.Format( "<td style='padding-left: 20px;' >{0}</td>", item.GetTimingSummary() );
        if( item.TotalPrice < 1000 ) {
            s += String.Format( "<td style='padding-left: 20px;' >${0:f0}</td>", totPrice );
        }
        else {
            s += String.Format( "<td style='padding-left: 20px;' >${0:0,0}</td>", totPrice );
        }
        
        s += "</tr>";
        return s;
    }

    /// <summary>
    /// Adds the row that shows the total cost of the suggested plan as currently configured.
    /// </summary>
    /// <param name="initialTot"></param>
    /// <returns></returns>
    private string GetSuggestedTotalRow( double initialTot ) {
        string s = "";
        if( initialTot < 1000 ) {
            s = String.Format( "<tr style='text-align:right'><td colspan='5' style='text-align:right' ><span id='SuggPlanTotal' >Total with Changes: <b>$ {0:f0}</b></span></td></tr>", initialTot );
        }
        else {
            s = String.Format( "<tr style='text-align:right'><td colspan='5' style='text-align:right' ><span id='SuggPlanTotal' >Total with Changes: <b>$ {0:0,0}</b></span></td></tr>", initialTot );
        }
        return s;
    }

    /// <summary>
    /// Returns a set of goals adjusted to further improve this.goalToImprove 
    /// </summary>
    /// <param name="improved"></param>
    /// <returns></returns>
    private List<MediaPlan.PlanGoal> GetAdjustedGoals( out bool improved ) {
        List<MediaPlan.PlanGoal> adjGoals = new List<MediaPlan.PlanGoal>();
        improved = true;

       double curKeyWeight = -1;
        for( int i = 0; i < this.basePlan.Goals.Count; i++ ) {
            MediaCampaignSpecs.CampaignGoal goal = this.basePlan.Goals[ i ].Goal;
            double weight = this.basePlan.Goals[ i ].Weight;
            adjGoals.Add( new MediaPlan.PlanGoal( goal, weight ) );

            if( goal == this.goalToImprove ) {
                curKeyWeight = this.basePlan.Goals[ i ].Weight;    // the "key" weight is the one for the goal we wish to increase
            }
        }

        // see if we have the 1-goal case that we cannot improve
        if( this.basePlan.Goals.Count < 2 || curKeyWeight == 100 ) {
            improved = false;
            return adjGoals;
        }

        // determine how much the key weight will be increased
        double newval = Math.Min( curKeyWeight * keyWeightIncreaseRatio, 100 );
        double keydelta = newval - curKeyWeight;
        double totother = 100 - curKeyWeight;

        for( int i = 0; i < adjGoals.Count; i++ ) {
             if( adjGoals[ i ].Goal == this.goalToImprove ) {
                 // increase the key weight
                adjGoals[ i ].Weight += keydelta;
             }
             else {
                 // decrease the other weights accordingly
                 double ratio = adjGoals[ i ].Weight / totother;
                 adjGoals[ i ].Weight -= keydelta * ratio;
            }
        }

        return adjGoals;
    }
}
