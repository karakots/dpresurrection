using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;


using WebLibrary;
using BusinessLogic;

public partial class HQ : System.Web.UI.Page
{
    // session-level variables
    protected MediaPlan currentMediaPlan;
    protected List<MediaPlan> currentMediaPlans;
    //protected List<MediaPlan> plansBeingEdited;
    protected Dictionary<string, List<PlanStorage.PlanVersionInfo>> allPlanVersions;
    protected bool engineeringMode;
    protected UserMedia userMedia;

    protected string expandedItemTypesString = "";
    protected List<string> expandedItemTypes;

    protected void Page_Load( object sender, EventArgs e ) {

        RedirectUnknownUsers();

        InitializeVariables();

        //ShowNewPlanChoice();

        // respond to a request to change/set current plan
        if( Request[ "p" ] != null ) {
            this.currentMediaPlan = Utils.PlanForID( Request[ "p" ], this.currentMediaPlans );
            Utils.SetCurrentMediaPlan( this, this.currentMediaPlan );

            // make a single entry in the plansBeingEdited list - this is the list used by PreSimRun to decide what sims to start
            //this.plansBeingEdited = new List<MediaPlan>();
            //this.plansBeingEdited.Add( this.currentMediaPlan );
            //Utils.SetPlansBeingEdited( this, this.plansBeingEdited );
        }

        if (currentMediaPlan.Specs.SegmentList.Count < currentMediaPlan.Specs.Demographics.Count)
        {
            SimUtils.GetDemographics(this.currentMediaPlan);
        }

        SetNameChangeLink();

        HandleModifyRequest();

        SetExpandedItems();

        HandleAddRequest();

        FillAddMenu();

        DisplayPlanInfo();

        PlanSummaryMaker mediaSummary = new PlanSummaryMaker( this.currentMediaPlan, this.userMedia );
        mediaSummary.AddSummaryTableHTML( this.XPlanSummaryCell, this.expandedItemTypes, Request.UserAgent, Utils.Footer, AddButton, AddTypeList );

        if( this.IsPostBack == false ) {
            DataLogger.LogPageVisit( "HQ", Utils.GetUser( this ), this.currentMediaPlan.PlanDescription );
        }

        VisitorInfo.Visible = false;
        if( this.User.IsInRole( "visitor" ) )
        {
            CreatePlanButton.Enabled = false;
            CreatePlanButton.ToolTip = "Sign in to AdPlanit to enable features";
            CreatePlanButton.BackColor = System.Drawing.Color.LightGray;

            AddTypeList.Enabled = false;
            AddTypeList.ToolTip = "Sign in to AdPlanit to enable features";
            AddButton.Enabled = false;
            AddButton.ToolTip  = "Sign in to AdPlanit to enable features";

            ChangePlanLink.Visible = false;

            VisitorInfo.Visible = true;
        }
    }

    protected void SetNameChangeLink() {
        string existingPlanNamesList = Utils.ConvertToJavascriptArg( Utils.AllPlanNamesFor( this.currentMediaPlan.CampaignName, this.allPlanVersions ) );
        string changeNameJS = String.Format( "return ChangePlanName( \"{0}\" );", this.currentMediaPlan.PlanDescription );
        ChangePlanLink.Attributes.Add( "onclick", changeNameJS );
        hideModalPopupViaClientButton.Attributes[ "onclick" ] = String.Format( "return ReceiveNewPlanName( '{0}' );", existingPlanNamesList );
        NewNameBox.Attributes[ "onkeydown" ] = "return CheckForEnter(event);";

        string autoGenJS = String.Format( "return GetPlanName( \"{0}\" );", "Autogenerated" );
        CreatePlanButton.OnClientClick = autoGenJS;
    }

    private void HandleAddRequest() {
        if( IsPostBack && Request[ "__EVENTTARGET" ] == "AddButton" ) {
            string mediaTypeToAdd = Request[ "AddTypeList" ];
            this.currentMediaPlan.AddMediaType( mediaTypeToAdd );
            Utils.SetCurrentMediaPlan( this, this.currentMediaPlan );
            PlanStorage storage = new PlanStorage();
            storage.SaveMediaPlan( Utils.GetUser( this ), this.currentMediaPlan );

            // refill the UI
            PlanSummaryMaker mediaSummary = new PlanSummaryMaker( this.currentMediaPlan, this.userMedia );
            mediaSummary.AddSummaryTableHTML( this.XPlanSummaryCell, this.expandedItemTypes, Request.UserAgent, Utils.Footer, AddButton, AddTypeList );
        }
    }

    protected void AddButton_Click( object sender, EventArgs e ) {
  //      string mediaTypeToAdd = addTypeList.SelectedValue;
  //      this.currentMediaPlan.AddMediaType( mediaTypeToAdd );
        Utils.SetCurrentMediaPlan( this, this.currentMediaPlan );
        PlanStorage storage = new PlanStorage();
        storage.SaveMediaPlan( Utils.GetUser( this ), this.currentMediaPlan );

        // refill the UI
        PlanSummaryMaker mediaSummary = new PlanSummaryMaker( this.currentMediaPlan, this.userMedia );
        mediaSummary.AddSummaryTableHTML( this.XPlanSummaryCell, this.expandedItemTypes, Request.UserAgent, Utils.Footer, AddButton, AddTypeList );
    }

    ////protected void EnterPlan_Click( object sender, EventArgs e ) {
    ////    // no need to do anything - the page view will change to show the current plan after the postback

    ////    EnsureCurrentPlanIsInCurrentPlansList();
    ////}

    private void EnsureCurrentPlanIsInCurrentPlansList() {
        bool isCurrent = false;
        foreach( MediaPlan cp in this.currentMediaPlans ) {
            if( cp.PlanID == this.currentMediaPlan.PlanID ) {
                isCurrent = true;
                break;
            }
        }
        if( isCurrent == false ) {
            this.currentMediaPlans.Add( this.currentMediaPlan );
            Utils.SetCurrentMediaPlans( this, this.currentMediaPlans );
        }
    }

    protected void AutoGenPlan_Click( object sender, EventArgs e ) {

        PlanStorage storage = new PlanStorage();
        storage.SaveMediaPlan( Utils.GetUser( this ), this.currentMediaPlan );

        // auto-generate the new plan
        DateTime t0 = DateTime.Now;
        AllocationService allocationService = new AllocationService();
       
        this.currentMediaPlan = allocationService.CreateNewMediaPlan( this.currentMediaPlan.PlanSpecs );
        DateTime t1 = DateTime.Now;
        int dt = (int)Math.Round( (t1 - t0).TotalMilliseconds );

        storage.IncrementPlanVersion( this.currentMediaPlan, this.allPlanVersions, this.userMedia.CurrentPlanVersions );

        // set the name
        string newPlanName = "Autogenerated v" + this.currentMediaPlan.PlanVersion;
        if( Request[ "newPlanName" ] != null && Request[ "newPlanName" ].Trim() != "" ) {
            newPlanName = Request[ "newPlanName" ].Trim();
        }
        this.currentMediaPlan.PlanDescription = newPlanName;

        Utils.SetCurrentMediaPlan( this, this.currentMediaPlan );

        EnsureCurrentPlanIsInCurrentPlansList();

        storage.SaveMediaPlan( Utils.GetUser( this ), this.currentMediaPlan );
        string timingSpecs = String.Format( "t={0:f3}", dt / 1000.0 );
        DataLogger.Log( "GEN-HQ", Utils.GetUser( this ), this.currentMediaPlan.PlanDescription, timingSpecs );

        // update the UI
        DisplayPlanInfo();

        PlanSummaryMaker mediaSummary = new PlanSummaryMaker( this.currentMediaPlan, this.userMedia );
        mediaSummary.AddSummaryTableHTML( this.XPlanSummaryCell, this.expandedItemTypes, Request.UserAgent, Utils.Footer, AddButton, AddTypeList );
    }

    //private void ShowNewPlanChoice() {
    //    if( IsPostBack == false && Request.UrlReferrer != null && Request.UrlReferrer.ToString().EndsWith( "Campaign.aspx" ) ) {
    //        this.NewPlanDiv.Visible = true;
    //        this.ContentDiv.Visible = false;
    //    }
    //    else {
    //        this.NewPlanDiv.Visible = false;
    //        this.ContentDiv.Visible = true;
    //    }
    //}

    private void DisplayPlanInfo() {

        CampaignName.Text = Utils.ElideString( this.currentMediaPlan.CampaignName, Utils.MaxLengthPlanName ) + 
            " - " + this.currentMediaPlan.Specs.StartDate.ToString( "MM/dd/yy" );
        CampaignName.ToolTip = this.currentMediaPlan.CampaignName;

        string planDesc = this.currentMediaPlan.PlanDescription;
        if( planDesc == null || planDesc == "" ) {
            planDesc = String.Format( "---   [version {0}]", this.currentMediaPlan.PlanVersion );
        }
        PlanName.Text = Utils.ElideString( planDesc, Utils.MaxLengthPlanName ) + " - " + this.currentMediaPlan.StartDate.ToString( "MM/dd/yy" );
        PlanName.ToolTip = planDesc;

        SmallSummary smallSummaryMaker = new SmallSummary();
        smallSummaryMaker.AddSummaryHTML( this.RHInfoDiv, this.currentMediaPlan, this.engineeringMode );

        // display the stars rating
        StarsDiv.InnerHtml = "";
        if( this.currentMediaPlan.PlanOverallRatingStars >= 0 ) {
            int nStars = (int)Math.Max( 0, Math.Min( this.currentMediaPlan.PlanOverallRatingStars, 5 ) );

            string starTag = "<img src=\"images/Star19.gif\" style=\"margin-right:1px\" />";
            string blankSstarTag = "<img src=\"images/Star19Blank.gif\" style=\"margin-right:1px\" />";
            for( int s = 0; s < nStars; s++ ) {
                StarsDiv.InnerHtml += starTag;
            }
            for( int s2 = nStars; s2 < 5; s2++ ) {
                StarsDiv.InnerHtml += blankSstarTag;
            }
        }
    }

    private void FillAddMenu() {
        //if( IsPostBack == false ) {
        //    addTypeList.Items.Clear();
        //    foreach( string mediaType in Utils.AllMediaTypes() ) {
        //        addTypeList.Items.Add( mediaType );
        //    }
        //}
    }

    /// <summary>
    /// Handle a click on a Modify button
    /// </summary>
    private void HandleModifyRequest() {
        // see if the user wants to modify a media type
        if( IsPostBack && Request[ "__EVENTTARGET" ] == "Modifytem" ) {

            string modType = Request[ "__EVENTARGUMENT" ];
            Response.Redirect( String.Format( "MediaDetails.aspx?t={0}", modType ) );
        }

        if( IsPostBack && Request[ "__EVENTTARGET" ] == "ChangePlanNameOnly" ) {
            if( Request[ "newPlanName" ] != null && Request[ "newPlanName" ].Trim() != "" ) {
                if( this.currentMediaPlan.PlanDescription != Request[ "newPlanName" ].Trim() ) {
                    // the name was changed - update it
                    this.currentMediaPlan.PlanDescription = Request[ "newPlanName" ].Trim();
                    PlanStorage storage = new PlanStorage();
                    storage.SaveMediaPlan( Utils.GetUser( this ), this.currentMediaPlan );
                    Utils.SetCurrentMediaPlan( this, this.currentMediaPlan );
                    SetNameChangeLink();
                }
            }
        }
    }

    /// <summary>
    /// Deals with the selection of displayed items that are in an expanded state.
    /// </summary>
    private void SetExpandedItems() {
        // preserve the existing expanded items on postback
        if( Request[ "ExpandedItemTypes" ] != null ) {
            this.expandedItemTypesString = Request[ "ExpandedItemTypes" ];
            this.ExpandedItemTypes.Value = this.expandedItemTypesString;
        }

        this.expandedItemTypes = new List<string>();
        if( this.expandedItemTypesString.Length > 0 ) {
            string[] items = this.expandedItemTypesString.Split( ' ' );
            foreach( string typStr in items ) {
                expandedItemTypes.Add( typStr );
            }
        }

        // see if the user wants to expand an item
        if( IsPostBack && Request[ "__EVENTTARGET" ] == "ExpandItem" ) {
            string expType = Request[ "__EVENTARGUMENT" ];
            if( expandedItemTypes.Contains( expType ) == false ) {
                expandedItemTypes.Add( expType );
            }
        }

        // see if the user wants to collapse an item
        if( IsPostBack && Request[ "__EVENTTARGET" ] == "CollapseItem" ) {
            string collapseType = Request[ "__EVENTARGUMENT" ];
            if( expandedItemTypes.Contains( collapseType ) == true ) {
                expandedItemTypes.Remove( collapseType );
            }
        }

        // regenerate the single string representation (for the hidden form field)
        this.expandedItemTypesString = "";
        for( int i = 0; i < expandedItemTypes.Count; i++ ) {
            expandedItemTypesString += expandedItemTypes[ i ];
            if( i < expandedItemTypes.Count - 1 ) {
                expandedItemTypesString += " ";        // separate the items
            }
        }
        this.ExpandedItemTypes.Value = this.expandedItemTypesString;
    }

    /// <summary>
    /// Loads the values from the session and the user profile.
    /// </summary>
    private void InitializeVariables() {
        this.currentMediaPlan = Utils.CurrentMediaPlan( this, false );
        this.currentMediaPlans = Utils.CurrentMediaPlans( this );
        this.allPlanVersions = Utils.AllPlanVersions( this );
        this.engineeringMode = Utils.InEngineeringMode( this, null );

        bool loadUserMedia = false;
        this.userMedia = Utils.CurrentUserProfile( this, out loadUserMedia );
        if( loadUserMedia == true ) {
            this.userMedia = Profile.UserMediaItems;
            Utils.SetCurrentUserProfile( this, this.userMedia );
        }

        
        //string helpEmail = String.Format( "<a href=\"mailto:support@adplanit.com?subject=AdPlanit Support Request - {0}\">Question? Send us a message!</a>", "Campaign HQ" );
        //HelpEmailLink.Text = helpEmail;
    }

    /// <summary>
    /// Redirects a user who ins't logged-in back to the login page
    /// </summary>
    private void RedirectUnknownUsers() {
        if( this.User == null || this.User.Identity == null || this.User.Identity.Name == null || this.User.Identity.Name == "" ) {
            Response.Redirect( "Login.aspx" );
        }
    }
}
