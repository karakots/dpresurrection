//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MrktSimDb {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ModelInfo")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ModelInfo : System.Data.DataSet {
        
        private model_parameterDataTable tablemodel_parameter;
        
        private productDataTable tableproduct;
        
        private simulationDataTable tablesimulation;
        
        private sim_queueDataTable tablesim_queue;
        
        private sim_statusDataTable tablesim_status;
        
        private projectDataTable tableproject;
        
        private Model_infoDataTable tableModel_info;
        
        private sim_variable_valueDataTable tablesim_variable_value;
        
        private scenario_variableDataTable tablescenario_variable;
        
        private scenario_parameterDataTable tablescenario_parameter;
        
        private scenario_simseedDataTable tablescenario_simseed;
        
        private variable_typeDataTable tablevariable_type;
        
        private scenario_metricDataTable tablescenario_metric;
        
        private scenarioDataTable tablescenario;
        
        private System.Data.DataRelation relationsim_statussim_queue;
        
        private System.Data.DataRelation relationscenariosim_queue;
        
        private System.Data.DataRelation relationModel_infosim_queue;
        
        private System.Data.DataRelation relationproject_Model_info;
        
        private System.Data.DataRelation relationprojectModel_info;
        
        private System.Data.DataRelation relationsim_queuesim_variable_value;
        
        private System.Data.DataRelation relationscenario_variablesim_variable_value;
        
        private System.Data.DataRelation relationscenarioscenario_variable;
        
        private System.Data.DataRelation relationscenarioscenario_parameter;
        
        private System.Data.DataRelation relationscenarioscenario_simseed;
        
        private System.Data.DataRelation relationscenarioscenario_metric;
        
        private System.Data.DataRelation relationscenario_simulation;
        
        private System.Data.DataRelation relationFK_Model_info_scenario;
        
        private System.Data.DataRelation relationModel_info_model_parameter;
        
        private System.Data.DataRelation relationModel_info_product;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ModelInfo() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ModelInfo(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["model_parameter"] != null)) {
                    base.Tables.Add(new model_parameterDataTable(ds.Tables["model_parameter"]));
                }
                if ((ds.Tables["product"] != null)) {
                    base.Tables.Add(new productDataTable(ds.Tables["product"]));
                }
                if ((ds.Tables["simulation"] != null)) {
                    base.Tables.Add(new simulationDataTable(ds.Tables["simulation"]));
                }
                if ((ds.Tables["sim_queue"] != null)) {
                    base.Tables.Add(new sim_queueDataTable(ds.Tables["sim_queue"]));
                }
                if ((ds.Tables["sim_status"] != null)) {
                    base.Tables.Add(new sim_statusDataTable(ds.Tables["sim_status"]));
                }
                if ((ds.Tables["project"] != null)) {
                    base.Tables.Add(new projectDataTable(ds.Tables["project"]));
                }
                if ((ds.Tables["Model_info"] != null)) {
                    base.Tables.Add(new Model_infoDataTable(ds.Tables["Model_info"]));
                }
                if ((ds.Tables["sim_variable_value"] != null)) {
                    base.Tables.Add(new sim_variable_valueDataTable(ds.Tables["sim_variable_value"]));
                }
                if ((ds.Tables["scenario_variable"] != null)) {
                    base.Tables.Add(new scenario_variableDataTable(ds.Tables["scenario_variable"]));
                }
                if ((ds.Tables["scenario_parameter"] != null)) {
                    base.Tables.Add(new scenario_parameterDataTable(ds.Tables["scenario_parameter"]));
                }
                if ((ds.Tables["scenario_simseed"] != null)) {
                    base.Tables.Add(new scenario_simseedDataTable(ds.Tables["scenario_simseed"]));
                }
                if ((ds.Tables["variable_type"] != null)) {
                    base.Tables.Add(new variable_typeDataTable(ds.Tables["variable_type"]));
                }
                if ((ds.Tables["scenario_metric"] != null)) {
                    base.Tables.Add(new scenario_metricDataTable(ds.Tables["scenario_metric"]));
                }
                if ((ds.Tables["scenario"] != null)) {
                    base.Tables.Add(new scenarioDataTable(ds.Tables["scenario"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public model_parameterDataTable model_parameter {
            get {
                return this.tablemodel_parameter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public productDataTable product {
            get {
                return this.tableproduct;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public simulationDataTable simulation {
            get {
                return this.tablesimulation;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sim_queueDataTable sim_queue {
            get {
                return this.tablesim_queue;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sim_statusDataTable sim_status {
            get {
                return this.tablesim_status;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public projectDataTable project {
            get {
                return this.tableproject;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Model_infoDataTable Model_info {
            get {
                return this.tableModel_info;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sim_variable_valueDataTable sim_variable_value {
            get {
                return this.tablesim_variable_value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scenario_variableDataTable scenario_variable {
            get {
                return this.tablescenario_variable;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scenario_parameterDataTable scenario_parameter {
            get {
                return this.tablescenario_parameter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scenario_simseedDataTable scenario_simseed {
            get {
                return this.tablescenario_simseed;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public variable_typeDataTable variable_type {
            get {
                return this.tablevariable_type;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scenario_metricDataTable scenario_metric {
            get {
                return this.tablescenario_metric;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scenarioDataTable scenario {
            get {
                return this.tablescenario;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            ModelInfo cln = ((ModelInfo)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["model_parameter"] != null)) {
                    base.Tables.Add(new model_parameterDataTable(ds.Tables["model_parameter"]));
                }
                if ((ds.Tables["product"] != null)) {
                    base.Tables.Add(new productDataTable(ds.Tables["product"]));
                }
                if ((ds.Tables["simulation"] != null)) {
                    base.Tables.Add(new simulationDataTable(ds.Tables["simulation"]));
                }
                if ((ds.Tables["sim_queue"] != null)) {
                    base.Tables.Add(new sim_queueDataTable(ds.Tables["sim_queue"]));
                }
                if ((ds.Tables["sim_status"] != null)) {
                    base.Tables.Add(new sim_statusDataTable(ds.Tables["sim_status"]));
                }
                if ((ds.Tables["project"] != null)) {
                    base.Tables.Add(new projectDataTable(ds.Tables["project"]));
                }
                if ((ds.Tables["Model_info"] != null)) {
                    base.Tables.Add(new Model_infoDataTable(ds.Tables["Model_info"]));
                }
                if ((ds.Tables["sim_variable_value"] != null)) {
                    base.Tables.Add(new sim_variable_valueDataTable(ds.Tables["sim_variable_value"]));
                }
                if ((ds.Tables["scenario_variable"] != null)) {
                    base.Tables.Add(new scenario_variableDataTable(ds.Tables["scenario_variable"]));
                }
                if ((ds.Tables["scenario_parameter"] != null)) {
                    base.Tables.Add(new scenario_parameterDataTable(ds.Tables["scenario_parameter"]));
                }
                if ((ds.Tables["scenario_simseed"] != null)) {
                    base.Tables.Add(new scenario_simseedDataTable(ds.Tables["scenario_simseed"]));
                }
                if ((ds.Tables["variable_type"] != null)) {
                    base.Tables.Add(new variable_typeDataTable(ds.Tables["variable_type"]));
                }
                if ((ds.Tables["scenario_metric"] != null)) {
                    base.Tables.Add(new scenario_metricDataTable(ds.Tables["scenario_metric"]));
                }
                if ((ds.Tables["scenario"] != null)) {
                    base.Tables.Add(new scenarioDataTable(ds.Tables["scenario"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablemodel_parameter = ((model_parameterDataTable)(base.Tables["model_parameter"]));
            if ((initTable == true)) {
                if ((this.tablemodel_parameter != null)) {
                    this.tablemodel_parameter.InitVars();
                }
            }
            this.tableproduct = ((productDataTable)(base.Tables["product"]));
            if ((initTable == true)) {
                if ((this.tableproduct != null)) {
                    this.tableproduct.InitVars();
                }
            }
            this.tablesimulation = ((simulationDataTable)(base.Tables["simulation"]));
            if ((initTable == true)) {
                if ((this.tablesimulation != null)) {
                    this.tablesimulation.InitVars();
                }
            }
            this.tablesim_queue = ((sim_queueDataTable)(base.Tables["sim_queue"]));
            if ((initTable == true)) {
                if ((this.tablesim_queue != null)) {
                    this.tablesim_queue.InitVars();
                }
            }
            this.tablesim_status = ((sim_statusDataTable)(base.Tables["sim_status"]));
            if ((initTable == true)) {
                if ((this.tablesim_status != null)) {
                    this.tablesim_status.InitVars();
                }
            }
            this.tableproject = ((projectDataTable)(base.Tables["project"]));
            if ((initTable == true)) {
                if ((this.tableproject != null)) {
                    this.tableproject.InitVars();
                }
            }
            this.tableModel_info = ((Model_infoDataTable)(base.Tables["Model_info"]));
            if ((initTable == true)) {
                if ((this.tableModel_info != null)) {
                    this.tableModel_info.InitVars();
                }
            }
            this.tablesim_variable_value = ((sim_variable_valueDataTable)(base.Tables["sim_variable_value"]));
            if ((initTable == true)) {
                if ((this.tablesim_variable_value != null)) {
                    this.tablesim_variable_value.InitVars();
                }
            }
            this.tablescenario_variable = ((scenario_variableDataTable)(base.Tables["scenario_variable"]));
            if ((initTable == true)) {
                if ((this.tablescenario_variable != null)) {
                    this.tablescenario_variable.InitVars();
                }
            }
            this.tablescenario_parameter = ((scenario_parameterDataTable)(base.Tables["scenario_parameter"]));
            if ((initTable == true)) {
                if ((this.tablescenario_parameter != null)) {
                    this.tablescenario_parameter.InitVars();
                }
            }
            this.tablescenario_simseed = ((scenario_simseedDataTable)(base.Tables["scenario_simseed"]));
            if ((initTable == true)) {
                if ((this.tablescenario_simseed != null)) {
                    this.tablescenario_simseed.InitVars();
                }
            }
            this.tablevariable_type = ((variable_typeDataTable)(base.Tables["variable_type"]));
            if ((initTable == true)) {
                if ((this.tablevariable_type != null)) {
                    this.tablevariable_type.InitVars();
                }
            }
            this.tablescenario_metric = ((scenario_metricDataTable)(base.Tables["scenario_metric"]));
            if ((initTable == true)) {
                if ((this.tablescenario_metric != null)) {
                    this.tablescenario_metric.InitVars();
                }
            }
            this.tablescenario = ((scenarioDataTable)(base.Tables["scenario"]));
            if ((initTable == true)) {
                if ((this.tablescenario != null)) {
                    this.tablescenario.InitVars();
                }
            }
            this.relationsim_statussim_queue = this.Relations["sim_statussim_queue"];
            this.relationscenariosim_queue = this.Relations["scenariosim_queue"];
            this.relationModel_infosim_queue = this.Relations["Model_infosim_queue"];
            this.relationproject_Model_info = this.Relations["project_Model_info"];
            this.relationprojectModel_info = this.Relations["projectModel_info"];
            this.relationsim_queuesim_variable_value = this.Relations["sim_queuesim_variable_value"];
            this.relationscenario_variablesim_variable_value = this.Relations["scenario_variablesim_variable_value"];
            this.relationscenarioscenario_variable = this.Relations["scenarioscenario_variable"];
            this.relationscenarioscenario_parameter = this.Relations["scenarioscenario_parameter"];
            this.relationscenarioscenario_simseed = this.Relations["scenarioscenario_simseed"];
            this.relationscenarioscenario_metric = this.Relations["scenarioscenario_metric"];
            this.relationscenario_simulation = this.Relations["scenario_simulation"];
            this.relationFK_Model_info_scenario = this.Relations["FK_Model_info_scenario"];
            this.relationModel_info_model_parameter = this.Relations["Model_info_model_parameter"];
            this.relationModel_info_product = this.Relations["Model_info_product"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ModelInfo";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ModelInfo.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablemodel_parameter = new model_parameterDataTable();
            base.Tables.Add(this.tablemodel_parameter);
            this.tableproduct = new productDataTable();
            base.Tables.Add(this.tableproduct);
            this.tablesimulation = new simulationDataTable();
            base.Tables.Add(this.tablesimulation);
            this.tablesim_queue = new sim_queueDataTable();
            base.Tables.Add(this.tablesim_queue);
            this.tablesim_status = new sim_statusDataTable();
            base.Tables.Add(this.tablesim_status);
            this.tableproject = new projectDataTable();
            base.Tables.Add(this.tableproject);
            this.tableModel_info = new Model_infoDataTable();
            base.Tables.Add(this.tableModel_info);
            this.tablesim_variable_value = new sim_variable_valueDataTable();
            base.Tables.Add(this.tablesim_variable_value);
            this.tablescenario_variable = new scenario_variableDataTable();
            base.Tables.Add(this.tablescenario_variable);
            this.tablescenario_parameter = new scenario_parameterDataTable();
            base.Tables.Add(this.tablescenario_parameter);
            this.tablescenario_simseed = new scenario_simseedDataTable();
            base.Tables.Add(this.tablescenario_simseed);
            this.tablevariable_type = new variable_typeDataTable();
            base.Tables.Add(this.tablevariable_type);
            this.tablescenario_metric = new scenario_metricDataTable();
            base.Tables.Add(this.tablescenario_metric);
            this.tablescenario = new scenarioDataTable();
            base.Tables.Add(this.tablescenario);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("sim_statussim_queue", new System.Data.DataColumn[] {
                        this.tablesim_status.status_idColumn}, new System.Data.DataColumn[] {
                        this.tablesim_queue.statusColumn});
            this.tablesim_queue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("scenariosim_queue", new System.Data.DataColumn[] {
                        this.tablesimulation.idColumn}, new System.Data.DataColumn[] {
                        this.tablesim_queue.sim_idColumn});
            this.tablesim_queue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("Model_infosim_queue", new System.Data.DataColumn[] {
                        this.tableModel_info.model_idColumn}, new System.Data.DataColumn[] {
                        this.tablesim_queue.model_idColumn});
            this.tablesim_queue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("project_Model_info", new System.Data.DataColumn[] {
                        this.tableproject.idColumn}, new System.Data.DataColumn[] {
                        this.tableModel_info.idColumn});
            this.tableModel_info.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("projectModel_info", new System.Data.DataColumn[] {
                        this.tableproject.idColumn}, new System.Data.DataColumn[] {
                        this.tableModel_info.project_idColumn});
            this.tableModel_info.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("sim_queuesim_variable_value", new System.Data.DataColumn[] {
                        this.tablesim_queue.run_idColumn}, new System.Data.DataColumn[] {
                        this.tablesim_variable_value.run_idColumn});
            this.tablesim_variable_value.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("scenario_variablesim_variable_value", new System.Data.DataColumn[] {
                        this.tablescenario_variable.sim_idColumn}, new System.Data.DataColumn[] {
                        this.tablesim_variable_value.var_idColumn});
            this.tablesim_variable_value.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("scenarioscenario_variable", new System.Data.DataColumn[] {
                        this.tablesimulation.idColumn}, new System.Data.DataColumn[] {
                        this.tablescenario_variable.scenario_idColumn});
            this.tablescenario_variable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("variable_typescenario_variable", new System.Data.DataColumn[] {
                        this.tablevariable_type.type_idColumn}, new System.Data.DataColumn[] {
                        this.tablescenario_variable.typeColumn});
            this.tablescenario_variable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("scenarioscenario_parameter", new System.Data.DataColumn[] {
                        this.tablesimulation.idColumn}, new System.Data.DataColumn[] {
                        this.tablescenario_parameter.sim_idColumn});
            this.tablescenario_parameter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("scenarioscenario_simseed", new System.Data.DataColumn[] {
                        this.tablesimulation.idColumn}, new System.Data.DataColumn[] {
                        this.tablescenario_simseed.sim_idColumn});
            this.tablescenario_simseed.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("scenarioscenario_metric", new System.Data.DataColumn[] {
                        this.tablesimulation.idColumn}, new System.Data.DataColumn[] {
                        this.tablescenario_metric.sim_idColumn});
            this.tablescenario_metric.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationsim_statussim_queue = new System.Data.DataRelation("sim_statussim_queue", new System.Data.DataColumn[] {
                        this.tablesim_status.status_idColumn}, new System.Data.DataColumn[] {
                        this.tablesim_queue.statusColumn}, false);
            this.Relations.Add(this.relationsim_statussim_queue);
            this.relationscenariosim_queue = new System.Data.DataRelation("scenariosim_queue", new System.Data.DataColumn[] {
                        this.tablesimulation.idColumn}, new System.Data.DataColumn[] {
                        this.tablesim_queue.sim_idColumn}, false);
            this.Relations.Add(this.relationscenariosim_queue);
            this.relationModel_infosim_queue = new System.Data.DataRelation("Model_infosim_queue", new System.Data.DataColumn[] {
                        this.tableModel_info.model_idColumn}, new System.Data.DataColumn[] {
                        this.tablesim_queue.model_idColumn}, false);
            this.Relations.Add(this.relationModel_infosim_queue);
            this.relationproject_Model_info = new System.Data.DataRelation("project_Model_info", new System.Data.DataColumn[] {
                        this.tableproject.idColumn}, new System.Data.DataColumn[] {
                        this.tableModel_info.idColumn}, false);
            this.relationproject_Model_info.Nested = true;
            this.Relations.Add(this.relationproject_Model_info);
            this.relationprojectModel_info = new System.Data.DataRelation("projectModel_info", new System.Data.DataColumn[] {
                        this.tableproject.idColumn}, new System.Data.DataColumn[] {
                        this.tableModel_info.project_idColumn}, false);
            this.Relations.Add(this.relationprojectModel_info);
            this.relationsim_queuesim_variable_value = new System.Data.DataRelation("sim_queuesim_variable_value", new System.Data.DataColumn[] {
                        this.tablesim_queue.run_idColumn}, new System.Data.DataColumn[] {
                        this.tablesim_variable_value.run_idColumn}, false);
            this.Relations.Add(this.relationsim_queuesim_variable_value);
            this.relationscenario_variablesim_variable_value = new System.Data.DataRelation("scenario_variablesim_variable_value", new System.Data.DataColumn[] {
                        this.tablescenario_variable.sim_idColumn}, new System.Data.DataColumn[] {
                        this.tablesim_variable_value.var_idColumn}, false);
            this.Relations.Add(this.relationscenario_variablesim_variable_value);
            this.relationscenarioscenario_variable = new System.Data.DataRelation("scenarioscenario_variable", new System.Data.DataColumn[] {
                        this.tablesimulation.idColumn}, new System.Data.DataColumn[] {
                        this.tablescenario_variable.scenario_idColumn}, false);
            this.Relations.Add(this.relationscenarioscenario_variable);
            this.relationscenarioscenario_parameter = new System.Data.DataRelation("scenarioscenario_parameter", new System.Data.DataColumn[] {
                        this.tablesimulation.idColumn}, new System.Data.DataColumn[] {
                        this.tablescenario_parameter.sim_idColumn}, false);
            this.Relations.Add(this.relationscenarioscenario_parameter);
            this.relationscenarioscenario_simseed = new System.Data.DataRelation("scenarioscenario_simseed", new System.Data.DataColumn[] {
                        this.tablesimulation.idColumn}, new System.Data.DataColumn[] {
                        this.tablescenario_simseed.sim_idColumn}, false);
            this.Relations.Add(this.relationscenarioscenario_simseed);
            this.relationscenarioscenario_metric = new System.Data.DataRelation("scenarioscenario_metric", new System.Data.DataColumn[] {
                        this.tablesimulation.idColumn}, new System.Data.DataColumn[] {
                        this.tablescenario_metric.sim_idColumn}, false);
            this.Relations.Add(this.relationscenarioscenario_metric);
            this.relationscenario_simulation = new System.Data.DataRelation("scenario_simulation", new System.Data.DataColumn[] {
                        this.tablescenario.scenario_idColumn}, new System.Data.DataColumn[] {
                        this.tablesimulation.scenario_idColumn}, false);
            this.Relations.Add(this.relationscenario_simulation);
            this.relationFK_Model_info_scenario = new System.Data.DataRelation("FK_Model_info_scenario", new System.Data.DataColumn[] {
                        this.tableModel_info.model_idColumn}, new System.Data.DataColumn[] {
                        this.tablescenario.model_idColumn}, false);
            this.Relations.Add(this.relationFK_Model_info_scenario);
            this.relationModel_info_model_parameter = new System.Data.DataRelation("Model_info_model_parameter", new System.Data.DataColumn[] {
                        this.tableModel_info.model_idColumn}, new System.Data.DataColumn[] {
                        this.tablemodel_parameter.model_idColumn}, false);
            this.Relations.Add(this.relationModel_info_model_parameter);
            this.relationModel_info_product = new System.Data.DataRelation("Model_info_product", new System.Data.DataColumn[] {
                        this.tableModel_info.model_idColumn}, new System.Data.DataColumn[] {
                        this.tableproduct.model_idColumn}, false);
            this.Relations.Add(this.relationModel_info_product);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializemodel_parameter() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeproduct() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesimulation() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesim_queue() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesim_status() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeproject() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModel_info() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesim_variable_value() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializescenario_variable() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializescenario_parameter() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializescenario_simseed() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializevariable_type() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializescenario_metric() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializescenario() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ModelInfo ds = new ModelInfo();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void model_parameterRowChangeEventHandler(object sender, model_parameterRowChangeEvent e);
        
        public delegate void productRowChangeEventHandler(object sender, productRowChangeEvent e);
        
        public delegate void simulationRowChangeEventHandler(object sender, simulationRowChangeEvent e);
        
        public delegate void sim_queueRowChangeEventHandler(object sender, sim_queueRowChangeEvent e);
        
        public delegate void sim_statusRowChangeEventHandler(object sender, sim_statusRowChangeEvent e);
        
        public delegate void projectRowChangeEventHandler(object sender, projectRowChangeEvent e);
        
        public delegate void Model_infoRowChangeEventHandler(object sender, Model_infoRowChangeEvent e);
        
        public delegate void sim_variable_valueRowChangeEventHandler(object sender, sim_variable_valueRowChangeEvent e);
        
        public delegate void scenario_variableRowChangeEventHandler(object sender, scenario_variableRowChangeEvent e);
        
        public delegate void scenario_parameterRowChangeEventHandler(object sender, scenario_parameterRowChangeEvent e);
        
        public delegate void scenario_simseedRowChangeEventHandler(object sender, scenario_simseedRowChangeEvent e);
        
        public delegate void variable_typeRowChangeEventHandler(object sender, variable_typeRowChangeEvent e);
        
        public delegate void scenario_metricRowChangeEventHandler(object sender, scenario_metricRowChangeEvent e);
        
        public delegate void scenarioRowChangeEventHandler(object sender, scenarioRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class model_parameterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnmodel_id;
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columntable_name;
            
            private System.Data.DataColumn columncol_name;
            
            private System.Data.DataColumn columnfilter;
            
            private System.Data.DataColumn columnidentity_row;
            
            private System.Data.DataColumn columnrow_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public model_parameterDataTable() {
                this.TableName = "model_parameter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal model_parameterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected model_parameterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn model_idColumn {
                get {
                    return this.columnmodel_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn table_nameColumn {
                get {
                    return this.columntable_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn col_nameColumn {
                get {
                    return this.columncol_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn filterColumn {
                get {
                    return this.columnfilter;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn identity_rowColumn {
                get {
                    return this.columnidentity_row;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn row_idColumn {
                get {
                    return this.columnrow_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public model_parameterRow this[int index] {
                get {
                    return ((model_parameterRow)(this.Rows[index]));
                }
            }
            
            public event model_parameterRowChangeEventHandler model_parameterRowChanging;
            
            public event model_parameterRowChangeEventHandler model_parameterRowChanged;
            
            public event model_parameterRowChangeEventHandler model_parameterRowDeleting;
            
            public event model_parameterRowChangeEventHandler model_parameterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addmodel_parameterRow(model_parameterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public model_parameterRow Addmodel_parameterRow(Model_infoRow parentModel_infoRowByModel_info_model_parameter, string name, string table_name, string col_name, string filter, string identity_row, int row_id) {
                model_parameterRow rowmodel_parameterRow = ((model_parameterRow)(this.NewRow()));
                rowmodel_parameterRow.ItemArray = new object[] {
                        parentModel_infoRowByModel_info_model_parameter[0],
                        null,
                        name,
                        table_name,
                        col_name,
                        filter,
                        identity_row,
                        row_id};
                this.Rows.Add(rowmodel_parameterRow);
                return rowmodel_parameterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public model_parameterRow FindByid(int id) {
                return ((model_parameterRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                model_parameterDataTable cln = ((model_parameterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new model_parameterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmodel_id = base.Columns["model_id"];
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columntable_name = base.Columns["table_name"];
                this.columncol_name = base.Columns["col_name"];
                this.columnfilter = base.Columns["filter"];
                this.columnidentity_row = base.Columns["identity_row"];
                this.columnrow_id = base.Columns["row_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmodel_id = new System.Data.DataColumn("model_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel_id);
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columntable_name = new System.Data.DataColumn("table_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntable_name);
                this.columncol_name = new System.Data.DataColumn("col_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncol_name);
                this.columnfilter = new System.Data.DataColumn("filter", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfilter);
                this.columnidentity_row = new System.Data.DataColumn("identity_row", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnidentity_row);
                this.columnrow_id = new System.Data.DataColumn("row_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrow_id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnmodel_id.AllowDBNull = false;
                this.columnid.AutoIncrement = true;
                this.columnid.AllowDBNull = false;
                this.columnid.ReadOnly = true;
                this.columnid.Unique = true;
                this.columnname.MaxLength = 50;
                this.columntable_name.MaxLength = 50;
                this.columncol_name.MaxLength = 50;
                this.columnfilter.MaxLength = 50;
                this.columnidentity_row.MaxLength = 25;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public model_parameterRow Newmodel_parameterRow() {
                return ((model_parameterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new model_parameterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(model_parameterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.model_parameterRowChanged != null)) {
                    this.model_parameterRowChanged(this, new model_parameterRowChangeEvent(((model_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.model_parameterRowChanging != null)) {
                    this.model_parameterRowChanging(this, new model_parameterRowChangeEvent(((model_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.model_parameterRowDeleted != null)) {
                    this.model_parameterRowDeleted(this, new model_parameterRowChangeEvent(((model_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.model_parameterRowDeleting != null)) {
                    this.model_parameterRowDeleting(this, new model_parameterRowChangeEvent(((model_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removemodel_parameterRow(model_parameterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "model_parameterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class productDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnmodel_id;
            
            private System.Data.DataColumn columnproduct_id;
            
            private System.Data.DataColumn columnproduct_name;
            
            private System.Data.DataColumn columnbrand_id;
            
            private System.Data.DataColumn columnproduct_base_name;
            
            private System.Data.DataColumn columntype;
            
            private System.Data.DataColumn columnproduct_group;
            
            private System.Data.DataColumn columnrelated_group;
            
            private System.Data.DataColumn columnpercent_relation;
            
            private System.Data.DataColumn columncost;
            
            private System.Data.DataColumn columninitial_dislike_probability;
            
            private System.Data.DataColumn columnrepeat_like_probability;
            
            private System.Data.DataColumn columncolor;
            
            private System.Data.DataColumn columnproduct_type;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productDataTable() {
                this.TableName = "product";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal productDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected productDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn model_idColumn {
                get {
                    return this.columnmodel_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn product_idColumn {
                get {
                    return this.columnproduct_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn product_nameColumn {
                get {
                    return this.columnproduct_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn brand_idColumn {
                get {
                    return this.columnbrand_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn product_base_nameColumn {
                get {
                    return this.columnproduct_base_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn product_groupColumn {
                get {
                    return this.columnproduct_group;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn related_groupColumn {
                get {
                    return this.columnrelated_group;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn percent_relationColumn {
                get {
                    return this.columnpercent_relation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn costColumn {
                get {
                    return this.columncost;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn initial_dislike_probabilityColumn {
                get {
                    return this.columninitial_dislike_probability;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn repeat_like_probabilityColumn {
                get {
                    return this.columnrepeat_like_probability;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn colorColumn {
                get {
                    return this.columncolor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn product_typeColumn {
                get {
                    return this.columnproduct_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow this[int index] {
                get {
                    return ((productRow)(this.Rows[index]));
                }
            }
            
            public event productRowChangeEventHandler productRowChanging;
            
            public event productRowChangeEventHandler productRowChanged;
            
            public event productRowChangeEventHandler productRowDeleting;
            
            public event productRowChangeEventHandler productRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddproductRow(productRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow AddproductRow(Model_infoRow parentModel_infoRowByModel_info_product, string product_name, int brand_id, string product_base_name, string type, string product_group, string related_group, string percent_relation, double cost, double initial_dislike_probability, double repeat_like_probability, string color, int product_type) {
                productRow rowproductRow = ((productRow)(this.NewRow()));
                rowproductRow.ItemArray = new object[] {
                        parentModel_infoRowByModel_info_product[0],
                        null,
                        product_name,
                        brand_id,
                        product_base_name,
                        type,
                        product_group,
                        related_group,
                        percent_relation,
                        cost,
                        initial_dislike_probability,
                        repeat_like_probability,
                        color,
                        product_type};
                this.Rows.Add(rowproductRow);
                return rowproductRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow FindByproduct_id(int product_id) {
                return ((productRow)(this.Rows.Find(new object[] {
                            product_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                productDataTable cln = ((productDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new productDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmodel_id = base.Columns["model_id"];
                this.columnproduct_id = base.Columns["product_id"];
                this.columnproduct_name = base.Columns["product_name"];
                this.columnbrand_id = base.Columns["brand_id"];
                this.columnproduct_base_name = base.Columns["product_base_name"];
                this.columntype = base.Columns["type"];
                this.columnproduct_group = base.Columns["product_group"];
                this.columnrelated_group = base.Columns["related_group"];
                this.columnpercent_relation = base.Columns["percent_relation"];
                this.columncost = base.Columns["cost"];
                this.columninitial_dislike_probability = base.Columns["initial_dislike_probability"];
                this.columnrepeat_like_probability = base.Columns["repeat_like_probability"];
                this.columncolor = base.Columns["color"];
                this.columnproduct_type = base.Columns["product_type"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmodel_id = new System.Data.DataColumn("model_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel_id);
                this.columnproduct_id = new System.Data.DataColumn("product_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnproduct_id);
                this.columnproduct_name = new System.Data.DataColumn("product_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnproduct_name);
                this.columnbrand_id = new System.Data.DataColumn("brand_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbrand_id);
                this.columnproduct_base_name = new System.Data.DataColumn("product_base_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnproduct_base_name);
                this.columntype = new System.Data.DataColumn("type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columnproduct_group = new System.Data.DataColumn("product_group", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnproduct_group);
                this.columnrelated_group = new System.Data.DataColumn("related_group", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrelated_group);
                this.columnpercent_relation = new System.Data.DataColumn("percent_relation", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpercent_relation);
                this.columncost = new System.Data.DataColumn("cost", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncost);
                this.columninitial_dislike_probability = new System.Data.DataColumn("initial_dislike_probability", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columninitial_dislike_probability);
                this.columnrepeat_like_probability = new System.Data.DataColumn("repeat_like_probability", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrepeat_like_probability);
                this.columncolor = new System.Data.DataColumn("color", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncolor);
                this.columnproduct_type = new System.Data.DataColumn("product_type", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnproduct_type);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnproduct_id}, true));
                this.columnmodel_id.AllowDBNull = false;
                this.columnproduct_id.AutoIncrement = true;
                this.columnproduct_id.AllowDBNull = false;
                this.columnproduct_id.ReadOnly = true;
                this.columnproduct_id.Unique = true;
                this.columnproduct_name.MaxLength = 100;
                this.columnbrand_id.AllowDBNull = false;
                this.columnproduct_base_name.MaxLength = 35;
                this.columntype.AllowDBNull = false;
                this.columntype.MaxLength = 25;
                this.columnproduct_group.AllowDBNull = false;
                this.columnproduct_group.MaxLength = 25;
                this.columnrelated_group.AllowDBNull = false;
                this.columnrelated_group.MaxLength = 25;
                this.columnpercent_relation.AllowDBNull = false;
                this.columnpercent_relation.MaxLength = 25;
                this.columncolor.MaxLength = 25;
                this.columnproduct_type.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow NewproductRow() {
                return ((productRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new productRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(productRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.productRowChanged != null)) {
                    this.productRowChanged(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.productRowChanging != null)) {
                    this.productRowChanging(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.productRowDeleted != null)) {
                    this.productRowDeleted(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.productRowDeleting != null)) {
                    this.productRowDeleting(this, new productRowChangeEvent(((productRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveproductRow(productRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "productDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class simulationDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columndescr;
            
            private System.Data.DataColumn columntype;
            
            private System.Data.DataColumn columnstart_date;
            
            private System.Data.DataColumn columnend_date;
            
            private System.Data.DataColumn columnqueued;
            
            private System.Data.DataColumn columnsim_num;
            
            private System.Data.DataColumn columnlocked;
            
            private System.Data.DataColumn columnmetric_start_date;
            
            private System.Data.DataColumn columnmetric_end_date;
            
            private System.Data.DataColumn columndelete_std_results;
            
            private System.Data.DataColumn columncontrol_string;
            
            private System.Data.DataColumn columnaccess_time;
            
            private System.Data.DataColumn columnuser_name;
            
            private System.Data.DataColumn columnsaved;
            
            private System.Data.DataColumn columnscale_factor;
            
            private System.Data.DataColumn columnscenario_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public simulationDataTable() {
                this.TableName = "simulation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal simulationDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected simulationDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descrColumn {
                get {
                    return this.columndescr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn start_dateColumn {
                get {
                    return this.columnstart_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn end_dateColumn {
                get {
                    return this.columnend_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn queuedColumn {
                get {
                    return this.columnqueued;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sim_numColumn {
                get {
                    return this.columnsim_num;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn lockedColumn {
                get {
                    return this.columnlocked;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn metric_start_dateColumn {
                get {
                    return this.columnmetric_start_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn metric_end_dateColumn {
                get {
                    return this.columnmetric_end_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn delete_std_resultsColumn {
                get {
                    return this.columndelete_std_results;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn control_stringColumn {
                get {
                    return this.columncontrol_string;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn access_timeColumn {
                get {
                    return this.columnaccess_time;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn user_nameColumn {
                get {
                    return this.columnuser_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn savedColumn {
                get {
                    return this.columnsaved;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn scale_factorColumn {
                get {
                    return this.columnscale_factor;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn scenario_idColumn {
                get {
                    return this.columnscenario_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public simulationRow this[int index] {
                get {
                    return ((simulationRow)(this.Rows[index]));
                }
            }
            
            public event simulationRowChangeEventHandler simulationRowChanging;
            
            public event simulationRowChangeEventHandler simulationRowChanged;
            
            public event simulationRowChangeEventHandler simulationRowDeleting;
            
            public event simulationRowChangeEventHandler simulationRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsimulationRow(simulationRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public simulationRow AddsimulationRow(
                        string name, 
                        string descr, 
                        byte type, 
                        System.DateTime start_date, 
                        System.DateTime end_date, 
                        bool queued, 
                        int sim_num, 
                        bool locked, 
                        System.DateTime metric_start_date, 
                        System.DateTime metric_end_date, 
                        bool delete_std_results, 
                        string control_string, 
                        int access_time, 
                        string user_name, 
                        bool saved, 
                        double scale_factor, 
                        scenarioRow parentscenarioRowByscenario_simulation) {
                simulationRow rowsimulationRow = ((simulationRow)(this.NewRow()));
                rowsimulationRow.ItemArray = new object[] {
                        null,
                        name,
                        descr,
                        type,
                        start_date,
                        end_date,
                        queued,
                        sim_num,
                        locked,
                        metric_start_date,
                        metric_end_date,
                        delete_std_results,
                        control_string,
                        access_time,
                        user_name,
                        saved,
                        scale_factor,
                        parentscenarioRowByscenario_simulation[0]};
                this.Rows.Add(rowsimulationRow);
                return rowsimulationRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public simulationRow FindByid(int id) {
                return ((simulationRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                simulationDataTable cln = ((simulationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new simulationDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columndescr = base.Columns["descr"];
                this.columntype = base.Columns["type"];
                this.columnstart_date = base.Columns["start_date"];
                this.columnend_date = base.Columns["end_date"];
                this.columnqueued = base.Columns["queued"];
                this.columnsim_num = base.Columns["sim_num"];
                this.columnlocked = base.Columns["locked"];
                this.columnmetric_start_date = base.Columns["metric_start_date"];
                this.columnmetric_end_date = base.Columns["metric_end_date"];
                this.columndelete_std_results = base.Columns["delete_std_results"];
                this.columncontrol_string = base.Columns["control_string"];
                this.columnaccess_time = base.Columns["access_time"];
                this.columnuser_name = base.Columns["user_name"];
                this.columnsaved = base.Columns["saved"];
                this.columnscale_factor = base.Columns["scale_factor"];
                this.columnscenario_id = base.Columns["scenario_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columndescr = new System.Data.DataColumn("descr", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescr);
                this.columntype = new System.Data.DataColumn("type", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columnstart_date = new System.Data.DataColumn("start_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart_date);
                this.columnend_date = new System.Data.DataColumn("end_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnend_date);
                this.columnqueued = new System.Data.DataColumn("queued", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnqueued);
                this.columnsim_num = new System.Data.DataColumn("sim_num", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsim_num);
                this.columnlocked = new System.Data.DataColumn("locked", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocked);
                this.columnmetric_start_date = new System.Data.DataColumn("metric_start_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetric_start_date);
                this.columnmetric_end_date = new System.Data.DataColumn("metric_end_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetric_end_date);
                this.columndelete_std_results = new System.Data.DataColumn("delete_std_results", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndelete_std_results);
                this.columncontrol_string = new System.Data.DataColumn("control_string", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncontrol_string);
                this.columnaccess_time = new System.Data.DataColumn("access_time", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaccess_time);
                this.columnuser_name = new System.Data.DataColumn("user_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_name);
                this.columnsaved = new System.Data.DataColumn("saved", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsaved);
                this.columnscale_factor = new System.Data.DataColumn("scale_factor", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnscale_factor);
                this.columnscenario_id = new System.Data.DataColumn("scenario_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnscenario_id);
                this.Constraints.Add(new System.Data.UniqueConstraint("ModelInfoKey2", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AutoIncrement = true;
                this.columnid.AllowDBNull = false;
                this.columnid.ReadOnly = true;
                this.columnid.Unique = true;
                this.columnname.AllowDBNull = false;
                this.columndescr.AllowDBNull = false;
                this.columntype.AllowDBNull = false;
                this.columnscale_factor.AllowDBNull = false;
                this.columnscale_factor.DefaultValue = ((double)(0));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public simulationRow NewsimulationRow() {
                return ((simulationRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new simulationRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(simulationRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.simulationRowChanged != null)) {
                    this.simulationRowChanged(this, new simulationRowChangeEvent(((simulationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.simulationRowChanging != null)) {
                    this.simulationRowChanging(this, new simulationRowChangeEvent(((simulationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.simulationRowDeleted != null)) {
                    this.simulationRowDeleted(this, new simulationRowChangeEvent(((simulationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.simulationRowDeleting != null)) {
                    this.simulationRowDeleting(this, new simulationRowChangeEvent(((simulationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesimulationRow(simulationRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "simulationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sim_queueDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrun_id;
            
            private System.Data.DataColumn columnsim_id;
            
            private System.Data.DataColumn columnstatus;
            
            private System.Data.DataColumn columnnum;
            
            private System.Data.DataColumn columnmodel_id;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columnelapsed_time;
            
            private System.Data.DataColumn columncurrent_status;
            
            private System.Data.DataColumn columncurrent_date;
            
            private System.Data.DataColumn columnrun_time;
            
            private System.Data.DataColumn columnseed;
            
            private System.Data.DataColumn columnparam_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_queueDataTable() {
                this.TableName = "sim_queue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sim_queueDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sim_queueDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn run_idColumn {
                get {
                    return this.columnrun_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sim_idColumn {
                get {
                    return this.columnsim_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numColumn {
                get {
                    return this.columnnum;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn model_idColumn {
                get {
                    return this.columnmodel_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn elapsed_timeColumn {
                get {
                    return this.columnelapsed_time;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn current_statusColumn {
                get {
                    return this.columncurrent_status;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn current_dateColumn {
                get {
                    return this.columncurrent_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn run_timeColumn {
                get {
                    return this.columnrun_time;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn seedColumn {
                get {
                    return this.columnseed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn param_idColumn {
                get {
                    return this.columnparam_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_queueRow this[int index] {
                get {
                    return ((sim_queueRow)(this.Rows[index]));
                }
            }
            
            public event sim_queueRowChangeEventHandler sim_queueRowChanging;
            
            public event sim_queueRowChangeEventHandler sim_queueRowChanged;
            
            public event sim_queueRowChangeEventHandler sim_queueRowDeleting;
            
            public event sim_queueRowChangeEventHandler sim_queueRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addsim_queueRow(sim_queueRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_queueRow Addsim_queueRow(simulationRow parentsimulationRowByscenariosim_queue, sim_statusRow parentsim_statusRowBysim_statussim_queue, int num, Model_infoRow parentModel_infoRowByModel_infosim_queue, string name, int elapsed_time, string current_status, System.DateTime current_date, System.DateTime run_time, int seed, int param_id) {
                sim_queueRow rowsim_queueRow = ((sim_queueRow)(this.NewRow()));
                rowsim_queueRow.ItemArray = new object[] {
                        null,
                        parentsimulationRowByscenariosim_queue[0],
                        parentsim_statusRowBysim_statussim_queue[0],
                        num,
                        parentModel_infoRowByModel_infosim_queue[0],
                        name,
                        elapsed_time,
                        current_status,
                        current_date,
                        run_time,
                        seed,
                        param_id};
                this.Rows.Add(rowsim_queueRow);
                return rowsim_queueRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_queueRow FindByrun_id(int run_id) {
                return ((sim_queueRow)(this.Rows.Find(new object[] {
                            run_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                sim_queueDataTable cln = ((sim_queueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new sim_queueDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrun_id = base.Columns["run_id"];
                this.columnsim_id = base.Columns["sim_id"];
                this.columnstatus = base.Columns["status"];
                this.columnnum = base.Columns["num"];
                this.columnmodel_id = base.Columns["model_id"];
                this.columnname = base.Columns["name"];
                this.columnelapsed_time = base.Columns["elapsed_time"];
                this.columncurrent_status = base.Columns["current_status"];
                this.columncurrent_date = base.Columns["current_date"];
                this.columnrun_time = base.Columns["run_time"];
                this.columnseed = base.Columns["seed"];
                this.columnparam_id = base.Columns["param_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrun_id = new System.Data.DataColumn("run_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrun_id);
                this.columnsim_id = new System.Data.DataColumn("sim_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsim_id);
                this.columnstatus = new System.Data.DataColumn("status", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columnnum = new System.Data.DataColumn("num", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnum);
                this.columnmodel_id = new System.Data.DataColumn("model_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel_id);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnelapsed_time = new System.Data.DataColumn("elapsed_time", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnelapsed_time);
                this.columncurrent_status = new System.Data.DataColumn("current_status", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncurrent_status);
                this.columncurrent_date = new System.Data.DataColumn("current_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncurrent_date);
                this.columnrun_time = new System.Data.DataColumn("run_time", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrun_time);
                this.columnseed = new System.Data.DataColumn("seed", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnseed);
                this.columnparam_id = new System.Data.DataColumn("param_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnparam_id);
                this.Constraints.Add(new System.Data.UniqueConstraint("ModelInfoKey3", new System.Data.DataColumn[] {
                                this.columnrun_id}, true));
                this.columnrun_id.AutoIncrement = true;
                this.columnrun_id.AllowDBNull = false;
                this.columnrun_id.ReadOnly = true;
                this.columnrun_id.Unique = true;
                this.columnsim_id.AllowDBNull = false;
                this.columnstatus.AllowDBNull = false;
                this.columnnum.AllowDBNull = false;
                this.columnmodel_id.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_queueRow Newsim_queueRow() {
                return ((sim_queueRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new sim_queueRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(sim_queueRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sim_queueRowChanged != null)) {
                    this.sim_queueRowChanged(this, new sim_queueRowChangeEvent(((sim_queueRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sim_queueRowChanging != null)) {
                    this.sim_queueRowChanging(this, new sim_queueRowChangeEvent(((sim_queueRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sim_queueRowDeleted != null)) {
                    this.sim_queueRowDeleted(this, new sim_queueRowChangeEvent(((sim_queueRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sim_queueRowDeleting != null)) {
                    this.sim_queueRowDeleting(this, new sim_queueRowChangeEvent(((sim_queueRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removesim_queueRow(sim_queueRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sim_queueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sim_statusDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnstatus_id;
            
            private System.Data.DataColumn columnstatus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_statusDataTable() {
                this.TableName = "sim_status";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sim_statusDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sim_statusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn status_idColumn {
                get {
                    return this.columnstatus_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_statusRow this[int index] {
                get {
                    return ((sim_statusRow)(this.Rows[index]));
                }
            }
            
            public event sim_statusRowChangeEventHandler sim_statusRowChanging;
            
            public event sim_statusRowChangeEventHandler sim_statusRowChanged;
            
            public event sim_statusRowChangeEventHandler sim_statusRowDeleting;
            
            public event sim_statusRowChangeEventHandler sim_statusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addsim_statusRow(sim_statusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_statusRow Addsim_statusRow(byte status_id, string status) {
                sim_statusRow rowsim_statusRow = ((sim_statusRow)(this.NewRow()));
                rowsim_statusRow.ItemArray = new object[] {
                        status_id,
                        status};
                this.Rows.Add(rowsim_statusRow);
                return rowsim_statusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_statusRow FindBystatus_id(byte status_id) {
                return ((sim_statusRow)(this.Rows.Find(new object[] {
                            status_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                sim_statusDataTable cln = ((sim_statusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new sim_statusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstatus_id = base.Columns["status_id"];
                this.columnstatus = base.Columns["status"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstatus_id = new System.Data.DataColumn("status_id", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus_id);
                this.columnstatus = new System.Data.DataColumn("status", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.Constraints.Add(new System.Data.UniqueConstraint("ModelInfoKey4", new System.Data.DataColumn[] {
                                this.columnstatus_id}, true));
                this.columnstatus_id.AllowDBNull = false;
                this.columnstatus_id.Unique = true;
                this.columnstatus.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_statusRow Newsim_statusRow() {
                return ((sim_statusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new sim_statusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(sim_statusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sim_statusRowChanged != null)) {
                    this.sim_statusRowChanged(this, new sim_statusRowChangeEvent(((sim_statusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sim_statusRowChanging != null)) {
                    this.sim_statusRowChanging(this, new sim_statusRowChangeEvent(((sim_statusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sim_statusRowDeleted != null)) {
                    this.sim_statusRowDeleted(this, new sim_statusRowChangeEvent(((sim_statusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sim_statusRowDeleting != null)) {
                    this.sim_statusRowDeleting(this, new sim_statusRowChangeEvent(((sim_statusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removesim_statusRow(sim_statusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sim_statusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class projectDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columndescr;
            
            private System.Data.DataColumn columncreated;
            
            private System.Data.DataColumn columnmodified;
            
            private System.Data.DataColumn columnread_only;
            
            private System.Data.DataColumn columnlocked;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectDataTable() {
                this.TableName = "project";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal projectDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected projectDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descrColumn {
                get {
                    return this.columndescr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn createdColumn {
                get {
                    return this.columncreated;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn modifiedColumn {
                get {
                    return this.columnmodified;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn read_onlyColumn {
                get {
                    return this.columnread_only;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn lockedColumn {
                get {
                    return this.columnlocked;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectRow this[int index] {
                get {
                    return ((projectRow)(this.Rows[index]));
                }
            }
            
            public event projectRowChangeEventHandler projectRowChanging;
            
            public event projectRowChangeEventHandler projectRowChanged;
            
            public event projectRowChangeEventHandler projectRowDeleting;
            
            public event projectRowChangeEventHandler projectRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddprojectRow(projectRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectRow AddprojectRow(string name, string descr, System.DateTime created, System.DateTime modified, bool read_only, bool locked) {
                projectRow rowprojectRow = ((projectRow)(this.NewRow()));
                rowprojectRow.ItemArray = new object[] {
                        null,
                        name,
                        descr,
                        created,
                        modified,
                        read_only,
                        locked};
                this.Rows.Add(rowprojectRow);
                return rowprojectRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectRow FindByid(int id) {
                return ((projectRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                projectDataTable cln = ((projectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new projectDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnname = base.Columns["name"];
                this.columndescr = base.Columns["descr"];
                this.columncreated = base.Columns["created"];
                this.columnmodified = base.Columns["modified"];
                this.columnread_only = base.Columns["read_only"];
                this.columnlocked = base.Columns["locked"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columndescr = new System.Data.DataColumn("descr", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescr);
                this.columncreated = new System.Data.DataColumn("created", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncreated);
                this.columnmodified = new System.Data.DataColumn("modified", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodified);
                this.columnread_only = new System.Data.DataColumn("read_only", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnread_only);
                this.columnlocked = new System.Data.DataColumn("locked", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocked);
                this.Constraints.Add(new System.Data.UniqueConstraint("ModelInfoKey6", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnid.AutoIncrement = true;
                this.columnid.AllowDBNull = false;
                this.columnid.ReadOnly = true;
                this.columnid.Unique = true;
                this.columnread_only.AllowDBNull = false;
                this.columnlocked.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectRow NewprojectRow() {
                return ((projectRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new projectRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(projectRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.projectRowChanged != null)) {
                    this.projectRowChanged(this, new projectRowChangeEvent(((projectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.projectRowChanging != null)) {
                    this.projectRowChanging(this, new projectRowChangeEvent(((projectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.projectRowDeleted != null)) {
                    this.projectRowDeleted(this, new projectRowChangeEvent(((projectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.projectRowDeleting != null)) {
                    this.projectRowDeleting(this, new projectRowChangeEvent(((projectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveprojectRow(projectRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "projectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Model_infoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnmodel_id;
            
            private System.Data.DataColumn columnproject_id;
            
            private System.Data.DataColumn columnmodel_name;
            
            private System.Data.DataColumn columnmodel_type;
            
            private System.Data.DataColumn columndescr;
            
            private System.Data.DataColumn columnread_only;
            
            private System.Data.DataColumn columnlocked;
            
            private System.Data.DataColumn columncreated;
            
            private System.Data.DataColumn columnmodified;
            
            private System.Data.DataColumn columnstart_date;
            
            private System.Data.DataColumn columnend_date;
            
            private System.Data.DataColumn columntask_based;
            
            private System.Data.DataColumn columnprofit_loss;
            
            private System.Data.DataColumn columnproduct_extensions;
            
            private System.Data.DataColumn columnproduct_dependency;
            
            private System.Data.DataColumn columnsegment_growth;
            
            private System.Data.DataColumn columnconsumer_budget;
            
            private System.Data.DataColumn columnperiodic_price;
            
            private System.Data.DataColumn columnpromoted_price;
            
            private System.Data.DataColumn columndistribution;
            
            private System.Data.DataColumn columndisplay;
            
            private System.Data.DataColumn columnsocial_network;
            
            private System.Data.DataColumn columnattribute_pre_and_post;
            
            private System.Data.DataColumn columnapp_code;
            
            private System.Data.DataColumn columnmarket_utility;
            
            private System.Data.DataColumn columncheckpoint_file;
            
            private System.Data.DataColumn columncheckpoint_date;
            
            private System.Data.DataColumn columncheckpoint_valid;
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnpop_size;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Model_infoDataTable() {
                this.TableName = "Model_info";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Model_infoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Model_infoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn model_idColumn {
                get {
                    return this.columnmodel_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn project_idColumn {
                get {
                    return this.columnproject_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn model_nameColumn {
                get {
                    return this.columnmodel_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn model_typeColumn {
                get {
                    return this.columnmodel_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descrColumn {
                get {
                    return this.columndescr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn read_onlyColumn {
                get {
                    return this.columnread_only;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn lockedColumn {
                get {
                    return this.columnlocked;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn createdColumn {
                get {
                    return this.columncreated;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn modifiedColumn {
                get {
                    return this.columnmodified;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn start_dateColumn {
                get {
                    return this.columnstart_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn end_dateColumn {
                get {
                    return this.columnend_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn task_basedColumn {
                get {
                    return this.columntask_based;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn profit_lossColumn {
                get {
                    return this.columnprofit_loss;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn product_extensionsColumn {
                get {
                    return this.columnproduct_extensions;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn product_dependencyColumn {
                get {
                    return this.columnproduct_dependency;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn segment_growthColumn {
                get {
                    return this.columnsegment_growth;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn consumer_budgetColumn {
                get {
                    return this.columnconsumer_budget;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn periodic_priceColumn {
                get {
                    return this.columnperiodic_price;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn promoted_priceColumn {
                get {
                    return this.columnpromoted_price;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn distributionColumn {
                get {
                    return this.columndistribution;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn displayColumn {
                get {
                    return this.columndisplay;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn social_networkColumn {
                get {
                    return this.columnsocial_network;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn attribute_pre_and_postColumn {
                get {
                    return this.columnattribute_pre_and_post;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn app_codeColumn {
                get {
                    return this.columnapp_code;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn market_utilityColumn {
                get {
                    return this.columnmarket_utility;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn checkpoint_fileColumn {
                get {
                    return this.columncheckpoint_file;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn checkpoint_dateColumn {
                get {
                    return this.columncheckpoint_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn checkpoint_validColumn {
                get {
                    return this.columncheckpoint_valid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pop_sizeColumn {
                get {
                    return this.columnpop_size;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Model_infoRow this[int index] {
                get {
                    return ((Model_infoRow)(this.Rows[index]));
                }
            }
            
            public event Model_infoRowChangeEventHandler Model_infoRowChanging;
            
            public event Model_infoRowChangeEventHandler Model_infoRowChanged;
            
            public event Model_infoRowChangeEventHandler Model_infoRowDeleting;
            
            public event Model_infoRowChangeEventHandler Model_infoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModel_infoRow(Model_infoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Model_infoRow AddModel_infoRow(
                        projectRow parentprojectRowByprojectModel_info, 
                        string model_name, 
                        int model_type, 
                        string descr, 
                        bool read_only, 
                        bool locked, 
                        System.DateTime created, 
                        System.DateTime modified, 
                        System.DateTime start_date, 
                        System.DateTime end_date, 
                        bool task_based, 
                        bool profit_loss, 
                        bool product_extensions, 
                        bool product_dependency, 
                        bool segment_growth, 
                        bool consumer_budget, 
                        bool periodic_price, 
                        bool promoted_price, 
                        bool distribution, 
                        bool display, 
                        bool social_network, 
                        bool attribute_pre_and_post, 
                        string app_code, 
                        bool market_utility, 
                        string checkpoint_file, 
                        System.DateTime checkpoint_date, 
                        bool checkpoint_valid, 
                        projectRow parentprojectRowByproject_Model_info, 
                        int pop_size) {
                Model_infoRow rowModel_infoRow = ((Model_infoRow)(this.NewRow()));
                rowModel_infoRow.ItemArray = new object[] {
                        null,
                        parentprojectRowByprojectModel_info[0],
                        model_name,
                        model_type,
                        descr,
                        read_only,
                        locked,
                        created,
                        modified,
                        start_date,
                        end_date,
                        task_based,
                        profit_loss,
                        product_extensions,
                        product_dependency,
                        segment_growth,
                        consumer_budget,
                        periodic_price,
                        promoted_price,
                        distribution,
                        display,
                        social_network,
                        attribute_pre_and_post,
                        app_code,
                        market_utility,
                        checkpoint_file,
                        checkpoint_date,
                        checkpoint_valid,
                        parentprojectRowByproject_Model_info[0],
                        pop_size};
                this.Rows.Add(rowModel_infoRow);
                return rowModel_infoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Model_infoRow FindBymodel_id(int model_id) {
                return ((Model_infoRow)(this.Rows.Find(new object[] {
                            model_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                Model_infoDataTable cln = ((Model_infoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new Model_infoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmodel_id = base.Columns["model_id"];
                this.columnproject_id = base.Columns["project_id"];
                this.columnmodel_name = base.Columns["model_name"];
                this.columnmodel_type = base.Columns["model_type"];
                this.columndescr = base.Columns["descr"];
                this.columnread_only = base.Columns["read_only"];
                this.columnlocked = base.Columns["locked"];
                this.columncreated = base.Columns["created"];
                this.columnmodified = base.Columns["modified"];
                this.columnstart_date = base.Columns["start_date"];
                this.columnend_date = base.Columns["end_date"];
                this.columntask_based = base.Columns["task_based"];
                this.columnprofit_loss = base.Columns["profit_loss"];
                this.columnproduct_extensions = base.Columns["product_extensions"];
                this.columnproduct_dependency = base.Columns["product_dependency"];
                this.columnsegment_growth = base.Columns["segment_growth"];
                this.columnconsumer_budget = base.Columns["consumer_budget"];
                this.columnperiodic_price = base.Columns["periodic_price"];
                this.columnpromoted_price = base.Columns["promoted_price"];
                this.columndistribution = base.Columns["distribution"];
                this.columndisplay = base.Columns["display"];
                this.columnsocial_network = base.Columns["social_network"];
                this.columnattribute_pre_and_post = base.Columns["attribute_pre_and_post"];
                this.columnapp_code = base.Columns["app_code"];
                this.columnmarket_utility = base.Columns["market_utility"];
                this.columncheckpoint_file = base.Columns["checkpoint_file"];
                this.columncheckpoint_date = base.Columns["checkpoint_date"];
                this.columncheckpoint_valid = base.Columns["checkpoint_valid"];
                this.columnid = base.Columns["id"];
                this.columnpop_size = base.Columns["pop_size"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmodel_id = new System.Data.DataColumn("model_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel_id);
                this.columnproject_id = new System.Data.DataColumn("project_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnproject_id);
                this.columnmodel_name = new System.Data.DataColumn("model_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel_name);
                this.columnmodel_type = new System.Data.DataColumn("model_type", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel_type);
                this.columndescr = new System.Data.DataColumn("descr", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescr);
                this.columnread_only = new System.Data.DataColumn("read_only", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnread_only);
                this.columnlocked = new System.Data.DataColumn("locked", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocked);
                this.columncreated = new System.Data.DataColumn("created", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncreated);
                this.columnmodified = new System.Data.DataColumn("modified", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodified);
                this.columnstart_date = new System.Data.DataColumn("start_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart_date);
                this.columnend_date = new System.Data.DataColumn("end_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnend_date);
                this.columntask_based = new System.Data.DataColumn("task_based", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntask_based);
                this.columnprofit_loss = new System.Data.DataColumn("profit_loss", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnprofit_loss);
                this.columnproduct_extensions = new System.Data.DataColumn("product_extensions", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnproduct_extensions);
                this.columnproduct_dependency = new System.Data.DataColumn("product_dependency", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnproduct_dependency);
                this.columnsegment_growth = new System.Data.DataColumn("segment_growth", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsegment_growth);
                this.columnconsumer_budget = new System.Data.DataColumn("consumer_budget", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnconsumer_budget);
                this.columnperiodic_price = new System.Data.DataColumn("periodic_price", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnperiodic_price);
                this.columnpromoted_price = new System.Data.DataColumn("promoted_price", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpromoted_price);
                this.columndistribution = new System.Data.DataColumn("distribution", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndistribution);
                this.columndisplay = new System.Data.DataColumn("display", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndisplay);
                this.columnsocial_network = new System.Data.DataColumn("social_network", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsocial_network);
                this.columnattribute_pre_and_post = new System.Data.DataColumn("attribute_pre_and_post", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnattribute_pre_and_post);
                this.columnapp_code = new System.Data.DataColumn("app_code", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnapp_code);
                this.columnmarket_utility = new System.Data.DataColumn("market_utility", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmarket_utility);
                this.columncheckpoint_file = new System.Data.DataColumn("checkpoint_file", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncheckpoint_file);
                this.columncheckpoint_date = new System.Data.DataColumn("checkpoint_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncheckpoint_date);
                this.columncheckpoint_valid = new System.Data.DataColumn("checkpoint_valid", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncheckpoint_valid);
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnid);
                this.columnpop_size = new System.Data.DataColumn("pop_size", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpop_size);
                this.Constraints.Add(new System.Data.UniqueConstraint("ModelInfoKey1", new System.Data.DataColumn[] {
                                this.columnmodel_id}, true));
                this.columnmodel_id.AutoIncrement = true;
                this.columnmodel_id.AllowDBNull = false;
                this.columnmodel_id.ReadOnly = true;
                this.columnmodel_id.Unique = true;
                this.columnproject_id.AllowDBNull = false;
                this.columnmodel_type.AllowDBNull = false;
                this.columnread_only.AllowDBNull = false;
                this.columnlocked.AllowDBNull = false;
                this.columntask_based.AllowDBNull = false;
                this.columnprofit_loss.AllowDBNull = false;
                this.columnproduct_extensions.AllowDBNull = false;
                this.columnproduct_dependency.AllowDBNull = false;
                this.columnsegment_growth.AllowDBNull = false;
                this.columnconsumer_budget.AllowDBNull = false;
                this.columnperiodic_price.AllowDBNull = false;
                this.columnpromoted_price.AllowDBNull = false;
                this.columndistribution.AllowDBNull = false;
                this.columndisplay.AllowDBNull = false;
                this.columnsocial_network.AllowDBNull = false;
                this.columnid.Namespace = "http://tempuri.org/ModelInfo.xsd";
                this.columnpop_size.AllowDBNull = false;
                this.columnpop_size.DefaultValue = ((int)(0));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Model_infoRow NewModel_infoRow() {
                return ((Model_infoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Model_infoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(Model_infoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Model_infoRowChanged != null)) {
                    this.Model_infoRowChanged(this, new Model_infoRowChangeEvent(((Model_infoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Model_infoRowChanging != null)) {
                    this.Model_infoRowChanging(this, new Model_infoRowChangeEvent(((Model_infoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Model_infoRowDeleted != null)) {
                    this.Model_infoRowDeleted(this, new Model_infoRowChangeEvent(((Model_infoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Model_infoRowDeleting != null)) {
                    this.Model_infoRowDeleting(this, new Model_infoRowChangeEvent(((Model_infoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModel_infoRow(Model_infoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Model_infoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sim_variable_valueDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnrun_id;
            
            private System.Data.DataColumn columnvar_id;
            
            private System.Data.DataColumn columnval;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_variable_valueDataTable() {
                this.TableName = "sim_variable_value";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sim_variable_valueDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sim_variable_valueDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn run_idColumn {
                get {
                    return this.columnrun_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn var_idColumn {
                get {
                    return this.columnvar_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn valColumn {
                get {
                    return this.columnval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_variable_valueRow this[int index] {
                get {
                    return ((sim_variable_valueRow)(this.Rows[index]));
                }
            }
            
            public event sim_variable_valueRowChangeEventHandler sim_variable_valueRowChanging;
            
            public event sim_variable_valueRowChangeEventHandler sim_variable_valueRowChanged;
            
            public event sim_variable_valueRowChangeEventHandler sim_variable_valueRowDeleting;
            
            public event sim_variable_valueRowChangeEventHandler sim_variable_valueRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addsim_variable_valueRow(sim_variable_valueRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_variable_valueRow Addsim_variable_valueRow(sim_queueRow parentsim_queueRowBysim_queuesim_variable_value, scenario_variableRow parentscenario_variableRowByscenario_variablesim_variable_value, double val) {
                sim_variable_valueRow rowsim_variable_valueRow = ((sim_variable_valueRow)(this.NewRow()));
                rowsim_variable_valueRow.ItemArray = new object[] {
                        parentsim_queueRowBysim_queuesim_variable_value[0],
                        parentscenario_variableRowByscenario_variablesim_variable_value[1],
                        val};
                this.Rows.Add(rowsim_variable_valueRow);
                return rowsim_variable_valueRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                sim_variable_valueDataTable cln = ((sim_variable_valueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new sim_variable_valueDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnrun_id = base.Columns["run_id"];
                this.columnvar_id = base.Columns["var_id"];
                this.columnval = base.Columns["val"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnrun_id = new System.Data.DataColumn("run_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrun_id);
                this.columnvar_id = new System.Data.DataColumn("var_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnvar_id);
                this.columnval = new System.Data.DataColumn("val", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnval);
                this.columnrun_id.AllowDBNull = false;
                this.columnvar_id.AllowDBNull = false;
                this.columnval.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_variable_valueRow Newsim_variable_valueRow() {
                return ((sim_variable_valueRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new sim_variable_valueRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(sim_variable_valueRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sim_variable_valueRowChanged != null)) {
                    this.sim_variable_valueRowChanged(this, new sim_variable_valueRowChangeEvent(((sim_variable_valueRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sim_variable_valueRowChanging != null)) {
                    this.sim_variable_valueRowChanging(this, new sim_variable_valueRowChangeEvent(((sim_variable_valueRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sim_variable_valueRowDeleted != null)) {
                    this.sim_variable_valueRowDeleted(this, new sim_variable_valueRowChangeEvent(((sim_variable_valueRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sim_variable_valueRowDeleting != null)) {
                    this.sim_variable_valueRowDeleting(this, new sim_variable_valueRowChangeEvent(((sim_variable_valueRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removesim_variable_valueRow(sim_variable_valueRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sim_variable_valueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class scenario_variableDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnscenario_id;
            
            private System.Data.DataColumn columnsim_id;
            
            private System.Data.DataColumn columntoken;
            
            private System.Data.DataColumn columndescr;
            
            private System.Data.DataColumn columnmin;
            
            private System.Data.DataColumn columnmax;
            
            private System.Data.DataColumn columnnum_steps;
            
            private System.Data.DataColumn columntype;
            
            private System.Data.DataColumn columnproduct_id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_variableDataTable() {
                this.TableName = "scenario_variable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scenario_variableDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected scenario_variableDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn scenario_idColumn {
                get {
                    return this.columnscenario_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sim_idColumn {
                get {
                    return this.columnsim_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tokenColumn {
                get {
                    return this.columntoken;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descrColumn {
                get {
                    return this.columndescr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn minColumn {
                get {
                    return this.columnmin;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn maxColumn {
                get {
                    return this.columnmax;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn num_stepsColumn {
                get {
                    return this.columnnum_steps;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn product_idColumn {
                get {
                    return this.columnproduct_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_variableRow this[int index] {
                get {
                    return ((scenario_variableRow)(this.Rows[index]));
                }
            }
            
            public event scenario_variableRowChangeEventHandler scenario_variableRowChanging;
            
            public event scenario_variableRowChangeEventHandler scenario_variableRowChanged;
            
            public event scenario_variableRowChangeEventHandler scenario_variableRowDeleting;
            
            public event scenario_variableRowChangeEventHandler scenario_variableRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addscenario_variableRow(scenario_variableRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_variableRow Addscenario_variableRow(simulationRow parentsimulationRowByscenarioscenario_variable, string token, string descr, double min, double max, int num_steps, byte type, int product_id) {
                scenario_variableRow rowscenario_variableRow = ((scenario_variableRow)(this.NewRow()));
                rowscenario_variableRow.ItemArray = new object[] {
                        parentsimulationRowByscenarioscenario_variable[0],
                        null,
                        token,
                        descr,
                        min,
                        max,
                        num_steps,
                        type,
                        product_id};
                this.Rows.Add(rowscenario_variableRow);
                return rowscenario_variableRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_variableRow FindBysim_id(int sim_id) {
                return ((scenario_variableRow)(this.Rows.Find(new object[] {
                            sim_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                scenario_variableDataTable cln = ((scenario_variableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new scenario_variableDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnscenario_id = base.Columns["scenario_id"];
                this.columnsim_id = base.Columns["sim_id"];
                this.columntoken = base.Columns["token"];
                this.columndescr = base.Columns["descr"];
                this.columnmin = base.Columns["min"];
                this.columnmax = base.Columns["max"];
                this.columnnum_steps = base.Columns["num_steps"];
                this.columntype = base.Columns["type"];
                this.columnproduct_id = base.Columns["product_id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnscenario_id = new System.Data.DataColumn("scenario_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnscenario_id);
                this.columnsim_id = new System.Data.DataColumn("sim_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsim_id);
                this.columntoken = new System.Data.DataColumn("token", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntoken);
                this.columndescr = new System.Data.DataColumn("descr", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescr);
                this.columnmin = new System.Data.DataColumn("min", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmin);
                this.columnmax = new System.Data.DataColumn("max", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmax);
                this.columnnum_steps = new System.Data.DataColumn("num_steps", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnum_steps);
                this.columntype = new System.Data.DataColumn("type", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columnproduct_id = new System.Data.DataColumn("product_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnproduct_id);
                this.Constraints.Add(new System.Data.UniqueConstraint("ModelInfoKey13", new System.Data.DataColumn[] {
                                this.columnsim_id}, true));
                this.columnscenario_id.AllowDBNull = false;
                this.columnsim_id.AutoIncrement = true;
                this.columnsim_id.AllowDBNull = false;
                this.columnsim_id.ReadOnly = true;
                this.columnsim_id.Unique = true;
                this.columnmin.AllowDBNull = false;
                this.columnmax.AllowDBNull = false;
                this.columnnum_steps.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_variableRow Newscenario_variableRow() {
                return ((scenario_variableRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new scenario_variableRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(scenario_variableRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scenario_variableRowChanged != null)) {
                    this.scenario_variableRowChanged(this, new scenario_variableRowChangeEvent(((scenario_variableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scenario_variableRowChanging != null)) {
                    this.scenario_variableRowChanging(this, new scenario_variableRowChangeEvent(((scenario_variableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scenario_variableRowDeleted != null)) {
                    this.scenario_variableRowDeleted(this, new scenario_variableRowChangeEvent(((scenario_variableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scenario_variableRowDeleting != null)) {
                    this.scenario_variableRowDeleting(this, new scenario_variableRowChangeEvent(((scenario_variableRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removescenario_variableRow(scenario_variableRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "scenario_variableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class scenario_parameterDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnsim_id;
            
            private System.Data.DataColumn columnparam_id;
            
            private System.Data.DataColumn columnaValue;
            
            private System.Data.DataColumn columnexpression;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_parameterDataTable() {
                this.TableName = "scenario_parameter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scenario_parameterDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected scenario_parameterDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sim_idColumn {
                get {
                    return this.columnsim_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn param_idColumn {
                get {
                    return this.columnparam_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn aValueColumn {
                get {
                    return this.columnaValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn expressionColumn {
                get {
                    return this.columnexpression;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_parameterRow this[int index] {
                get {
                    return ((scenario_parameterRow)(this.Rows[index]));
                }
            }
            
            public event scenario_parameterRowChangeEventHandler scenario_parameterRowChanging;
            
            public event scenario_parameterRowChangeEventHandler scenario_parameterRowChanged;
            
            public event scenario_parameterRowChangeEventHandler scenario_parameterRowDeleting;
            
            public event scenario_parameterRowChangeEventHandler scenario_parameterRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addscenario_parameterRow(scenario_parameterRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_parameterRow Addscenario_parameterRow(simulationRow parentsimulationRowByscenarioscenario_parameter, int param_id, double aValue, string expression) {
                scenario_parameterRow rowscenario_parameterRow = ((scenario_parameterRow)(this.NewRow()));
                rowscenario_parameterRow.ItemArray = new object[] {
                        parentsimulationRowByscenarioscenario_parameter[0],
                        param_id,
                        aValue,
                        expression};
                this.Rows.Add(rowscenario_parameterRow);
                return rowscenario_parameterRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                scenario_parameterDataTable cln = ((scenario_parameterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new scenario_parameterDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsim_id = base.Columns["sim_id"];
                this.columnparam_id = base.Columns["param_id"];
                this.columnaValue = base.Columns["aValue"];
                this.columnexpression = base.Columns["expression"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsim_id = new System.Data.DataColumn("sim_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsim_id);
                this.columnparam_id = new System.Data.DataColumn("param_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnparam_id);
                this.columnaValue = new System.Data.DataColumn("aValue", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaValue);
                this.columnexpression = new System.Data.DataColumn("expression", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnexpression);
                this.columnsim_id.AllowDBNull = false;
                this.columnparam_id.AllowDBNull = false;
                this.columnaValue.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_parameterRow Newscenario_parameterRow() {
                return ((scenario_parameterRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new scenario_parameterRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(scenario_parameterRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scenario_parameterRowChanged != null)) {
                    this.scenario_parameterRowChanged(this, new scenario_parameterRowChangeEvent(((scenario_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scenario_parameterRowChanging != null)) {
                    this.scenario_parameterRowChanging(this, new scenario_parameterRowChangeEvent(((scenario_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scenario_parameterRowDeleted != null)) {
                    this.scenario_parameterRowDeleted(this, new scenario_parameterRowChangeEvent(((scenario_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scenario_parameterRowDeleting != null)) {
                    this.scenario_parameterRowDeleting(this, new scenario_parameterRowChangeEvent(((scenario_parameterRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removescenario_parameterRow(scenario_parameterRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "scenario_parameterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class scenario_simseedDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnsim_id;
            
            private System.Data.DataColumn columnid;
            
            private System.Data.DataColumn columnseed;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_simseedDataTable() {
                this.TableName = "scenario_simseed";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scenario_simseedDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected scenario_simseedDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sim_idColumn {
                get {
                    return this.columnsim_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn seedColumn {
                get {
                    return this.columnseed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_simseedRow this[int index] {
                get {
                    return ((scenario_simseedRow)(this.Rows[index]));
                }
            }
            
            public event scenario_simseedRowChangeEventHandler scenario_simseedRowChanging;
            
            public event scenario_simseedRowChangeEventHandler scenario_simseedRowChanged;
            
            public event scenario_simseedRowChangeEventHandler scenario_simseedRowDeleting;
            
            public event scenario_simseedRowChangeEventHandler scenario_simseedRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addscenario_simseedRow(scenario_simseedRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_simseedRow Addscenario_simseedRow(simulationRow parentsimulationRowByscenarioscenario_simseed, int seed) {
                scenario_simseedRow rowscenario_simseedRow = ((scenario_simseedRow)(this.NewRow()));
                rowscenario_simseedRow.ItemArray = new object[] {
                        parentsimulationRowByscenarioscenario_simseed[0],
                        null,
                        seed};
                this.Rows.Add(rowscenario_simseedRow);
                return rowscenario_simseedRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_simseedRow FindByid(int id) {
                return ((scenario_simseedRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                scenario_simseedDataTable cln = ((scenario_simseedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new scenario_simseedDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsim_id = base.Columns["sim_id"];
                this.columnid = base.Columns["id"];
                this.columnseed = base.Columns["seed"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsim_id = new System.Data.DataColumn("sim_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsim_id);
                this.columnid = new System.Data.DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnseed = new System.Data.DataColumn("seed", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnseed);
                this.Constraints.Add(new System.Data.UniqueConstraint("ModelInfoKey14", new System.Data.DataColumn[] {
                                this.columnid}, true));
                this.columnsim_id.AllowDBNull = false;
                this.columnid.AutoIncrement = true;
                this.columnid.AllowDBNull = false;
                this.columnid.ReadOnly = true;
                this.columnid.Unique = true;
                this.columnseed.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_simseedRow Newscenario_simseedRow() {
                return ((scenario_simseedRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new scenario_simseedRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(scenario_simseedRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scenario_simseedRowChanged != null)) {
                    this.scenario_simseedRowChanged(this, new scenario_simseedRowChangeEvent(((scenario_simseedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scenario_simseedRowChanging != null)) {
                    this.scenario_simseedRowChanging(this, new scenario_simseedRowChangeEvent(((scenario_simseedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scenario_simseedRowDeleted != null)) {
                    this.scenario_simseedRowDeleted(this, new scenario_simseedRowChangeEvent(((scenario_simseedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scenario_simseedRowDeleting != null)) {
                    this.scenario_simseedRowDeleting(this, new scenario_simseedRowChangeEvent(((scenario_simseedRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removescenario_simseedRow(scenario_simseedRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "scenario_simseedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class variable_typeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntype_id;
            
            private System.Data.DataColumn columntype;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public variable_typeDataTable() {
                this.TableName = "variable_type";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal variable_typeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected variable_typeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn type_idColumn {
                get {
                    return this.columntype_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public variable_typeRow this[int index] {
                get {
                    return ((variable_typeRow)(this.Rows[index]));
                }
            }
            
            public event variable_typeRowChangeEventHandler variable_typeRowChanging;
            
            public event variable_typeRowChangeEventHandler variable_typeRowChanged;
            
            public event variable_typeRowChangeEventHandler variable_typeRowDeleting;
            
            public event variable_typeRowChangeEventHandler variable_typeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addvariable_typeRow(variable_typeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public variable_typeRow Addvariable_typeRow(byte type_id, string type) {
                variable_typeRow rowvariable_typeRow = ((variable_typeRow)(this.NewRow()));
                rowvariable_typeRow.ItemArray = new object[] {
                        type_id,
                        type};
                this.Rows.Add(rowvariable_typeRow);
                return rowvariable_typeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public variable_typeRow FindBytype_id(byte type_id) {
                return ((variable_typeRow)(this.Rows.Find(new object[] {
                            type_id})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                variable_typeDataTable cln = ((variable_typeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new variable_typeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntype_id = base.Columns["type_id"];
                this.columntype = base.Columns["type"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntype_id = new System.Data.DataColumn("type_id", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntype_id);
                this.columntype = new System.Data.DataColumn("type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.Constraints.Add(new System.Data.UniqueConstraint("ModelInfoKey15", new System.Data.DataColumn[] {
                                this.columntype_id}, true));
                this.columntype_id.AllowDBNull = false;
                this.columntype_id.Unique = true;
                this.columntype.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public variable_typeRow Newvariable_typeRow() {
                return ((variable_typeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new variable_typeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(variable_typeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.variable_typeRowChanged != null)) {
                    this.variable_typeRowChanged(this, new variable_typeRowChangeEvent(((variable_typeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.variable_typeRowChanging != null)) {
                    this.variable_typeRowChanging(this, new variable_typeRowChangeEvent(((variable_typeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.variable_typeRowDeleted != null)) {
                    this.variable_typeRowDeleted(this, new variable_typeRowChangeEvent(((variable_typeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.variable_typeRowDeleting != null)) {
                    this.variable_typeRowDeleting(this, new variable_typeRowChangeEvent(((variable_typeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removevariable_typeRow(variable_typeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "variable_typeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class scenario_metricDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnsim_id;
            
            private System.Data.DataColumn columntoken;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_metricDataTable() {
                this.TableName = "scenario_metric";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scenario_metricDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected scenario_metricDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn sim_idColumn {
                get {
                    return this.columnsim_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tokenColumn {
                get {
                    return this.columntoken;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_metricRow this[int index] {
                get {
                    return ((scenario_metricRow)(this.Rows[index]));
                }
            }
            
            public event scenario_metricRowChangeEventHandler scenario_metricRowChanging;
            
            public event scenario_metricRowChangeEventHandler scenario_metricRowChanged;
            
            public event scenario_metricRowChangeEventHandler scenario_metricRowDeleting;
            
            public event scenario_metricRowChangeEventHandler scenario_metricRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addscenario_metricRow(scenario_metricRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_metricRow Addscenario_metricRow(simulationRow parentsimulationRowByscenarioscenario_metric, string token) {
                scenario_metricRow rowscenario_metricRow = ((scenario_metricRow)(this.NewRow()));
                rowscenario_metricRow.ItemArray = new object[] {
                        parentsimulationRowByscenarioscenario_metric[0],
                        token};
                this.Rows.Add(rowscenario_metricRow);
                return rowscenario_metricRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                scenario_metricDataTable cln = ((scenario_metricDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new scenario_metricDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsim_id = base.Columns["sim_id"];
                this.columntoken = base.Columns["token"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsim_id = new System.Data.DataColumn("sim_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsim_id);
                this.columntoken = new System.Data.DataColumn("token", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntoken);
                this.columnsim_id.AllowDBNull = false;
                this.columntoken.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_metricRow Newscenario_metricRow() {
                return ((scenario_metricRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new scenario_metricRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(scenario_metricRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scenario_metricRowChanged != null)) {
                    this.scenario_metricRowChanged(this, new scenario_metricRowChangeEvent(((scenario_metricRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scenario_metricRowChanging != null)) {
                    this.scenario_metricRowChanging(this, new scenario_metricRowChangeEvent(((scenario_metricRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scenario_metricRowDeleted != null)) {
                    this.scenario_metricRowDeleted(this, new scenario_metricRowChangeEvent(((scenario_metricRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scenario_metricRowDeleting != null)) {
                    this.scenario_metricRowDeleting(this, new scenario_metricRowChangeEvent(((scenario_metricRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removescenario_metricRow(scenario_metricRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "scenario_metricDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class scenarioDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnscenario_id;
            
            private System.Data.DataColumn columnmodel_id;
            
            private System.Data.DataColumn columnname;
            
            private System.Data.DataColumn columndescr;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenarioDataTable() {
                this.TableName = "scenario";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scenarioDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected scenarioDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn scenario_idColumn {
                get {
                    return this.columnscenario_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn model_idColumn {
                get {
                    return this.columnmodel_id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descrColumn {
                get {
                    return this.columndescr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenarioRow this[int index] {
                get {
                    return ((scenarioRow)(this.Rows[index]));
                }
            }
            
            public event scenarioRowChangeEventHandler scenarioRowChanging;
            
            public event scenarioRowChangeEventHandler scenarioRowChanged;
            
            public event scenarioRowChangeEventHandler scenarioRowDeleting;
            
            public event scenarioRowChangeEventHandler scenarioRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddscenarioRow(scenarioRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenarioRow AddscenarioRow(int scenario_id, Model_infoRow parentModel_infoRowByFK_Model_info_scenario, string name, string descr) {
                scenarioRow rowscenarioRow = ((scenarioRow)(this.NewRow()));
                rowscenarioRow.ItemArray = new object[] {
                        scenario_id,
                        parentModel_infoRowByFK_Model_info_scenario[0],
                        name,
                        descr};
                this.Rows.Add(rowscenarioRow);
                return rowscenarioRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                scenarioDataTable cln = ((scenarioDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new scenarioDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnscenario_id = base.Columns["scenario_id"];
                this.columnmodel_id = base.Columns["model_id"];
                this.columnname = base.Columns["name"];
                this.columndescr = base.Columns["descr"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnscenario_id = new System.Data.DataColumn("scenario_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnscenario_id);
                this.columnmodel_id = new System.Data.DataColumn("model_id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel_id);
                this.columnname = new System.Data.DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columndescr = new System.Data.DataColumn("descr", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescr);
                this.columnscenario_id.ReadOnly = true;
                this.columnmodel_id.ReadOnly = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenarioRow NewscenarioRow() {
                return ((scenarioRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new scenarioRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(scenarioRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scenarioRowChanged != null)) {
                    this.scenarioRowChanged(this, new scenarioRowChangeEvent(((scenarioRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scenarioRowChanging != null)) {
                    this.scenarioRowChanging(this, new scenarioRowChangeEvent(((scenarioRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scenarioRowDeleted != null)) {
                    this.scenarioRowDeleted(this, new scenarioRowChangeEvent(((scenarioRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scenarioRowDeleting != null)) {
                    this.scenarioRowDeleting(this, new scenarioRowChangeEvent(((scenarioRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovescenarioRow(scenarioRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ModelInfo ds = new ModelInfo();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "scenarioDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class model_parameterRow : System.Data.DataRow {
            
            private model_parameterDataTable tablemodel_parameter;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal model_parameterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablemodel_parameter = ((model_parameterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int model_id {
                get {
                    return ((int)(this[this.tablemodel_parameter.model_idColumn]));
                }
                set {
                    this[this.tablemodel_parameter.model_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tablemodel_parameter.idColumn]));
                }
                set {
                    this[this.tablemodel_parameter.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablemodel_parameter.nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'name\' in table \'model_parameter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemodel_parameter.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string table_name {
                get {
                    try {
                        return ((string)(this[this.tablemodel_parameter.table_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'table_name\' in table \'model_parameter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemodel_parameter.table_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string col_name {
                get {
                    try {
                        return ((string)(this[this.tablemodel_parameter.col_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'col_name\' in table \'model_parameter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemodel_parameter.col_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string filter {
                get {
                    try {
                        return ((string)(this[this.tablemodel_parameter.filterColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'filter\' in table \'model_parameter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemodel_parameter.filterColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string identity_row {
                get {
                    try {
                        return ((string)(this[this.tablemodel_parameter.identity_rowColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'identity_row\' in table \'model_parameter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemodel_parameter.identity_rowColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int row_id {
                get {
                    try {
                        return ((int)(this[this.tablemodel_parameter.row_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'row_id\' in table \'model_parameter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemodel_parameter.row_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Model_infoRow Model_infoRow {
                get {
                    return ((Model_infoRow)(this.GetParentRow(this.Table.ParentRelations["Model_info_model_parameter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Model_info_model_parameter"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tablemodel_parameter.nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tablemodel_parameter.nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istable_nameNull() {
                return this.IsNull(this.tablemodel_parameter.table_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settable_nameNull() {
                this[this.tablemodel_parameter.table_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscol_nameNull() {
                return this.IsNull(this.tablemodel_parameter.col_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcol_nameNull() {
                this[this.tablemodel_parameter.col_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfilterNull() {
                return this.IsNull(this.tablemodel_parameter.filterColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfilterNull() {
                this[this.tablemodel_parameter.filterColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isidentity_rowNull() {
                return this.IsNull(this.tablemodel_parameter.identity_rowColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setidentity_rowNull() {
                this[this.tablemodel_parameter.identity_rowColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrow_idNull() {
                return this.IsNull(this.tablemodel_parameter.row_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrow_idNull() {
                this[this.tablemodel_parameter.row_idColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class productRow : System.Data.DataRow {
            
            private productDataTable tableproduct;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal productRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableproduct = ((productDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int model_id {
                get {
                    return ((int)(this[this.tableproduct.model_idColumn]));
                }
                set {
                    this[this.tableproduct.model_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int product_id {
                get {
                    return ((int)(this[this.tableproduct.product_idColumn]));
                }
                set {
                    this[this.tableproduct.product_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string product_name {
                get {
                    try {
                        return ((string)(this[this.tableproduct.product_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'product_name\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.product_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int brand_id {
                get {
                    return ((int)(this[this.tableproduct.brand_idColumn]));
                }
                set {
                    this[this.tableproduct.brand_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string product_base_name {
                get {
                    try {
                        return ((string)(this[this.tableproduct.product_base_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'product_base_name\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.product_base_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    return ((string)(this[this.tableproduct.typeColumn]));
                }
                set {
                    this[this.tableproduct.typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string product_group {
                get {
                    return ((string)(this[this.tableproduct.product_groupColumn]));
                }
                set {
                    this[this.tableproduct.product_groupColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string related_group {
                get {
                    return ((string)(this[this.tableproduct.related_groupColumn]));
                }
                set {
                    this[this.tableproduct.related_groupColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string percent_relation {
                get {
                    return ((string)(this[this.tableproduct.percent_relationColumn]));
                }
                set {
                    this[this.tableproduct.percent_relationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double cost {
                get {
                    try {
                        return ((double)(this[this.tableproduct.costColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'cost\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.costColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double initial_dislike_probability {
                get {
                    try {
                        return ((double)(this[this.tableproduct.initial_dislike_probabilityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'initial_dislike_probability\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.initial_dislike_probabilityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double repeat_like_probability {
                get {
                    try {
                        return ((double)(this[this.tableproduct.repeat_like_probabilityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'repeat_like_probability\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.repeat_like_probabilityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string color {
                get {
                    try {
                        return ((string)(this[this.tableproduct.colorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'color\' in table \'product\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproduct.colorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int product_type {
                get {
                    return ((int)(this[this.tableproduct.product_typeColumn]));
                }
                set {
                    this[this.tableproduct.product_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Model_infoRow Model_infoRow {
                get {
                    return ((Model_infoRow)(this.GetParentRow(this.Table.ParentRelations["Model_info_product"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Model_info_product"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isproduct_nameNull() {
                return this.IsNull(this.tableproduct.product_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setproduct_nameNull() {
                this[this.tableproduct.product_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isproduct_base_nameNull() {
                return this.IsNull(this.tableproduct.product_base_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setproduct_base_nameNull() {
                this[this.tableproduct.product_base_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscostNull() {
                return this.IsNull(this.tableproduct.costColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcostNull() {
                this[this.tableproduct.costColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinitial_dislike_probabilityNull() {
                return this.IsNull(this.tableproduct.initial_dislike_probabilityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinitial_dislike_probabilityNull() {
                this[this.tableproduct.initial_dislike_probabilityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrepeat_like_probabilityNull() {
                return this.IsNull(this.tableproduct.repeat_like_probabilityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrepeat_like_probabilityNull() {
                this[this.tableproduct.repeat_like_probabilityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscolorNull() {
                return this.IsNull(this.tableproduct.colorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcolorNull() {
                this[this.tableproduct.colorColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class simulationRow : System.Data.DataRow {
            
            private simulationDataTable tablesimulation;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal simulationRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesimulation = ((simulationDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tablesimulation.idColumn]));
                }
                set {
                    this[this.tablesimulation.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tablesimulation.nameColumn]));
                }
                set {
                    this[this.tablesimulation.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descr {
                get {
                    return ((string)(this[this.tablesimulation.descrColumn]));
                }
                set {
                    this[this.tablesimulation.descrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte type {
                get {
                    return ((byte)(this[this.tablesimulation.typeColumn]));
                }
                set {
                    this[this.tablesimulation.typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime start_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablesimulation.start_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'start_date\' in table \'simulation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesimulation.start_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime end_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablesimulation.end_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'end_date\' in table \'simulation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesimulation.end_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool queued {
                get {
                    try {
                        return ((bool)(this[this.tablesimulation.queuedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'queued\' in table \'simulation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesimulation.queuedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sim_num {
                get {
                    try {
                        return ((int)(this[this.tablesimulation.sim_numColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'sim_num\' in table \'simulation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesimulation.sim_numColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool locked {
                get {
                    try {
                        return ((bool)(this[this.tablesimulation.lockedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'locked\' in table \'simulation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesimulation.lockedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime metric_start_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablesimulation.metric_start_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'metric_start_date\' in table \'simulation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesimulation.metric_start_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime metric_end_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablesimulation.metric_end_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'metric_end_date\' in table \'simulation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesimulation.metric_end_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool delete_std_results {
                get {
                    try {
                        return ((bool)(this[this.tablesimulation.delete_std_resultsColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'delete_std_results\' in table \'simulation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesimulation.delete_std_resultsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string control_string {
                get {
                    try {
                        return ((string)(this[this.tablesimulation.control_stringColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'control_string\' in table \'simulation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesimulation.control_stringColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int access_time {
                get {
                    try {
                        return ((int)(this[this.tablesimulation.access_timeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'access_time\' in table \'simulation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesimulation.access_timeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_name {
                get {
                    try {
                        return ((string)(this[this.tablesimulation.user_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'user_name\' in table \'simulation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesimulation.user_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool saved {
                get {
                    try {
                        return ((bool)(this[this.tablesimulation.savedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'saved\' in table \'simulation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesimulation.savedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double scale_factor {
                get {
                    return ((double)(this[this.tablesimulation.scale_factorColumn]));
                }
                set {
                    this[this.tablesimulation.scale_factorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scenario_id {
                get {
                    try {
                        return ((int)(this[this.tablesimulation.scenario_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'scenario_id\' in table \'simulation\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesimulation.scenario_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenarioRow scenarioRow {
                get {
                    return ((scenarioRow)(this.GetParentRow(this.Table.ParentRelations["scenario_simulation"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenario_simulation"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstart_dateNull() {
                return this.IsNull(this.tablesimulation.start_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstart_dateNull() {
                this[this.tablesimulation.start_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isend_dateNull() {
                return this.IsNull(this.tablesimulation.end_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setend_dateNull() {
                this[this.tablesimulation.end_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsqueuedNull() {
                return this.IsNull(this.tablesimulation.queuedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetqueuedNull() {
                this[this.tablesimulation.queuedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issim_numNull() {
                return this.IsNull(this.tablesimulation.sim_numColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsim_numNull() {
                this[this.tablesimulation.sim_numColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslockedNull() {
                return this.IsNull(this.tablesimulation.lockedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlockedNull() {
                this[this.tablesimulation.lockedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetric_start_dateNull() {
                return this.IsNull(this.tablesimulation.metric_start_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetric_start_dateNull() {
                this[this.tablesimulation.metric_start_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismetric_end_dateNull() {
                return this.IsNull(this.tablesimulation.metric_end_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmetric_end_dateNull() {
                this[this.tablesimulation.metric_end_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdelete_std_resultsNull() {
                return this.IsNull(this.tablesimulation.delete_std_resultsColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdelete_std_resultsNull() {
                this[this.tablesimulation.delete_std_resultsColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscontrol_stringNull() {
                return this.IsNull(this.tablesimulation.control_stringColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcontrol_stringNull() {
                this[this.tablesimulation.control_stringColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isaccess_timeNull() {
                return this.IsNull(this.tablesimulation.access_timeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setaccess_timeNull() {
                this[this.tablesimulation.access_timeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_nameNull() {
                return this.IsNull(this.tablesimulation.user_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_nameNull() {
                this[this.tablesimulation.user_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssavedNull() {
                return this.IsNull(this.tablesimulation.savedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsavedNull() {
                this[this.tablesimulation.savedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscenario_idNull() {
                return this.IsNull(this.tablesimulation.scenario_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscenario_idNull() {
                this[this.tablesimulation.scenario_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_metricRow[] Getscenario_metricRows() {
                return ((scenario_metricRow[])(base.GetChildRows(this.Table.ChildRelations["scenarioscenario_metric"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_simseedRow[] Getscenario_simseedRows() {
                return ((scenario_simseedRow[])(base.GetChildRows(this.Table.ChildRelations["scenarioscenario_simseed"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_parameterRow[] Getscenario_parameterRows() {
                return ((scenario_parameterRow[])(base.GetChildRows(this.Table.ChildRelations["scenarioscenario_parameter"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_variableRow[] Getscenario_variableRows() {
                return ((scenario_variableRow[])(base.GetChildRows(this.Table.ChildRelations["scenarioscenario_variable"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_queueRow[] Getsim_queueRows() {
                return ((sim_queueRow[])(base.GetChildRows(this.Table.ChildRelations["scenariosim_queue"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sim_queueRow : System.Data.DataRow {
            
            private sim_queueDataTable tablesim_queue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sim_queueRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesim_queue = ((sim_queueDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int run_id {
                get {
                    return ((int)(this[this.tablesim_queue.run_idColumn]));
                }
                set {
                    this[this.tablesim_queue.run_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sim_id {
                get {
                    return ((int)(this[this.tablesim_queue.sim_idColumn]));
                }
                set {
                    this[this.tablesim_queue.sim_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte status {
                get {
                    return ((byte)(this[this.tablesim_queue.statusColumn]));
                }
                set {
                    this[this.tablesim_queue.statusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int num {
                get {
                    return ((int)(this[this.tablesim_queue.numColumn]));
                }
                set {
                    this[this.tablesim_queue.numColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int model_id {
                get {
                    return ((int)(this[this.tablesim_queue.model_idColumn]));
                }
                set {
                    this[this.tablesim_queue.model_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablesim_queue.nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'name\' in table \'sim_queue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int elapsed_time {
                get {
                    try {
                        return ((int)(this[this.tablesim_queue.elapsed_timeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'elapsed_time\' in table \'sim_queue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.elapsed_timeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string current_status {
                get {
                    try {
                        return ((string)(this[this.tablesim_queue.current_statusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'current_status\' in table \'sim_queue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.current_statusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime current_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablesim_queue.current_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'current_date\' in table \'sim_queue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.current_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime run_time {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablesim_queue.run_timeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'run_time\' in table \'sim_queue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.run_timeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int seed {
                get {
                    try {
                        return ((int)(this[this.tablesim_queue.seedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'seed\' in table \'sim_queue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.seedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int param_id {
                get {
                    try {
                        return ((int)(this[this.tablesim_queue.param_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'param_id\' in table \'sim_queue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.param_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_statusRow sim_statusRow {
                get {
                    return ((sim_statusRow)(this.GetParentRow(this.Table.ParentRelations["sim_statussim_queue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["sim_statussim_queue"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public simulationRow scenarioRow {
                get {
                    return ((simulationRow)(this.GetParentRow(this.Table.ParentRelations["scenariosim_queue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenariosim_queue"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Model_infoRow Model_infoRow {
                get {
                    return ((Model_infoRow)(this.GetParentRow(this.Table.ParentRelations["Model_infosim_queue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Model_infosim_queue"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tablesim_queue.nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tablesim_queue.nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iselapsed_timeNull() {
                return this.IsNull(this.tablesim_queue.elapsed_timeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setelapsed_timeNull() {
                this[this.tablesim_queue.elapsed_timeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscurrent_statusNull() {
                return this.IsNull(this.tablesim_queue.current_statusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcurrent_statusNull() {
                this[this.tablesim_queue.current_statusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscurrent_dateNull() {
                return this.IsNull(this.tablesim_queue.current_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcurrent_dateNull() {
                this[this.tablesim_queue.current_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrun_timeNull() {
                return this.IsNull(this.tablesim_queue.run_timeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrun_timeNull() {
                this[this.tablesim_queue.run_timeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsseedNull() {
                return this.IsNull(this.tablesim_queue.seedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetseedNull() {
                this[this.tablesim_queue.seedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isparam_idNull() {
                return this.IsNull(this.tablesim_queue.param_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setparam_idNull() {
                this[this.tablesim_queue.param_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_variable_valueRow[] Getsim_variable_valueRows() {
                return ((sim_variable_valueRow[])(base.GetChildRows(this.Table.ChildRelations["sim_queuesim_variable_value"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sim_statusRow : System.Data.DataRow {
            
            private sim_statusDataTable tablesim_status;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sim_statusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesim_status = ((sim_statusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte status_id {
                get {
                    return ((byte)(this[this.tablesim_status.status_idColumn]));
                }
                set {
                    this[this.tablesim_status.status_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    return ((string)(this[this.tablesim_status.statusColumn]));
                }
                set {
                    this[this.tablesim_status.statusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_queueRow[] Getsim_queueRows() {
                return ((sim_queueRow[])(base.GetChildRows(this.Table.ChildRelations["sim_statussim_queue"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class projectRow : System.Data.DataRow {
            
            private projectDataTable tableproject;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal projectRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableproject = ((projectDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableproject.idColumn]));
                }
                set {
                    this[this.tableproject.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableproject.nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'name\' in table \'project\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproject.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descr {
                get {
                    try {
                        return ((string)(this[this.tableproject.descrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'descr\' in table \'project\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproject.descrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime created {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableproject.createdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'created\' in table \'project\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproject.createdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime modified {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableproject.modifiedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'modified\' in table \'project\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproject.modifiedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool read_only {
                get {
                    return ((bool)(this[this.tableproject.read_onlyColumn]));
                }
                set {
                    this[this.tableproject.read_onlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool locked {
                get {
                    return ((bool)(this[this.tableproject.lockedColumn]));
                }
                set {
                    this[this.tableproject.lockedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableproject.nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableproject.nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescrNull() {
                return this.IsNull(this.tableproject.descrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescrNull() {
                this[this.tableproject.descrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscreatedNull() {
                return this.IsNull(this.tableproject.createdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcreatedNull() {
                this[this.tableproject.createdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodifiedNull() {
                return this.IsNull(this.tableproject.modifiedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodifiedNull() {
                this[this.tableproject.modifiedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Model_infoRow[] GetModel_infoRowsByproject_Model_info() {
                return ((Model_infoRow[])(base.GetChildRows(this.Table.ChildRelations["project_Model_info"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Model_infoRow[] GetModel_infoRowsByprojectModel_info() {
                return ((Model_infoRow[])(base.GetChildRows(this.Table.ChildRelations["projectModel_info"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Model_infoRow : System.Data.DataRow {
            
            private Model_infoDataTable tableModel_info;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Model_infoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModel_info = ((Model_infoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int model_id {
                get {
                    return ((int)(this[this.tableModel_info.model_idColumn]));
                }
                set {
                    this[this.tableModel_info.model_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int project_id {
                get {
                    return ((int)(this[this.tableModel_info.project_idColumn]));
                }
                set {
                    this[this.tableModel_info.project_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string model_name {
                get {
                    try {
                        return ((string)(this[this.tableModel_info.model_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'model_name\' in table \'Model_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.model_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int model_type {
                get {
                    return ((int)(this[this.tableModel_info.model_typeColumn]));
                }
                set {
                    this[this.tableModel_info.model_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descr {
                get {
                    try {
                        return ((string)(this[this.tableModel_info.descrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'descr\' in table \'Model_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.descrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool read_only {
                get {
                    return ((bool)(this[this.tableModel_info.read_onlyColumn]));
                }
                set {
                    this[this.tableModel_info.read_onlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool locked {
                get {
                    return ((bool)(this[this.tableModel_info.lockedColumn]));
                }
                set {
                    this[this.tableModel_info.lockedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime created {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableModel_info.createdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'created\' in table \'Model_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.createdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime modified {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableModel_info.modifiedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'modified\' in table \'Model_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.modifiedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime start_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableModel_info.start_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'start_date\' in table \'Model_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.start_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime end_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableModel_info.end_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'end_date\' in table \'Model_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.end_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool task_based {
                get {
                    return ((bool)(this[this.tableModel_info.task_basedColumn]));
                }
                set {
                    this[this.tableModel_info.task_basedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool profit_loss {
                get {
                    return ((bool)(this[this.tableModel_info.profit_lossColumn]));
                }
                set {
                    this[this.tableModel_info.profit_lossColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool product_extensions {
                get {
                    return ((bool)(this[this.tableModel_info.product_extensionsColumn]));
                }
                set {
                    this[this.tableModel_info.product_extensionsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool product_dependency {
                get {
                    return ((bool)(this[this.tableModel_info.product_dependencyColumn]));
                }
                set {
                    this[this.tableModel_info.product_dependencyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool segment_growth {
                get {
                    return ((bool)(this[this.tableModel_info.segment_growthColumn]));
                }
                set {
                    this[this.tableModel_info.segment_growthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool consumer_budget {
                get {
                    return ((bool)(this[this.tableModel_info.consumer_budgetColumn]));
                }
                set {
                    this[this.tableModel_info.consumer_budgetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool periodic_price {
                get {
                    return ((bool)(this[this.tableModel_info.periodic_priceColumn]));
                }
                set {
                    this[this.tableModel_info.periodic_priceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool promoted_price {
                get {
                    return ((bool)(this[this.tableModel_info.promoted_priceColumn]));
                }
                set {
                    this[this.tableModel_info.promoted_priceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool distribution {
                get {
                    return ((bool)(this[this.tableModel_info.distributionColumn]));
                }
                set {
                    this[this.tableModel_info.distributionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool display {
                get {
                    return ((bool)(this[this.tableModel_info.displayColumn]));
                }
                set {
                    this[this.tableModel_info.displayColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool social_network {
                get {
                    return ((bool)(this[this.tableModel_info.social_networkColumn]));
                }
                set {
                    this[this.tableModel_info.social_networkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool attribute_pre_and_post {
                get {
                    try {
                        return ((bool)(this[this.tableModel_info.attribute_pre_and_postColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'attribute_pre_and_post\' in table \'Model_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.attribute_pre_and_postColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string app_code {
                get {
                    try {
                        return ((string)(this[this.tableModel_info.app_codeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'app_code\' in table \'Model_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.app_codeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool market_utility {
                get {
                    try {
                        return ((bool)(this[this.tableModel_info.market_utilityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'market_utility\' in table \'Model_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.market_utilityColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string checkpoint_file {
                get {
                    try {
                        return ((string)(this[this.tableModel_info.checkpoint_fileColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'checkpoint_file\' in table \'Model_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.checkpoint_fileColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime checkpoint_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableModel_info.checkpoint_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'checkpoint_date\' in table \'Model_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.checkpoint_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool checkpoint_valid {
                get {
                    try {
                        return ((bool)(this[this.tableModel_info.checkpoint_validColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'checkpoint_valid\' in table \'Model_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.checkpoint_validColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    try {
                        return ((int)(this[this.tableModel_info.idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'id\' in table \'Model_info\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pop_size {
                get {
                    return ((int)(this[this.tableModel_info.pop_sizeColumn]));
                }
                set {
                    this[this.tableModel_info.pop_sizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectRow projectRowByproject_Model_info {
                get {
                    return ((projectRow)(this.GetParentRow(this.Table.ParentRelations["project_Model_info"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["project_Model_info"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectRow projectRowByprojectModel_info {
                get {
                    return ((projectRow)(this.GetParentRow(this.Table.ParentRelations["projectModel_info"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["projectModel_info"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismodel_nameNull() {
                return this.IsNull(this.tableModel_info.model_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmodel_nameNull() {
                this[this.tableModel_info.model_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescrNull() {
                return this.IsNull(this.tableModel_info.descrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescrNull() {
                this[this.tableModel_info.descrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscreatedNull() {
                return this.IsNull(this.tableModel_info.createdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcreatedNull() {
                this[this.tableModel_info.createdColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmodifiedNull() {
                return this.IsNull(this.tableModel_info.modifiedColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmodifiedNull() {
                this[this.tableModel_info.modifiedColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstart_dateNull() {
                return this.IsNull(this.tableModel_info.start_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstart_dateNull() {
                this[this.tableModel_info.start_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isend_dateNull() {
                return this.IsNull(this.tableModel_info.end_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setend_dateNull() {
                this[this.tableModel_info.end_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isattribute_pre_and_postNull() {
                return this.IsNull(this.tableModel_info.attribute_pre_and_postColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setattribute_pre_and_postNull() {
                this[this.tableModel_info.attribute_pre_and_postColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isapp_codeNull() {
                return this.IsNull(this.tableModel_info.app_codeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setapp_codeNull() {
                this[this.tableModel_info.app_codeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismarket_utilityNull() {
                return this.IsNull(this.tableModel_info.market_utilityColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmarket_utilityNull() {
                this[this.tableModel_info.market_utilityColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischeckpoint_fileNull() {
                return this.IsNull(this.tableModel_info.checkpoint_fileColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcheckpoint_fileNull() {
                this[this.tableModel_info.checkpoint_fileColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischeckpoint_dateNull() {
                return this.IsNull(this.tableModel_info.checkpoint_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcheckpoint_dateNull() {
                this[this.tableModel_info.checkpoint_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ischeckpoint_validNull() {
                return this.IsNull(this.tableModel_info.checkpoint_validColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcheckpoint_validNull() {
                this[this.tableModel_info.checkpoint_validColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tableModel_info.idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tableModel_info.idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_queueRow[] Getsim_queueRows() {
                return ((sim_queueRow[])(base.GetChildRows(this.Table.ChildRelations["Model_infosim_queue"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenarioRow[] GetscenarioRows() {
                return ((scenarioRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Model_info_scenario"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public model_parameterRow[] Getmodel_parameterRows() {
                return ((model_parameterRow[])(base.GetChildRows(this.Table.ChildRelations["Model_info_model_parameter"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow[] GetproductRows() {
                return ((productRow[])(base.GetChildRows(this.Table.ChildRelations["Model_info_product"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sim_variable_valueRow : System.Data.DataRow {
            
            private sim_variable_valueDataTable tablesim_variable_value;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sim_variable_valueRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesim_variable_value = ((sim_variable_valueDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int run_id {
                get {
                    return ((int)(this[this.tablesim_variable_value.run_idColumn]));
                }
                set {
                    this[this.tablesim_variable_value.run_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int var_id {
                get {
                    return ((int)(this[this.tablesim_variable_value.var_idColumn]));
                }
                set {
                    this[this.tablesim_variable_value.var_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double val {
                get {
                    return ((double)(this[this.tablesim_variable_value.valColumn]));
                }
                set {
                    this[this.tablesim_variable_value.valColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_queueRow sim_queueRow {
                get {
                    return ((sim_queueRow)(this.GetParentRow(this.Table.ParentRelations["sim_queuesim_variable_value"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["sim_queuesim_variable_value"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_variableRow scenario_variableRow {
                get {
                    return ((scenario_variableRow)(this.GetParentRow(this.Table.ParentRelations["scenario_variablesim_variable_value"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenario_variablesim_variable_value"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class scenario_variableRow : System.Data.DataRow {
            
            private scenario_variableDataTable tablescenario_variable;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scenario_variableRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablescenario_variable = ((scenario_variableDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scenario_id {
                get {
                    return ((int)(this[this.tablescenario_variable.scenario_idColumn]));
                }
                set {
                    this[this.tablescenario_variable.scenario_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sim_id {
                get {
                    return ((int)(this[this.tablescenario_variable.sim_idColumn]));
                }
                set {
                    this[this.tablescenario_variable.sim_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string token {
                get {
                    try {
                        return ((string)(this[this.tablescenario_variable.tokenColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'token\' in table \'scenario_variable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario_variable.tokenColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descr {
                get {
                    try {
                        return ((string)(this[this.tablescenario_variable.descrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'descr\' in table \'scenario_variable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario_variable.descrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double min {
                get {
                    return ((double)(this[this.tablescenario_variable.minColumn]));
                }
                set {
                    this[this.tablescenario_variable.minColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double max {
                get {
                    return ((double)(this[this.tablescenario_variable.maxColumn]));
                }
                set {
                    this[this.tablescenario_variable.maxColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int num_steps {
                get {
                    return ((int)(this[this.tablescenario_variable.num_stepsColumn]));
                }
                set {
                    this[this.tablescenario_variable.num_stepsColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte type {
                get {
                    try {
                        return ((byte)(this[this.tablescenario_variable.typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'type\' in table \'scenario_variable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario_variable.typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int product_id {
                get {
                    try {
                        return ((int)(this[this.tablescenario_variable.product_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'product_id\' in table \'scenario_variable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario_variable.product_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public simulationRow scenarioRow {
                get {
                    return ((simulationRow)(this.GetParentRow(this.Table.ParentRelations["scenarioscenario_variable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenarioscenario_variable"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstokenNull() {
                return this.IsNull(this.tablescenario_variable.tokenColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettokenNull() {
                this[this.tablescenario_variable.tokenColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescrNull() {
                return this.IsNull(this.tablescenario_variable.descrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescrNull() {
                this[this.tablescenario_variable.descrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tablescenario_variable.typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tablescenario_variable.typeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isproduct_idNull() {
                return this.IsNull(this.tablescenario_variable.product_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setproduct_idNull() {
                this[this.tablescenario_variable.product_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_variable_valueRow[] Getsim_variable_valueRows() {
                return ((sim_variable_valueRow[])(base.GetChildRows(this.Table.ChildRelations["scenario_variablesim_variable_value"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class scenario_parameterRow : System.Data.DataRow {
            
            private scenario_parameterDataTable tablescenario_parameter;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scenario_parameterRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablescenario_parameter = ((scenario_parameterDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sim_id {
                get {
                    return ((int)(this[this.tablescenario_parameter.sim_idColumn]));
                }
                set {
                    this[this.tablescenario_parameter.sim_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int param_id {
                get {
                    return ((int)(this[this.tablescenario_parameter.param_idColumn]));
                }
                set {
                    this[this.tablescenario_parameter.param_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double aValue {
                get {
                    return ((double)(this[this.tablescenario_parameter.aValueColumn]));
                }
                set {
                    this[this.tablescenario_parameter.aValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string expression {
                get {
                    try {
                        return ((string)(this[this.tablescenario_parameter.expressionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'expression\' in table \'scenario_parameter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario_parameter.expressionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public simulationRow scenarioRow {
                get {
                    return ((simulationRow)(this.GetParentRow(this.Table.ParentRelations["scenarioscenario_parameter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenarioscenario_parameter"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsexpressionNull() {
                return this.IsNull(this.tablescenario_parameter.expressionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetexpressionNull() {
                this[this.tablescenario_parameter.expressionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class scenario_simseedRow : System.Data.DataRow {
            
            private scenario_simseedDataTable tablescenario_simseed;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scenario_simseedRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablescenario_simseed = ((scenario_simseedDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sim_id {
                get {
                    return ((int)(this[this.tablescenario_simseed.sim_idColumn]));
                }
                set {
                    this[this.tablescenario_simseed.sim_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tablescenario_simseed.idColumn]));
                }
                set {
                    this[this.tablescenario_simseed.idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int seed {
                get {
                    return ((int)(this[this.tablescenario_simseed.seedColumn]));
                }
                set {
                    this[this.tablescenario_simseed.seedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public simulationRow scenarioRow {
                get {
                    return ((simulationRow)(this.GetParentRow(this.Table.ParentRelations["scenarioscenario_simseed"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenarioscenario_simseed"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class variable_typeRow : System.Data.DataRow {
            
            private variable_typeDataTable tablevariable_type;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal variable_typeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablevariable_type = ((variable_typeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte type_id {
                get {
                    return ((byte)(this[this.tablevariable_type.type_idColumn]));
                }
                set {
                    this[this.tablevariable_type.type_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    return ((string)(this[this.tablevariable_type.typeColumn]));
                }
                set {
                    this[this.tablevariable_type.typeColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class scenario_metricRow : System.Data.DataRow {
            
            private scenario_metricDataTable tablescenario_metric;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scenario_metricRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablescenario_metric = ((scenario_metricDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int sim_id {
                get {
                    return ((int)(this[this.tablescenario_metric.sim_idColumn]));
                }
                set {
                    this[this.tablescenario_metric.sim_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string token {
                get {
                    return ((string)(this[this.tablescenario_metric.tokenColumn]));
                }
                set {
                    this[this.tablescenario_metric.tokenColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public simulationRow scenarioRow {
                get {
                    return ((simulationRow)(this.GetParentRow(this.Table.ParentRelations["scenarioscenario_metric"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenarioscenario_metric"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class scenarioRow : System.Data.DataRow {
            
            private scenarioDataTable tablescenario;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal scenarioRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablescenario = ((scenarioDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scenario_id {
                get {
                    try {
                        return ((int)(this[this.tablescenario.scenario_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'scenario_id\' in table \'scenario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.scenario_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int model_id {
                get {
                    try {
                        return ((int)(this[this.tablescenario.model_idColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'model_id\' in table \'scenario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.model_idColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablescenario.nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'name\' in table \'scenario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descr {
                get {
                    try {
                        return ((string)(this[this.tablescenario.descrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'descr\' in table \'scenario\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.descrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Model_infoRow Model_infoRow {
                get {
                    return ((Model_infoRow)(this.GetParentRow(this.Table.ParentRelations["FK_Model_info_scenario"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Model_info_scenario"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscenario_idNull() {
                return this.IsNull(this.tablescenario.scenario_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscenario_idNull() {
                this[this.tablescenario.scenario_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismodel_idNull() {
                return this.IsNull(this.tablescenario.model_idColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmodel_idNull() {
                this[this.tablescenario.model_idColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tablescenario.nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tablescenario.nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescrNull() {
                return this.IsNull(this.tablescenario.descrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescrNull() {
                this[this.tablescenario.descrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public simulationRow[] GetsimulationRows() {
                return ((simulationRow[])(base.GetChildRows(this.Table.ChildRelations["scenario_simulation"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class model_parameterRowChangeEvent : System.EventArgs {
            
            private model_parameterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public model_parameterRowChangeEvent(model_parameterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public model_parameterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class productRowChangeEvent : System.EventArgs {
            
            private productRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRowChangeEvent(productRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public productRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class simulationRowChangeEvent : System.EventArgs {
            
            private simulationRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public simulationRowChangeEvent(simulationRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public simulationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sim_queueRowChangeEvent : System.EventArgs {
            
            private sim_queueRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_queueRowChangeEvent(sim_queueRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_queueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sim_statusRowChangeEvent : System.EventArgs {
            
            private sim_statusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_statusRowChangeEvent(sim_statusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_statusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class projectRowChangeEvent : System.EventArgs {
            
            private projectRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectRowChangeEvent(projectRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public projectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Model_infoRowChangeEvent : System.EventArgs {
            
            private Model_infoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Model_infoRowChangeEvent(Model_infoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Model_infoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sim_variable_valueRowChangeEvent : System.EventArgs {
            
            private sim_variable_valueRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_variable_valueRowChangeEvent(sim_variable_valueRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sim_variable_valueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class scenario_variableRowChangeEvent : System.EventArgs {
            
            private scenario_variableRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_variableRowChangeEvent(scenario_variableRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_variableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class scenario_parameterRowChangeEvent : System.EventArgs {
            
            private scenario_parameterRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_parameterRowChangeEvent(scenario_parameterRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_parameterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class scenario_simseedRowChangeEvent : System.EventArgs {
            
            private scenario_simseedRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_simseedRowChangeEvent(scenario_simseedRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_simseedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class variable_typeRowChangeEvent : System.EventArgs {
            
            private variable_typeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public variable_typeRowChangeEvent(variable_typeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public variable_typeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class scenario_metricRowChangeEvent : System.EventArgs {
            
            private scenario_metricRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_metricRowChangeEvent(scenario_metricRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenario_metricRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class scenarioRowChangeEvent : System.EventArgs {
            
            private scenarioRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenarioRowChangeEvent(scenarioRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public scenarioRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace MrktSimDb.ModelInfoTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class model_parameterTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public model_parameterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "model_parameter";
            tableMapping.ColumnMappings.Add("model_id", "model_id");
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("table_name", "table_name");
            tableMapping.ColumnMappings.Add("col_name", "col_name");
            tableMapping.ColumnMappings.Add("filter", "filter");
            tableMapping.ColumnMappings.Add("identity_row", "identity_row");
            tableMapping.ColumnMappings.Add("row_id", "row_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[model_parameter] WHERE (([model_id] = @Original_model_id) AND ([id] = @Original_id) AND ((@IsNull_name = 1 AND [name] IS NULL) OR ([name] = @Original_name)) AND ((@IsNull_table_name = 1 AND [table_name] IS NULL) OR ([table_name] = @Original_table_name)) AND ((@IsNull_col_name = 1 AND [col_name] IS NULL) OR ([col_name] = @Original_col_name)) AND ((@IsNull_filter = 1 AND [filter] IS NULL) OR ([filter] = @Original_filter)) AND ((@IsNull_identity_row = 1 AND [identity_row] IS NULL) OR ([identity_row] = @Original_identity_row)) AND ((@IsNull_row_id = 1 AND [row_id] IS NULL) OR ([row_id] = @Original_row_id)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_model_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "model_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_table_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "table_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_table_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "table_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_col_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "col_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_col_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "col_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_filter", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "filter", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_filter", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "filter", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_identity_row", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "identity_row", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_identity_row", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "identity_row", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_row_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "row_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_row_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "row_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[model_parameter] ([model_id], [name], [table_name], [col_name], [filter], [identity_row], [row_id]) VALUES (@model_id, @name, @table_name, @col_name, @filter, @identity_row, @row_id);
SELECT model_id, id, name, table_name, col_name, filter, identity_row, row_id FROM model_parameter WHERE (id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@model_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "model_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@table_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "table_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@col_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "col_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@filter", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "filter", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@identity_row", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "identity_row", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@row_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "row_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[model_parameter] SET [model_id] = @model_id, [name] = @name, [table_name] = @table_name, [col_name] = @col_name, [filter] = @filter, [identity_row] = @identity_row, [row_id] = @row_id WHERE (([model_id] = @Original_model_id) AND ([id] = @Original_id) AND ((@IsNull_name = 1 AND [name] IS NULL) OR ([name] = @Original_name)) AND ((@IsNull_table_name = 1 AND [table_name] IS NULL) OR ([table_name] = @Original_table_name)) AND ((@IsNull_col_name = 1 AND [col_name] IS NULL) OR ([col_name] = @Original_col_name)) AND ((@IsNull_filter = 1 AND [filter] IS NULL) OR ([filter] = @Original_filter)) AND ((@IsNull_identity_row = 1 AND [identity_row] IS NULL) OR ([identity_row] = @Original_identity_row)) AND ((@IsNull_row_id = 1 AND [row_id] IS NULL) OR ([row_id] = @Original_row_id)));
SELECT model_id, id, name, table_name, col_name, filter, identity_row, row_id FROM model_parameter WHERE (id = @id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@model_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "model_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@table_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "table_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@col_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "col_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@filter", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "filter", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@identity_row", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "identity_row", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@row_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "row_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_model_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "model_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_table_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "table_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_table_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "table_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_col_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "col_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_col_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "col_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_filter", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "filter", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_filter", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "filter", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_identity_row", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "identity_row", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_identity_row", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "identity_row", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_row_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "row_id", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_row_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "row_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MrktSimDb.Properties.Settings.Default.test22ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT model_id, id, name, table_name, col_name, filter, identity_row, row_id FRO" +
                "M dbo.model_parameter";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ModelInfo.model_parameterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ModelInfo.model_parameterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ModelInfo.model_parameterDataTable dataTable = new ModelInfo.model_parameterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelInfo.model_parameterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelInfo dataSet) {
            return this.Adapter.Update(dataSet, "model_parameter");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_model_id, int Original_id, string Original_name, string Original_table_name, string Original_col_name, string Original_filter, string Original_identity_row, System.Nullable<int> Original_row_id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_model_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_id));
            if ((Original_name == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_name));
            }
            if ((Original_table_name == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_table_name));
            }
            if ((Original_col_name == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_col_name));
            }
            if ((Original_filter == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_filter));
            }
            if ((Original_identity_row == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_identity_row));
            }
            if ((Original_row_id.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((int)(Original_row_id.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int model_id, string name, string table_name, string col_name, string filter, string identity_row, System.Nullable<int> row_id) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(model_id));
            if ((name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(name));
            }
            if ((table_name == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(table_name));
            }
            if ((col_name == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(col_name));
            }
            if ((filter == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(filter));
            }
            if ((identity_row == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(identity_row));
            }
            if ((row_id.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(row_id.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int model_id, 
                    string name, 
                    string table_name, 
                    string col_name, 
                    string filter, 
                    string identity_row, 
                    System.Nullable<int> row_id, 
                    int Original_model_id, 
                    int Original_id, 
                    string Original_name, 
                    string Original_table_name, 
                    string Original_col_name, 
                    string Original_filter, 
                    string Original_identity_row, 
                    System.Nullable<int> Original_row_id, 
                    int id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(model_id));
            if ((name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(name));
            }
            if ((table_name == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(table_name));
            }
            if ((col_name == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(col_name));
            }
            if ((filter == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(filter));
            }
            if ((identity_row == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(identity_row));
            }
            if ((row_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(row_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_model_id));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_id));
            if ((Original_name == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_name));
            }
            if ((Original_table_name == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_table_name));
            }
            if ((Original_col_name == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_col_name));
            }
            if ((Original_filter == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_filter));
            }
            if ((Original_identity_row == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_identity_row));
            }
            if ((Original_row_id.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_row_id.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class productTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public productTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "product";
            tableMapping.ColumnMappings.Add("model_id", "model_id");
            tableMapping.ColumnMappings.Add("product_id", "product_id");
            tableMapping.ColumnMappings.Add("product_name", "product_name");
            tableMapping.ColumnMappings.Add("brand_id", "brand_id");
            tableMapping.ColumnMappings.Add("product_base_name", "product_base_name");
            tableMapping.ColumnMappings.Add("type", "type");
            tableMapping.ColumnMappings.Add("product_group", "product_group");
            tableMapping.ColumnMappings.Add("related_group", "related_group");
            tableMapping.ColumnMappings.Add("percent_relation", "percent_relation");
            tableMapping.ColumnMappings.Add("cost", "cost");
            tableMapping.ColumnMappings.Add("initial_dislike_probability", "initial_dislike_probability");
            tableMapping.ColumnMappings.Add("repeat_like_probability", "repeat_like_probability");
            tableMapping.ColumnMappings.Add("color", "color");
            tableMapping.ColumnMappings.Add("product_type", "product_type");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[product] WHERE (([model_id] = @Original_model_id) AND ([product_id] = @Original_product_id) AND ((@IsNull_product_name = 1 AND [product_name] IS NULL) OR ([product_name] = @Original_product_name)) AND ([brand_id] = @Original_brand_id) AND ((@IsNull_product_base_name = 1 AND [product_base_name] IS NULL) OR ([product_base_name] = @Original_product_base_name)) AND ([type] = @Original_type) AND ([product_group] = @Original_product_group) AND ([related_group] = @Original_related_group) AND ([percent_relation] = @Original_percent_relation) AND ((@IsNull_cost = 1 AND [cost] IS NULL) OR ([cost] = @Original_cost)) AND ((@IsNull_initial_dislike_probability = 1 AND [initial_dislike_probability] IS NULL) OR ([initial_dislike_probability] = @Original_initial_dislike_probability)) AND ((@IsNull_repeat_like_probability = 1 AND [repeat_like_probability] IS NULL) OR ([repeat_like_probability] = @Original_repeat_like_probability)) AND ((@IsNull_color = 1 AND [color] IS NULL) OR ([color] = @Original_color)) AND ([product_type] = @Original_product_type))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_model_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "model_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_product_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "product_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_product_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "product_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_product_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "product_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_brand_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "brand_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_product_base_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "product_base_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_product_base_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "product_base_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_type", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "type", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_product_group", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "product_group", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_related_group", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "related_group", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_percent_relation", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "percent_relation", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_cost", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "cost", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_cost", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "cost", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_initial_dislike_probability", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "initial_dislike_probability", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_initial_dislike_probability", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "initial_dislike_probability", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_repeat_like_probability", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "repeat_like_probability", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_repeat_like_probability", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "repeat_like_probability", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_color", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "color", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_color", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "color", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_product_type", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "product_type", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[product] ([model_id], [product_name], [brand_id], [product_base_name], [type], [product_group], [related_group], [percent_relation], [cost], [initial_dislike_probability], [repeat_like_probability], [color], [product_type]) VALUES (@model_id, @product_name, @brand_id, @product_base_name, @type, @product_group, @related_group, @percent_relation, @cost, @initial_dislike_probability, @repeat_like_probability, @color, @product_type);
SELECT model_id, product_id, product_name, brand_id, product_base_name, type, product_group, related_group, percent_relation, cost, initial_dislike_probability, repeat_like_probability, color, product_type FROM product WHERE (product_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@model_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "model_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@product_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "product_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@brand_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "brand_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@product_base_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "product_base_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@type", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "type", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@product_group", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "product_group", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@related_group", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "related_group", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@percent_relation", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "percent_relation", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@cost", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "cost", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@initial_dislike_probability", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "initial_dislike_probability", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@repeat_like_probability", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "repeat_like_probability", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@color", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "color", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@product_type", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "product_type", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[product] SET [model_id] = @model_id, [product_name] = @product_name" +
                ", [brand_id] = @brand_id, [product_base_name] = @product_base_name, [type] = @ty" +
                "pe, [product_group] = @product_group, [related_group] = @related_group, [percent" +
                "_relation] = @percent_relation, [cost] = @cost, [initial_dislike_probability] = " +
                "@initial_dislike_probability, [repeat_like_probability] = @repeat_like_probabili" +
                "ty, [color] = @color, [product_type] = @product_type WHERE (([model_id] = @Origi" +
                "nal_model_id) AND ([product_id] = @Original_product_id) AND ((@IsNull_product_na" +
                "me = 1 AND [product_name] IS NULL) OR ([product_name] = @Original_product_name))" +
                " AND ([brand_id] = @Original_brand_id) AND ((@IsNull_product_base_name = 1 AND [" +
                "product_base_name] IS NULL) OR ([product_base_name] = @Original_product_base_nam" +
                "e)) AND ([type] = @Original_type) AND ([product_group] = @Original_product_group" +
                ") AND ([related_group] = @Original_related_group) AND ([percent_relation] = @Ori" +
                "ginal_percent_relation) AND ((@IsNull_cost = 1 AND [cost] IS NULL) OR ([cost] = " +
                "@Original_cost)) AND ((@IsNull_initial_dislike_probability = 1 AND [initial_disl" +
                "ike_probability] IS NULL) OR ([initial_dislike_probability] = @Original_initial_" +
                "dislike_probability)) AND ((@IsNull_repeat_like_probability = 1 AND [repeat_like" +
                "_probability] IS NULL) OR ([repeat_like_probability] = @Original_repeat_like_pro" +
                "bability)) AND ((@IsNull_color = 1 AND [color] IS NULL) OR ([color] = @Original_" +
                "color)) AND ([product_type] = @Original_product_type));\r\nSELECT model_id, produc" +
                "t_id, product_name, brand_id, product_base_name, type, product_group, related_gr" +
                "oup, percent_relation, cost, initial_dislike_probability, repeat_like_probabilit" +
                "y, color, product_type FROM product WHERE (product_id = @product_id)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@model_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "model_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@product_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "product_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@brand_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "brand_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@product_base_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "product_base_name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@type", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "type", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@product_group", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "product_group", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@related_group", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "related_group", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@percent_relation", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "percent_relation", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@cost", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "cost", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@initial_dislike_probability", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "initial_dislike_probability", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@repeat_like_probability", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "repeat_like_probability", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@color", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "color", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@product_type", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "product_type", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_model_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "model_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_product_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "product_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_product_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "product_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_product_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "product_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_brand_id", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "brand_id", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_product_base_name", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "product_base_name", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_product_base_name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "product_base_name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_type", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "type", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_product_group", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "product_group", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_related_group", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "related_group", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_percent_relation", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "percent_relation", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_cost", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "cost", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_cost", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "cost", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_initial_dislike_probability", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "initial_dislike_probability", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_initial_dislike_probability", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "initial_dislike_probability", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_repeat_like_probability", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "repeat_like_probability", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_repeat_like_probability", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "repeat_like_probability", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_color", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "color", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_color", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "color", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_product_type", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "product_type", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@product_id", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "product_id", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::MrktSimDb.Properties.Settings.Default.test22ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT model_id, product_id, product_name, brand_id, product_base_name, type, pro" +
                "duct_group, related_group, percent_relation, cost, initial_dislike_probability, " +
                "repeat_like_probability, color, product_type FROM dbo.product";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ModelInfo.productDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ModelInfo.productDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ModelInfo.productDataTable dataTable = new ModelInfo.productDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelInfo.productDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ModelInfo dataSet) {
            return this.Adapter.Update(dataSet, "product");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_model_id, int Original_product_id, string Original_product_name, int Original_brand_id, string Original_product_base_name, string Original_type, string Original_product_group, string Original_related_group, string Original_percent_relation, System.Nullable<double> Original_cost, System.Nullable<double> Original_initial_dislike_probability, System.Nullable<double> Original_repeat_like_probability, string Original_color, int Original_product_type) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_model_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_product_id));
            if ((Original_product_name == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_product_name));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_brand_id));
            if ((Original_product_base_name == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_product_base_name));
            }
            if ((Original_type == null)) {
                throw new System.ArgumentNullException("Original_type");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_type));
            }
            if ((Original_product_group == null)) {
                throw new System.ArgumentNullException("Original_product_group");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_product_group));
            }
            if ((Original_related_group == null)) {
                throw new System.ArgumentNullException("Original_related_group");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_related_group));
            }
            if ((Original_percent_relation == null)) {
                throw new System.ArgumentNullException("Original_percent_relation");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_percent_relation));
            }
            if ((Original_cost.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_cost.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            if ((Original_initial_dislike_probability.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((double)(Original_initial_dislike_probability.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_repeat_like_probability.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((double)(Original_repeat_like_probability.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
            }
            if ((Original_color == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_color));
            }
            this.Adapter.DeleteCommand.Parameters[19].Value = ((int)(Original_product_type));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int model_id, string product_name, int brand_id, string product_base_name, string type, string product_group, string related_group, string percent_relation, System.Nullable<double> cost, System.Nullable<double> initial_dislike_probability, System.Nullable<double> repeat_like_probability, string color, int product_type) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(model_id));
            if ((product_name == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(product_name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(brand_id));
            if ((product_base_name == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(product_base_name));
            }
            if ((type == null)) {
                throw new System.ArgumentNullException("type");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(type));
            }
            if ((product_group == null)) {
                throw new System.ArgumentNullException("product_group");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(product_group));
            }
            if ((related_group == null)) {
                throw new System.ArgumentNullException("related_group");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(related_group));
            }
            if ((percent_relation == null)) {
                throw new System.ArgumentNullException("percent_relation");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(percent_relation));
            }
            if ((cost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(cost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((initial_dislike_probability.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(initial_dislike_probability.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((repeat_like_probability.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(repeat_like_probability.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((color == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(color));
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((int)(product_type));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int model_id, 
                    string product_name, 
                    int brand_id, 
                    string product_base_name, 
                    string type, 
                    string product_group, 
                    string related_group, 
                    string percent_relation, 
                    System.Nullable<double> cost, 
                    System.Nullable<double> initial_dislike_probability, 
                    System.Nullable<double> repeat_like_probability, 
                    string color, 
                    int product_type, 
                    int Original_model_id, 
                    int Original_product_id, 
                    string Original_product_name, 
                    int Original_brand_id, 
                    string Original_product_base_name, 
                    string Original_type, 
                    string Original_product_group, 
                    string Original_related_group, 
                    string Original_percent_relation, 
                    System.Nullable<double> Original_cost, 
                    System.Nullable<double> Original_initial_dislike_probability, 
                    System.Nullable<double> Original_repeat_like_probability, 
                    string Original_color, 
                    int Original_product_type, 
                    int product_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(model_id));
            if ((product_name == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(product_name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(brand_id));
            if ((product_base_name == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(product_base_name));
            }
            if ((type == null)) {
                throw new System.ArgumentNullException("type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(type));
            }
            if ((product_group == null)) {
                throw new System.ArgumentNullException("product_group");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(product_group));
            }
            if ((related_group == null)) {
                throw new System.ArgumentNullException("related_group");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(related_group));
            }
            if ((percent_relation == null)) {
                throw new System.ArgumentNullException("percent_relation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(percent_relation));
            }
            if ((cost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(cost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((initial_dislike_probability.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(initial_dislike_probability.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((repeat_like_probability.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(repeat_like_probability.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            if ((color == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(color));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(product_type));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_model_id));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_product_id));
            if ((Original_product_name == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_product_name));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_brand_id));
            if ((Original_product_base_name == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_product_base_name));
            }
            if ((Original_type == null)) {
                throw new System.ArgumentNullException("Original_type");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_type));
            }
            if ((Original_product_group == null)) {
                throw new System.ArgumentNullException("Original_product_group");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_product_group));
            }
            if ((Original_related_group == null)) {
                throw new System.ArgumentNullException("Original_related_group");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_related_group));
            }
            if ((Original_percent_relation == null)) {
                throw new System.ArgumentNullException("Original_percent_relation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_percent_relation));
            }
            if ((Original_cost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((double)(Original_cost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = System.DBNull.Value;
            }
            if ((Original_initial_dislike_probability.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((double)(Original_initial_dislike_probability.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = System.DBNull.Value;
            }
            if ((Original_repeat_like_probability.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((double)(Original_repeat_like_probability.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = System.DBNull.Value;
            }
            if ((Original_color == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_color));
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_product_type));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(product_id));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591