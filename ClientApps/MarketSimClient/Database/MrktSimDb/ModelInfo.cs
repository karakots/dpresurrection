//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace MrktSimDb {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ModelInfo : DataSet {
        
        private scenarioDataTable tablescenario;
        
        private sim_queueDataTable tablesim_queue;
        
        private sim_statusDataTable tablesim_status;
        
        private scenario_typeDataTable tablescenario_type;
        
        private projectDataTable tableproject;
        
        private Model_infoDataTable tableModel_info;
        
        private sim_variable_valueDataTable tablesim_variable_value;
        
        private scenario_variableDataTable tablescenario_variable;
        
        private scenario_parameterDataTable tablescenario_parameter;
        
        private scenario_simseedDataTable tablescenario_simseed;
        
        private variable_typeDataTable tablevariable_type;
        
        private scenario_metricDataTable tablescenario_metric;
        
        private DataRelation relationproject_Model_info;
        
        private DataRelation relationsim_statussim_queue;
        
        private DataRelation relationscenariosim_queue;
        
        private DataRelation relationModel_infoscenario;
        
        private DataRelation relationscenario_typescenario;
        
        private DataRelation relationModel_infosim_queue;
        
        private DataRelation relationprojectModel_info;
        
        private DataRelation relationsim_queuesim_variable_value;
        
        private DataRelation relationscenario_variablesim_variable_value;
        
        private DataRelation relationscenarioscenario_variable;
        
        private DataRelation relationscenarioscenario_parameter;
        
        private DataRelation relationModel_infoscenario_parameter;
        
        private DataRelation relationscenarioscenario_simseed;
        
        private DataRelation relationscenarioscenario_metric;
        
        public ModelInfo() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ModelInfo(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["scenario"] != null)) {
                    this.Tables.Add(new scenarioDataTable(ds.Tables["scenario"]));
                }
                if ((ds.Tables["sim_queue"] != null)) {
                    this.Tables.Add(new sim_queueDataTable(ds.Tables["sim_queue"]));
                }
                if ((ds.Tables["sim_status"] != null)) {
                    this.Tables.Add(new sim_statusDataTable(ds.Tables["sim_status"]));
                }
                if ((ds.Tables["scenario_type"] != null)) {
                    this.Tables.Add(new scenario_typeDataTable(ds.Tables["scenario_type"]));
                }
                if ((ds.Tables["project"] != null)) {
                    this.Tables.Add(new projectDataTable(ds.Tables["project"]));
                }
                if ((ds.Tables["Model_info"] != null)) {
                    this.Tables.Add(new Model_infoDataTable(ds.Tables["Model_info"]));
                }
                if ((ds.Tables["sim_variable_value"] != null)) {
                    this.Tables.Add(new sim_variable_valueDataTable(ds.Tables["sim_variable_value"]));
                }
                if ((ds.Tables["scenario_variable"] != null)) {
                    this.Tables.Add(new scenario_variableDataTable(ds.Tables["scenario_variable"]));
                }
                if ((ds.Tables["scenario_parameter"] != null)) {
                    this.Tables.Add(new scenario_parameterDataTable(ds.Tables["scenario_parameter"]));
                }
                if ((ds.Tables["scenario_simseed"] != null)) {
                    this.Tables.Add(new scenario_simseedDataTable(ds.Tables["scenario_simseed"]));
                }
                if ((ds.Tables["variable_type"] != null)) {
                    this.Tables.Add(new variable_typeDataTable(ds.Tables["variable_type"]));
                }
                if ((ds.Tables["scenario_metric"] != null)) {
                    this.Tables.Add(new scenario_metricDataTable(ds.Tables["scenario_metric"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scenarioDataTable scenario {
            get {
                return this.tablescenario;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sim_queueDataTable sim_queue {
            get {
                return this.tablesim_queue;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sim_statusDataTable sim_status {
            get {
                return this.tablesim_status;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scenario_typeDataTable scenario_type {
            get {
                return this.tablescenario_type;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public projectDataTable project {
            get {
                return this.tableproject;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Model_infoDataTable Model_info {
            get {
                return this.tableModel_info;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sim_variable_valueDataTable sim_variable_value {
            get {
                return this.tablesim_variable_value;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scenario_variableDataTable scenario_variable {
            get {
                return this.tablescenario_variable;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scenario_parameterDataTable scenario_parameter {
            get {
                return this.tablescenario_parameter;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scenario_simseedDataTable scenario_simseed {
            get {
                return this.tablescenario_simseed;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public variable_typeDataTable variable_type {
            get {
                return this.tablevariable_type;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public scenario_metricDataTable scenario_metric {
            get {
                return this.tablescenario_metric;
            }
        }
        
        public override DataSet Clone() {
            ModelInfo cln = ((ModelInfo)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["scenario"] != null)) {
                this.Tables.Add(new scenarioDataTable(ds.Tables["scenario"]));
            }
            if ((ds.Tables["sim_queue"] != null)) {
                this.Tables.Add(new sim_queueDataTable(ds.Tables["sim_queue"]));
            }
            if ((ds.Tables["sim_status"] != null)) {
                this.Tables.Add(new sim_statusDataTable(ds.Tables["sim_status"]));
            }
            if ((ds.Tables["scenario_type"] != null)) {
                this.Tables.Add(new scenario_typeDataTable(ds.Tables["scenario_type"]));
            }
            if ((ds.Tables["project"] != null)) {
                this.Tables.Add(new projectDataTable(ds.Tables["project"]));
            }
            if ((ds.Tables["Model_info"] != null)) {
                this.Tables.Add(new Model_infoDataTable(ds.Tables["Model_info"]));
            }
            if ((ds.Tables["sim_variable_value"] != null)) {
                this.Tables.Add(new sim_variable_valueDataTable(ds.Tables["sim_variable_value"]));
            }
            if ((ds.Tables["scenario_variable"] != null)) {
                this.Tables.Add(new scenario_variableDataTable(ds.Tables["scenario_variable"]));
            }
            if ((ds.Tables["scenario_parameter"] != null)) {
                this.Tables.Add(new scenario_parameterDataTable(ds.Tables["scenario_parameter"]));
            }
            if ((ds.Tables["scenario_simseed"] != null)) {
                this.Tables.Add(new scenario_simseedDataTable(ds.Tables["scenario_simseed"]));
            }
            if ((ds.Tables["variable_type"] != null)) {
                this.Tables.Add(new variable_typeDataTable(ds.Tables["variable_type"]));
            }
            if ((ds.Tables["scenario_metric"] != null)) {
                this.Tables.Add(new scenario_metricDataTable(ds.Tables["scenario_metric"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablescenario = ((scenarioDataTable)(this.Tables["scenario"]));
            if ((this.tablescenario != null)) {
                this.tablescenario.InitVars();
            }
            this.tablesim_queue = ((sim_queueDataTable)(this.Tables["sim_queue"]));
            if ((this.tablesim_queue != null)) {
                this.tablesim_queue.InitVars();
            }
            this.tablesim_status = ((sim_statusDataTable)(this.Tables["sim_status"]));
            if ((this.tablesim_status != null)) {
                this.tablesim_status.InitVars();
            }
            this.tablescenario_type = ((scenario_typeDataTable)(this.Tables["scenario_type"]));
            if ((this.tablescenario_type != null)) {
                this.tablescenario_type.InitVars();
            }
            this.tableproject = ((projectDataTable)(this.Tables["project"]));
            if ((this.tableproject != null)) {
                this.tableproject.InitVars();
            }
            this.tableModel_info = ((Model_infoDataTable)(this.Tables["Model_info"]));
            if ((this.tableModel_info != null)) {
                this.tableModel_info.InitVars();
            }
            this.tablesim_variable_value = ((sim_variable_valueDataTable)(this.Tables["sim_variable_value"]));
            if ((this.tablesim_variable_value != null)) {
                this.tablesim_variable_value.InitVars();
            }
            this.tablescenario_variable = ((scenario_variableDataTable)(this.Tables["scenario_variable"]));
            if ((this.tablescenario_variable != null)) {
                this.tablescenario_variable.InitVars();
            }
            this.tablescenario_parameter = ((scenario_parameterDataTable)(this.Tables["scenario_parameter"]));
            if ((this.tablescenario_parameter != null)) {
                this.tablescenario_parameter.InitVars();
            }
            this.tablescenario_simseed = ((scenario_simseedDataTable)(this.Tables["scenario_simseed"]));
            if ((this.tablescenario_simseed != null)) {
                this.tablescenario_simseed.InitVars();
            }
            this.tablevariable_type = ((variable_typeDataTable)(this.Tables["variable_type"]));
            if ((this.tablevariable_type != null)) {
                this.tablevariable_type.InitVars();
            }
            this.tablescenario_metric = ((scenario_metricDataTable)(this.Tables["scenario_metric"]));
            if ((this.tablescenario_metric != null)) {
                this.tablescenario_metric.InitVars();
            }
            this.relationproject_Model_info = this.Relations["project_Model_info"];
            this.relationsim_statussim_queue = this.Relations["sim_statussim_queue"];
            this.relationscenariosim_queue = this.Relations["scenariosim_queue"];
            this.relationModel_infoscenario = this.Relations["Model_infoscenario"];
            this.relationscenario_typescenario = this.Relations["scenario_typescenario"];
            this.relationModel_infosim_queue = this.Relations["Model_infosim_queue"];
            this.relationprojectModel_info = this.Relations["projectModel_info"];
            this.relationsim_queuesim_variable_value = this.Relations["sim_queuesim_variable_value"];
            this.relationscenario_variablesim_variable_value = this.Relations["scenario_variablesim_variable_value"];
            this.relationscenarioscenario_variable = this.Relations["scenarioscenario_variable"];
            this.relationscenarioscenario_parameter = this.Relations["scenarioscenario_parameter"];
            this.relationModel_infoscenario_parameter = this.Relations["Model_infoscenario_parameter"];
            this.relationscenarioscenario_simseed = this.Relations["scenarioscenario_simseed"];
            this.relationscenarioscenario_metric = this.Relations["scenarioscenario_metric"];
        }
        
        private void InitClass() {
            this.DataSetName = "ModelInfo";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ModelInfo.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablescenario = new scenarioDataTable();
            this.Tables.Add(this.tablescenario);
            this.tablesim_queue = new sim_queueDataTable();
            this.Tables.Add(this.tablesim_queue);
            this.tablesim_status = new sim_statusDataTable();
            this.Tables.Add(this.tablesim_status);
            this.tablescenario_type = new scenario_typeDataTable();
            this.Tables.Add(this.tablescenario_type);
            this.tableproject = new projectDataTable();
            this.Tables.Add(this.tableproject);
            this.tableModel_info = new Model_infoDataTable();
            this.Tables.Add(this.tableModel_info);
            this.tablesim_variable_value = new sim_variable_valueDataTable();
            this.Tables.Add(this.tablesim_variable_value);
            this.tablescenario_variable = new scenario_variableDataTable();
            this.Tables.Add(this.tablescenario_variable);
            this.tablescenario_parameter = new scenario_parameterDataTable();
            this.Tables.Add(this.tablescenario_parameter);
            this.tablescenario_simseed = new scenario_simseedDataTable();
            this.Tables.Add(this.tablescenario_simseed);
            this.tablevariable_type = new variable_typeDataTable();
            this.Tables.Add(this.tablevariable_type);
            this.tablescenario_metric = new scenario_metricDataTable();
            this.Tables.Add(this.tablescenario_metric);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("Model_infoscenario", new DataColumn[] {
                        this.tableModel_info.model_idColumn}, new DataColumn[] {
                        this.tablescenario.model_idColumn});
            this.tablescenario.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("scenario_typescenario", new DataColumn[] {
                        this.tablescenario_type.scenario_type_idColumn}, new DataColumn[] {
                        this.tablescenario.typeColumn});
            this.tablescenario.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new ForeignKeyConstraint("sim_statussim_queue", new DataColumn[] {
                        this.tablesim_status.status_idColumn}, new DataColumn[] {
                        this.tablesim_queue.statusColumn});
            this.tablesim_queue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("scenariosim_queue", new DataColumn[] {
                        this.tablescenario.scenario_idColumn}, new DataColumn[] {
                        this.tablesim_queue.scenario_idColumn});
            this.tablesim_queue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Model_infosim_queue", new DataColumn[] {
                        this.tableModel_info.model_idColumn}, new DataColumn[] {
                        this.tablesim_queue.model_idColumn});
            this.tablesim_queue.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("project_Model_info", new DataColumn[] {
                        this.tableproject.idColumn}, new DataColumn[] {
                        this.tableModel_info.idColumn});
            this.tableModel_info.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("projectModel_info", new DataColumn[] {
                        this.tableproject.idColumn}, new DataColumn[] {
                        this.tableModel_info.project_idColumn});
            this.tableModel_info.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("sim_queuesim_variable_value", new DataColumn[] {
                        this.tablesim_queue.run_idColumn}, new DataColumn[] {
                        this.tablesim_variable_value.run_idColumn});
            this.tablesim_variable_value.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("scenario_variablesim_variable_value", new DataColumn[] {
                        this.tablescenario_variable.idColumn}, new DataColumn[] {
                        this.tablesim_variable_value.var_idColumn});
            this.tablesim_variable_value.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("scenarioscenario_variable", new DataColumn[] {
                        this.tablescenario.scenario_idColumn}, new DataColumn[] {
                        this.tablescenario_variable.scenario_idColumn});
            this.tablescenario_variable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("variable_typescenario_variable", new DataColumn[] {
                        this.tablevariable_type.type_idColumn}, new DataColumn[] {
                        this.tablescenario_variable.typeColumn});
            this.tablescenario_variable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("scenarioscenario_parameter", new DataColumn[] {
                        this.tablescenario.scenario_idColumn}, new DataColumn[] {
                        this.tablescenario_parameter.scenario_idColumn});
            this.tablescenario_parameter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Model_infoscenario_parameter", new DataColumn[] {
                        this.tableModel_info.model_idColumn}, new DataColumn[] {
                        this.tablescenario_parameter.model_idColumn});
            this.tablescenario_parameter.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("scenarioscenario_simseed", new DataColumn[] {
                        this.tablescenario.scenario_idColumn}, new DataColumn[] {
                        this.tablescenario_simseed.scenario_idColumn});
            this.tablescenario_simseed.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("scenarioscenario_metric", new DataColumn[] {
                        this.tablescenario.scenario_idColumn}, new DataColumn[] {
                        this.tablescenario_metric.scenario_idColumn});
            this.tablescenario_metric.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationproject_Model_info = new DataRelation("project_Model_info", new DataColumn[] {
                        this.tableproject.idColumn}, new DataColumn[] {
                        this.tableModel_info.idColumn}, false);
            this.relationproject_Model_info.Nested = true;
            this.Relations.Add(this.relationproject_Model_info);
            this.relationsim_statussim_queue = new DataRelation("sim_statussim_queue", new DataColumn[] {
                        this.tablesim_status.status_idColumn}, new DataColumn[] {
                        this.tablesim_queue.statusColumn}, false);
            this.Relations.Add(this.relationsim_statussim_queue);
            this.relationscenariosim_queue = new DataRelation("scenariosim_queue", new DataColumn[] {
                        this.tablescenario.scenario_idColumn}, new DataColumn[] {
                        this.tablesim_queue.scenario_idColumn}, false);
            this.Relations.Add(this.relationscenariosim_queue);
            this.relationModel_infoscenario = new DataRelation("Model_infoscenario", new DataColumn[] {
                        this.tableModel_info.model_idColumn}, new DataColumn[] {
                        this.tablescenario.model_idColumn}, false);
            this.Relations.Add(this.relationModel_infoscenario);
            this.relationscenario_typescenario = new DataRelation("scenario_typescenario", new DataColumn[] {
                        this.tablescenario_type.scenario_type_idColumn}, new DataColumn[] {
                        this.tablescenario.typeColumn}, false);
            this.Relations.Add(this.relationscenario_typescenario);
            this.relationModel_infosim_queue = new DataRelation("Model_infosim_queue", new DataColumn[] {
                        this.tableModel_info.model_idColumn}, new DataColumn[] {
                        this.tablesim_queue.model_idColumn}, false);
            this.Relations.Add(this.relationModel_infosim_queue);
            this.relationprojectModel_info = new DataRelation("projectModel_info", new DataColumn[] {
                        this.tableproject.idColumn}, new DataColumn[] {
                        this.tableModel_info.project_idColumn}, false);
            this.Relations.Add(this.relationprojectModel_info);
            this.relationsim_queuesim_variable_value = new DataRelation("sim_queuesim_variable_value", new DataColumn[] {
                        this.tablesim_queue.run_idColumn}, new DataColumn[] {
                        this.tablesim_variable_value.run_idColumn}, false);
            this.Relations.Add(this.relationsim_queuesim_variable_value);
            this.relationscenario_variablesim_variable_value = new DataRelation("scenario_variablesim_variable_value", new DataColumn[] {
                        this.tablescenario_variable.idColumn}, new DataColumn[] {
                        this.tablesim_variable_value.var_idColumn}, false);
            this.Relations.Add(this.relationscenario_variablesim_variable_value);
            this.relationscenarioscenario_variable = new DataRelation("scenarioscenario_variable", new DataColumn[] {
                        this.tablescenario.scenario_idColumn}, new DataColumn[] {
                        this.tablescenario_variable.scenario_idColumn}, false);
            this.Relations.Add(this.relationscenarioscenario_variable);
            this.relationscenarioscenario_parameter = new DataRelation("scenarioscenario_parameter", new DataColumn[] {
                        this.tablescenario.scenario_idColumn}, new DataColumn[] {
                        this.tablescenario_parameter.scenario_idColumn}, false);
            this.Relations.Add(this.relationscenarioscenario_parameter);
            this.relationModel_infoscenario_parameter = new DataRelation("Model_infoscenario_parameter", new DataColumn[] {
                        this.tableModel_info.model_idColumn}, new DataColumn[] {
                        this.tablescenario_parameter.model_idColumn}, false);
            this.Relations.Add(this.relationModel_infoscenario_parameter);
            this.relationscenarioscenario_simseed = new DataRelation("scenarioscenario_simseed", new DataColumn[] {
                        this.tablescenario.scenario_idColumn}, new DataColumn[] {
                        this.tablescenario_simseed.scenario_idColumn}, false);
            this.Relations.Add(this.relationscenarioscenario_simseed);
            this.relationscenarioscenario_metric = new DataRelation("scenarioscenario_metric", new DataColumn[] {
                        this.tablescenario.scenario_idColumn}, new DataColumn[] {
                        this.tablescenario_metric.scenario_idColumn}, false);
            this.Relations.Add(this.relationscenarioscenario_metric);
        }
        
        private bool ShouldSerializescenario() {
            return false;
        }
        
        private bool ShouldSerializesim_queue() {
            return false;
        }
        
        private bool ShouldSerializesim_status() {
            return false;
        }
        
        private bool ShouldSerializescenario_type() {
            return false;
        }
        
        private bool ShouldSerializeproject() {
            return false;
        }
        
        private bool ShouldSerializeModel_info() {
            return false;
        }
        
        private bool ShouldSerializesim_variable_value() {
            return false;
        }
        
        private bool ShouldSerializescenario_variable() {
            return false;
        }
        
        private bool ShouldSerializescenario_parameter() {
            return false;
        }
        
        private bool ShouldSerializescenario_simseed() {
            return false;
        }
        
        private bool ShouldSerializevariable_type() {
            return false;
        }
        
        private bool ShouldSerializescenario_metric() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void scenarioRowChangeEventHandler(object sender, scenarioRowChangeEvent e);
        
        public delegate void sim_queueRowChangeEventHandler(object sender, sim_queueRowChangeEvent e);
        
        public delegate void sim_statusRowChangeEventHandler(object sender, sim_statusRowChangeEvent e);
        
        public delegate void scenario_typeRowChangeEventHandler(object sender, scenario_typeRowChangeEvent e);
        
        public delegate void projectRowChangeEventHandler(object sender, projectRowChangeEvent e);
        
        public delegate void Model_infoRowChangeEventHandler(object sender, Model_infoRowChangeEvent e);
        
        public delegate void sim_variable_valueRowChangeEventHandler(object sender, sim_variable_valueRowChangeEvent e);
        
        public delegate void scenario_variableRowChangeEventHandler(object sender, scenario_variableRowChangeEvent e);
        
        public delegate void scenario_parameterRowChangeEventHandler(object sender, scenario_parameterRowChangeEvent e);
        
        public delegate void scenario_simseedRowChangeEventHandler(object sender, scenario_simseedRowChangeEvent e);
        
        public delegate void variable_typeRowChangeEventHandler(object sender, variable_typeRowChangeEvent e);
        
        public delegate void scenario_metricRowChangeEventHandler(object sender, scenario_metricRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class simulationDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnscenario_id;
            
            private DataColumn columnmodel_id;
            
            private DataColumn columnname;
            
            private DataColumn columndescr;
            
            private DataColumn columntype;
            
            private DataColumn columnstart_date;
            
            private DataColumn columnend_date;
            
            private DataColumn columnqueued;
            
            private DataColumn columnsim_num;
            
            private DataColumn columnlocked;
            
            private DataColumn columnmetric_start_date;
            
            private DataColumn columnmetric_end_date;
            
            private DataColumn columndelete_std_results;
            
            private DataColumn columncontrol_string;
            
            private DataColumn columnaccess_time;
            
            private DataColumn columnuser_name;
            
            private DataColumn columnsaved;
            
            internal simulationDataTable() : 
                    base("scenario") {
                this.InitClass();
            }
            
            internal simulationDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn scenario_idColumn {
                get {
                    return this.columnscenario_id;
                }
            }
            
            internal DataColumn model_idColumn {
                get {
                    return this.columnmodel_id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn descrColumn {
                get {
                    return this.columndescr;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            internal DataColumn start_dateColumn {
                get {
                    return this.columnstart_date;
                }
            }
            
            internal DataColumn end_dateColumn {
                get {
                    return this.columnend_date;
                }
            }
            
            internal DataColumn queuedColumn {
                get {
                    return this.columnqueued;
                }
            }
            
            internal DataColumn sim_numColumn {
                get {
                    return this.columnsim_num;
                }
            }
            
            internal DataColumn lockedColumn {
                get {
                    return this.columnlocked;
                }
            }
            
            internal DataColumn metric_start_dateColumn {
                get {
                    return this.columnmetric_start_date;
                }
            }
            
            internal DataColumn metric_end_dateColumn {
                get {
                    return this.columnmetric_end_date;
                }
            }
            
            internal DataColumn delete_std_resultsColumn {
                get {
                    return this.columndelete_std_results;
                }
            }
            
            internal DataColumn control_stringColumn {
                get {
                    return this.columncontrol_string;
                }
            }
            
            internal DataColumn access_timeColumn {
                get {
                    return this.columnaccess_time;
                }
            }
            
            internal DataColumn user_nameColumn {
                get {
                    return this.columnuser_name;
                }
            }
            
            internal DataColumn savedColumn {
                get {
                    return this.columnsaved;
                }
            }
            
            public scenarioRow this[int index] {
                get {
                    return ((scenarioRow)(this.Rows[index]));
                }
            }
            
            public event scenarioRowChangeEventHandler scenarioRowChanged;
            
            public event scenarioRowChangeEventHandler scenarioRowChanging;
            
            public event scenarioRowChangeEventHandler scenarioRowDeleted;
            
            public event scenarioRowChangeEventHandler scenarioRowDeleting;
            
            public void AddscenarioRow(scenarioRow row) {
                this.Rows.Add(row);
            }
            
            public scenarioRow AddscenarioRow(
                        Model_infoRow parentModel_infoRowByModel_infoscenario, 
                        string name, 
                        string descr, 
                        scenario_typeRow parentscenario_typeRowByscenario_typescenario, 
                        System.DateTime start_date, 
                        System.DateTime end_date, 
                        bool queued, 
                        int sim_num, 
                        bool locked, 
                        System.DateTime metric_start_date, 
                        System.DateTime metric_end_date, 
                        bool delete_std_results, 
                        string control_string, 
                        int access_time, 
                        string user_name, 
                        bool saved) {
                scenarioRow rowscenarioRow = ((scenarioRow)(this.NewRow()));
                rowscenarioRow.ItemArray = new object[] {
                        null,
                        parentModel_infoRowByModel_infoscenario[0],
                        name,
                        descr,
                        parentscenario_typeRowByscenario_typescenario[0],
                        start_date,
                        end_date,
                        queued,
                        sim_num,
                        locked,
                        metric_start_date,
                        metric_end_date,
                        delete_std_results,
                        control_string,
                        access_time,
                        user_name,
                        saved};
                this.Rows.Add(rowscenarioRow);
                return rowscenarioRow;
            }
            
            public scenarioRow FindByscenario_id(int scenario_id) {
                return ((scenarioRow)(this.Rows.Find(new object[] {
                            scenario_id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                scenarioDataTable cln = ((scenarioDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new scenarioDataTable();
            }
            
            internal void InitVars() {
                this.columnscenario_id = this.Columns["scenario_id"];
                this.columnmodel_id = this.Columns["model_id"];
                this.columnname = this.Columns["name"];
                this.columndescr = this.Columns["descr"];
                this.columntype = this.Columns["type"];
                this.columnstart_date = this.Columns["start_date"];
                this.columnend_date = this.Columns["end_date"];
                this.columnqueued = this.Columns["queued"];
                this.columnsim_num = this.Columns["sim_num"];
                this.columnlocked = this.Columns["locked"];
                this.columnmetric_start_date = this.Columns["metric_start_date"];
                this.columnmetric_end_date = this.Columns["metric_end_date"];
                this.columndelete_std_results = this.Columns["delete_std_results"];
                this.columncontrol_string = this.Columns["control_string"];
                this.columnaccess_time = this.Columns["access_time"];
                this.columnuser_name = this.Columns["user_name"];
                this.columnsaved = this.Columns["saved"];
            }
            
            private void InitClass() {
                this.columnscenario_id = new DataColumn("scenario_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscenario_id);
                this.columnmodel_id = new DataColumn("model_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodel_id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columndescr = new DataColumn("descr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescr);
                this.columntype = new DataColumn("type", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntype);
                this.columnstart_date = new DataColumn("start_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstart_date);
                this.columnend_date = new DataColumn("end_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnend_date);
                this.columnqueued = new DataColumn("queued", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnqueued);
                this.columnsim_num = new DataColumn("sim_num", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsim_num);
                this.columnlocked = new DataColumn("locked", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlocked);
                this.columnmetric_start_date = new DataColumn("metric_start_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmetric_start_date);
                this.columnmetric_end_date = new DataColumn("metric_end_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmetric_end_date);
                this.columndelete_std_results = new DataColumn("delete_std_results", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndelete_std_results);
                this.columncontrol_string = new DataColumn("control_string", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncontrol_string);
                this.columnaccess_time = new DataColumn("access_time", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnaccess_time);
                this.columnuser_name = new DataColumn("user_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuser_name);
                this.columnsaved = new DataColumn("saved", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsaved);
                this.Constraints.Add(new UniqueConstraint("ModelInfoKey2", new DataColumn[] {
                                this.columnscenario_id}, true));
                this.columnscenario_id.AutoIncrement = true;
                this.columnscenario_id.AllowDBNull = false;
                this.columnscenario_id.ReadOnly = true;
                this.columnscenario_id.Unique = true;
                this.columnmodel_id.AllowDBNull = false;
                this.columnname.AllowDBNull = false;
                this.columndescr.AllowDBNull = false;
                this.columntype.AllowDBNull = false;
            }
            
            public scenarioRow NewscenarioRow() {
                return ((scenarioRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new scenarioRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(scenarioRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scenarioRowChanged != null)) {
                    this.scenarioRowChanged(this, new scenarioRowChangeEvent(((scenarioRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scenarioRowChanging != null)) {
                    this.scenarioRowChanging(this, new scenarioRowChangeEvent(((scenarioRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scenarioRowDeleted != null)) {
                    this.scenarioRowDeleted(this, new scenarioRowChangeEvent(((scenarioRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scenarioRowDeleting != null)) {
                    this.scenarioRowDeleting(this, new scenarioRowChangeEvent(((scenarioRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovescenarioRow(scenarioRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenarioRow : DataRow {
            
            private scenarioDataTable tablescenario;
            
            internal scenarioRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablescenario = ((scenarioDataTable)(this.Table));
            }
            
            public int scenario_id {
                get {
                    return ((int)(this[this.tablescenario.scenario_idColumn]));
                }
                set {
                    this[this.tablescenario.scenario_idColumn] = value;
                }
            }
            
            public int model_id {
                get {
                    return ((int)(this[this.tablescenario.model_idColumn]));
                }
                set {
                    this[this.tablescenario.model_idColumn] = value;
                }
            }
            
            public string name {
                get {
                    return ((string)(this[this.tablescenario.nameColumn]));
                }
                set {
                    this[this.tablescenario.nameColumn] = value;
                }
            }
            
            public string descr {
                get {
                    return ((string)(this[this.tablescenario.descrColumn]));
                }
                set {
                    this[this.tablescenario.descrColumn] = value;
                }
            }
            
            public System.Byte type {
                get {
                    return ((System.Byte)(this[this.tablescenario.typeColumn]));
                }
                set {
                    this[this.tablescenario.typeColumn] = value;
                }
            }
            
            public System.DateTime start_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablescenario.start_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.start_dateColumn] = value;
                }
            }
            
            public System.DateTime end_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablescenario.end_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.end_dateColumn] = value;
                }
            }
            
            public bool queued {
                get {
                    try {
                        return ((bool)(this[this.tablescenario.queuedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.queuedColumn] = value;
                }
            }
            
            public int sim_num {
                get {
                    try {
                        return ((int)(this[this.tablescenario.sim_numColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.sim_numColumn] = value;
                }
            }
            
            public bool locked {
                get {
                    try {
                        return ((bool)(this[this.tablescenario.lockedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.lockedColumn] = value;
                }
            }
            
            public System.DateTime metric_start_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablescenario.metric_start_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.metric_start_dateColumn] = value;
                }
            }
            
            public System.DateTime metric_end_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablescenario.metric_end_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.metric_end_dateColumn] = value;
                }
            }
            
            public bool delete_std_results {
                get {
                    try {
                        return ((bool)(this[this.tablescenario.delete_std_resultsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.delete_std_resultsColumn] = value;
                }
            }
            
            public string control_string {
                get {
                    try {
                        return ((string)(this[this.tablescenario.control_stringColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.control_stringColumn] = value;
                }
            }
            
            public int access_time {
                get {
                    try {
                        return ((int)(this[this.tablescenario.access_timeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.access_timeColumn] = value;
                }
            }
            
            public string user_name {
                get {
                    try {
                        return ((string)(this[this.tablescenario.user_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.user_nameColumn] = value;
                }
            }
            
            public bool saved {
                get {
                    try {
                        return ((bool)(this[this.tablescenario.savedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario.savedColumn] = value;
                }
            }
            
            public Model_infoRow Model_infoRow {
                get {
                    return ((Model_infoRow)(this.GetParentRow(this.Table.ParentRelations["Model_infoscenario"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Model_infoscenario"]);
                }
            }
            
            public scenario_typeRow scenario_typeRow {
                get {
                    return ((scenario_typeRow)(this.GetParentRow(this.Table.ParentRelations["scenario_typescenario"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenario_typescenario"]);
                }
            }
            
            public bool Isstart_dateNull() {
                return this.IsNull(this.tablescenario.start_dateColumn);
            }
            
            public void Setstart_dateNull() {
                this[this.tablescenario.start_dateColumn] = System.Convert.DBNull;
            }
            
            public bool Isend_dateNull() {
                return this.IsNull(this.tablescenario.end_dateColumn);
            }
            
            public void Setend_dateNull() {
                this[this.tablescenario.end_dateColumn] = System.Convert.DBNull;
            }
            
            public bool IsqueuedNull() {
                return this.IsNull(this.tablescenario.queuedColumn);
            }
            
            public void SetqueuedNull() {
                this[this.tablescenario.queuedColumn] = System.Convert.DBNull;
            }
            
            public bool Issim_numNull() {
                return this.IsNull(this.tablescenario.sim_numColumn);
            }
            
            public void Setsim_numNull() {
                this[this.tablescenario.sim_numColumn] = System.Convert.DBNull;
            }
            
            public bool IslockedNull() {
                return this.IsNull(this.tablescenario.lockedColumn);
            }
            
            public void SetlockedNull() {
                this[this.tablescenario.lockedColumn] = System.Convert.DBNull;
            }
            
            public bool Ismetric_start_dateNull() {
                return this.IsNull(this.tablescenario.metric_start_dateColumn);
            }
            
            public void Setmetric_start_dateNull() {
                this[this.tablescenario.metric_start_dateColumn] = System.Convert.DBNull;
            }
            
            public bool Ismetric_end_dateNull() {
                return this.IsNull(this.tablescenario.metric_end_dateColumn);
            }
            
            public void Setmetric_end_dateNull() {
                this[this.tablescenario.metric_end_dateColumn] = System.Convert.DBNull;
            }
            
            public bool Isdelete_std_resultsNull() {
                return this.IsNull(this.tablescenario.delete_std_resultsColumn);
            }
            
            public void Setdelete_std_resultsNull() {
                this[this.tablescenario.delete_std_resultsColumn] = System.Convert.DBNull;
            }
            
            public bool Iscontrol_stringNull() {
                return this.IsNull(this.tablescenario.control_stringColumn);
            }
            
            public void Setcontrol_stringNull() {
                this[this.tablescenario.control_stringColumn] = System.Convert.DBNull;
            }
            
            public bool Isaccess_timeNull() {
                return this.IsNull(this.tablescenario.access_timeColumn);
            }
            
            public void Setaccess_timeNull() {
                this[this.tablescenario.access_timeColumn] = System.Convert.DBNull;
            }
            
            public bool Isuser_nameNull() {
                return this.IsNull(this.tablescenario.user_nameColumn);
            }
            
            public void Setuser_nameNull() {
                this[this.tablescenario.user_nameColumn] = System.Convert.DBNull;
            }
            
            public bool IssavedNull() {
                return this.IsNull(this.tablescenario.savedColumn);
            }
            
            public void SetsavedNull() {
                this[this.tablescenario.savedColumn] = System.Convert.DBNull;
            }
            
            public sim_queueRow[] Getsim_queueRows() {
                return ((sim_queueRow[])(this.GetChildRows(this.Table.ChildRelations["scenariosim_queue"])));
            }
            
            public scenario_variableRow[] Getscenario_variableRows() {
                return ((scenario_variableRow[])(this.GetChildRows(this.Table.ChildRelations["scenarioscenario_variable"])));
            }
            
            public scenario_parameterRow[] Getscenario_parameterRows() {
                return ((scenario_parameterRow[])(this.GetChildRows(this.Table.ChildRelations["scenarioscenario_parameter"])));
            }
            
            public scenario_simseedRow[] Getscenario_simseedRows() {
                return ((scenario_simseedRow[])(this.GetChildRows(this.Table.ChildRelations["scenarioscenario_simseed"])));
            }
            
            public scenario_metricRow[] Getscenario_metricRows() {
                return ((scenario_metricRow[])(this.GetChildRows(this.Table.ChildRelations["scenarioscenario_metric"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenarioRowChangeEvent : EventArgs {
            
            private scenarioRow eventRow;
            
            private DataRowAction eventAction;
            
            public scenarioRowChangeEvent(scenarioRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public scenarioRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sim_queueDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnrun_id;
            
            private DataColumn columnscenario_id;
            
            private DataColumn columnstatus;
            
            private DataColumn columnnum;
            
            private DataColumn columnmodel_id;
            
            private DataColumn columnname;
            
            private DataColumn columnelapsed_time;
            
            private DataColumn columncurrent_status;
            
            private DataColumn columncurrent_date;
            
            private DataColumn columnrun_time;
            
            private DataColumn columnseed;
            
            private DataColumn columnparam_id;
            
            internal sim_queueDataTable() : 
                    base("sim_queue") {
                this.InitClass();
            }
            
            internal sim_queueDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn run_idColumn {
                get {
                    return this.columnrun_id;
                }
            }
            
            internal DataColumn scenario_idColumn {
                get {
                    return this.columnscenario_id;
                }
            }
            
            internal DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            internal DataColumn numColumn {
                get {
                    return this.columnnum;
                }
            }
            
            internal DataColumn model_idColumn {
                get {
                    return this.columnmodel_id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn elapsed_timeColumn {
                get {
                    return this.columnelapsed_time;
                }
            }
            
            internal DataColumn current_statusColumn {
                get {
                    return this.columncurrent_status;
                }
            }
            
            internal DataColumn current_dateColumn {
                get {
                    return this.columncurrent_date;
                }
            }
            
            internal DataColumn run_timeColumn {
                get {
                    return this.columnrun_time;
                }
            }
            
            internal DataColumn seedColumn {
                get {
                    return this.columnseed;
                }
            }
            
            internal DataColumn param_idColumn {
                get {
                    return this.columnparam_id;
                }
            }
            
            public sim_queueRow this[int index] {
                get {
                    return ((sim_queueRow)(this.Rows[index]));
                }
            }
            
            public event sim_queueRowChangeEventHandler sim_queueRowChanged;
            
            public event sim_queueRowChangeEventHandler sim_queueRowChanging;
            
            public event sim_queueRowChangeEventHandler sim_queueRowDeleted;
            
            public event sim_queueRowChangeEventHandler sim_queueRowDeleting;
            
            public void Addsim_queueRow(sim_queueRow row) {
                this.Rows.Add(row);
            }
            
            public sim_queueRow Addsim_queueRow(scenarioRow parentscenarioRowByscenariosim_queue, sim_statusRow parentsim_statusRowBysim_statussim_queue, int num, Model_infoRow parentModel_infoRowByModel_infosim_queue, string name, int elapsed_time, string current_status, System.DateTime current_date, System.DateTime run_time, int seed, int param_id) {
                sim_queueRow rowsim_queueRow = ((sim_queueRow)(this.NewRow()));
                rowsim_queueRow.ItemArray = new object[] {
                        null,
                        parentscenarioRowByscenariosim_queue[0],
                        parentsim_statusRowBysim_statussim_queue[0],
                        num,
                        parentModel_infoRowByModel_infosim_queue[0],
                        name,
                        elapsed_time,
                        current_status,
                        current_date,
                        run_time,
                        seed,
                        param_id};
                this.Rows.Add(rowsim_queueRow);
                return rowsim_queueRow;
            }
            
            public sim_queueRow FindByrun_id(int run_id) {
                return ((sim_queueRow)(this.Rows.Find(new object[] {
                            run_id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                sim_queueDataTable cln = ((sim_queueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new sim_queueDataTable();
            }
            
            internal void InitVars() {
                this.columnrun_id = this.Columns["run_id"];
                this.columnscenario_id = this.Columns["scenario_id"];
                this.columnstatus = this.Columns["status"];
                this.columnnum = this.Columns["num"];
                this.columnmodel_id = this.Columns["model_id"];
                this.columnname = this.Columns["name"];
                this.columnelapsed_time = this.Columns["elapsed_time"];
                this.columncurrent_status = this.Columns["current_status"];
                this.columncurrent_date = this.Columns["current_date"];
                this.columnrun_time = this.Columns["run_time"];
                this.columnseed = this.Columns["seed"];
                this.columnparam_id = this.Columns["param_id"];
            }
            
            private void InitClass() {
                this.columnrun_id = new DataColumn("run_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrun_id);
                this.columnscenario_id = new DataColumn("scenario_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscenario_id);
                this.columnstatus = new DataColumn("status", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstatus);
                this.columnnum = new DataColumn("num", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnum);
                this.columnmodel_id = new DataColumn("model_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodel_id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columnelapsed_time = new DataColumn("elapsed_time", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnelapsed_time);
                this.columncurrent_status = new DataColumn("current_status", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncurrent_status);
                this.columncurrent_date = new DataColumn("current_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncurrent_date);
                this.columnrun_time = new DataColumn("run_time", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrun_time);
                this.columnseed = new DataColumn("seed", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnseed);
                this.columnparam_id = new DataColumn("param_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnparam_id);
                this.Constraints.Add(new UniqueConstraint("ModelInfoKey3", new DataColumn[] {
                                this.columnrun_id}, true));
                this.columnrun_id.AutoIncrement = true;
                this.columnrun_id.AllowDBNull = false;
                this.columnrun_id.ReadOnly = true;
                this.columnrun_id.Unique = true;
                this.columnscenario_id.AllowDBNull = false;
                this.columnstatus.AllowDBNull = false;
                this.columnnum.AllowDBNull = false;
                this.columnmodel_id.AllowDBNull = false;
            }
            
            public sim_queueRow Newsim_queueRow() {
                return ((sim_queueRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new sim_queueRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(sim_queueRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sim_queueRowChanged != null)) {
                    this.sim_queueRowChanged(this, new sim_queueRowChangeEvent(((sim_queueRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sim_queueRowChanging != null)) {
                    this.sim_queueRowChanging(this, new sim_queueRowChangeEvent(((sim_queueRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sim_queueRowDeleted != null)) {
                    this.sim_queueRowDeleted(this, new sim_queueRowChangeEvent(((sim_queueRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sim_queueRowDeleting != null)) {
                    this.sim_queueRowDeleting(this, new sim_queueRowChangeEvent(((sim_queueRow)(e.Row)), e.Action));
                }
            }
            
            public void Removesim_queueRow(sim_queueRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sim_queueRow : DataRow {
            
            private sim_queueDataTable tablesim_queue;
            
            internal sim_queueRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablesim_queue = ((sim_queueDataTable)(this.Table));
            }
            
            public int run_id {
                get {
                    return ((int)(this[this.tablesim_queue.run_idColumn]));
                }
                set {
                    this[this.tablesim_queue.run_idColumn] = value;
                }
            }
            
            public int scenario_id {
                get {
                    return ((int)(this[this.tablesim_queue.scenario_idColumn]));
                }
                set {
                    this[this.tablesim_queue.scenario_idColumn] = value;
                }
            }
            
            public System.Byte status {
                get {
                    return ((System.Byte)(this[this.tablesim_queue.statusColumn]));
                }
                set {
                    this[this.tablesim_queue.statusColumn] = value;
                }
            }
            
            public int num {
                get {
                    return ((int)(this[this.tablesim_queue.numColumn]));
                }
                set {
                    this[this.tablesim_queue.numColumn] = value;
                }
            }
            
            public int model_id {
                get {
                    return ((int)(this[this.tablesim_queue.model_idColumn]));
                }
                set {
                    this[this.tablesim_queue.model_idColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablesim_queue.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.nameColumn] = value;
                }
            }
            
            public int elapsed_time {
                get {
                    try {
                        return ((int)(this[this.tablesim_queue.elapsed_timeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.elapsed_timeColumn] = value;
                }
            }
            
            public string current_status {
                get {
                    try {
                        return ((string)(this[this.tablesim_queue.current_statusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.current_statusColumn] = value;
                }
            }
            
            public System.DateTime current_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablesim_queue.current_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.current_dateColumn] = value;
                }
            }
            
            public System.DateTime run_time {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablesim_queue.run_timeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.run_timeColumn] = value;
                }
            }
            
            public int seed {
                get {
                    try {
                        return ((int)(this[this.tablesim_queue.seedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.seedColumn] = value;
                }
            }
            
            public int param_id {
                get {
                    try {
                        return ((int)(this[this.tablesim_queue.param_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesim_queue.param_idColumn] = value;
                }
            }
            
            public sim_statusRow sim_statusRow {
                get {
                    return ((sim_statusRow)(this.GetParentRow(this.Table.ParentRelations["sim_statussim_queue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["sim_statussim_queue"]);
                }
            }
            
            public scenarioRow scenarioRow {
                get {
                    return ((scenarioRow)(this.GetParentRow(this.Table.ParentRelations["scenariosim_queue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenariosim_queue"]);
                }
            }
            
            public Model_infoRow Model_infoRow {
                get {
                    return ((Model_infoRow)(this.GetParentRow(this.Table.ParentRelations["Model_infosim_queue"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Model_infosim_queue"]);
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tablesim_queue.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tablesim_queue.nameColumn] = System.Convert.DBNull;
            }
            
            public bool Iselapsed_timeNull() {
                return this.IsNull(this.tablesim_queue.elapsed_timeColumn);
            }
            
            public void Setelapsed_timeNull() {
                this[this.tablesim_queue.elapsed_timeColumn] = System.Convert.DBNull;
            }
            
            public bool Iscurrent_statusNull() {
                return this.IsNull(this.tablesim_queue.current_statusColumn);
            }
            
            public void Setcurrent_statusNull() {
                this[this.tablesim_queue.current_statusColumn] = System.Convert.DBNull;
            }
            
            public bool Iscurrent_dateNull() {
                return this.IsNull(this.tablesim_queue.current_dateColumn);
            }
            
            public void Setcurrent_dateNull() {
                this[this.tablesim_queue.current_dateColumn] = System.Convert.DBNull;
            }
            
            public bool Isrun_timeNull() {
                return this.IsNull(this.tablesim_queue.run_timeColumn);
            }
            
            public void Setrun_timeNull() {
                this[this.tablesim_queue.run_timeColumn] = System.Convert.DBNull;
            }
            
            public bool IsseedNull() {
                return this.IsNull(this.tablesim_queue.seedColumn);
            }
            
            public void SetseedNull() {
                this[this.tablesim_queue.seedColumn] = System.Convert.DBNull;
            }
            
            public bool Isparam_idNull() {
                return this.IsNull(this.tablesim_queue.param_idColumn);
            }
            
            public void Setparam_idNull() {
                this[this.tablesim_queue.param_idColumn] = System.Convert.DBNull;
            }
            
            public sim_variable_valueRow[] Getsim_variable_valueRows() {
                return ((sim_variable_valueRow[])(this.GetChildRows(this.Table.ChildRelations["sim_queuesim_variable_value"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sim_queueRowChangeEvent : EventArgs {
            
            private sim_queueRow eventRow;
            
            private DataRowAction eventAction;
            
            public sim_queueRowChangeEvent(sim_queueRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public sim_queueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sim_statusDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnstatus_id;
            
            private DataColumn columnstatus;
            
            internal sim_statusDataTable() : 
                    base("sim_status") {
                this.InitClass();
            }
            
            internal sim_statusDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn status_idColumn {
                get {
                    return this.columnstatus_id;
                }
            }
            
            internal DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            public sim_statusRow this[int index] {
                get {
                    return ((sim_statusRow)(this.Rows[index]));
                }
            }
            
            public event sim_statusRowChangeEventHandler sim_statusRowChanged;
            
            public event sim_statusRowChangeEventHandler sim_statusRowChanging;
            
            public event sim_statusRowChangeEventHandler sim_statusRowDeleted;
            
            public event sim_statusRowChangeEventHandler sim_statusRowDeleting;
            
            public void Addsim_statusRow(sim_statusRow row) {
                this.Rows.Add(row);
            }
            
            public sim_statusRow Addsim_statusRow(System.Byte status_id, string status) {
                sim_statusRow rowsim_statusRow = ((sim_statusRow)(this.NewRow()));
                rowsim_statusRow.ItemArray = new object[] {
                        status_id,
                        status};
                this.Rows.Add(rowsim_statusRow);
                return rowsim_statusRow;
            }
            
            public sim_statusRow FindBystatus_id(System.Byte status_id) {
                return ((sim_statusRow)(this.Rows.Find(new object[] {
                            status_id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                sim_statusDataTable cln = ((sim_statusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new sim_statusDataTable();
            }
            
            internal void InitVars() {
                this.columnstatus_id = this.Columns["status_id"];
                this.columnstatus = this.Columns["status"];
            }
            
            private void InitClass() {
                this.columnstatus_id = new DataColumn("status_id", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstatus_id);
                this.columnstatus = new DataColumn("status", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstatus);
                this.Constraints.Add(new UniqueConstraint("ModelInfoKey4", new DataColumn[] {
                                this.columnstatus_id}, true));
                this.columnstatus_id.AllowDBNull = false;
                this.columnstatus_id.Unique = true;
                this.columnstatus.AllowDBNull = false;
            }
            
            public sim_statusRow Newsim_statusRow() {
                return ((sim_statusRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new sim_statusRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(sim_statusRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sim_statusRowChanged != null)) {
                    this.sim_statusRowChanged(this, new sim_statusRowChangeEvent(((sim_statusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sim_statusRowChanging != null)) {
                    this.sim_statusRowChanging(this, new sim_statusRowChangeEvent(((sim_statusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sim_statusRowDeleted != null)) {
                    this.sim_statusRowDeleted(this, new sim_statusRowChangeEvent(((sim_statusRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sim_statusRowDeleting != null)) {
                    this.sim_statusRowDeleting(this, new sim_statusRowChangeEvent(((sim_statusRow)(e.Row)), e.Action));
                }
            }
            
            public void Removesim_statusRow(sim_statusRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sim_statusRow : DataRow {
            
            private sim_statusDataTable tablesim_status;
            
            internal sim_statusRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablesim_status = ((sim_statusDataTable)(this.Table));
            }
            
            public System.Byte status_id {
                get {
                    return ((System.Byte)(this[this.tablesim_status.status_idColumn]));
                }
                set {
                    this[this.tablesim_status.status_idColumn] = value;
                }
            }
            
            public string status {
                get {
                    return ((string)(this[this.tablesim_status.statusColumn]));
                }
                set {
                    this[this.tablesim_status.statusColumn] = value;
                }
            }
            
            public sim_queueRow[] Getsim_queueRows() {
                return ((sim_queueRow[])(this.GetChildRows(this.Table.ChildRelations["sim_statussim_queue"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sim_statusRowChangeEvent : EventArgs {
            
            private sim_statusRow eventRow;
            
            private DataRowAction eventAction;
            
            public sim_statusRowChangeEvent(sim_statusRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public sim_statusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_typeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnscenario_type_id;
            
            private DataColumn columntype;
            
            internal scenario_typeDataTable() : 
                    base("scenario_type") {
                this.InitClass();
            }
            
            internal scenario_typeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn scenario_type_idColumn {
                get {
                    return this.columnscenario_type_id;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            public scenario_typeRow this[int index] {
                get {
                    return ((scenario_typeRow)(this.Rows[index]));
                }
            }
            
            public event scenario_typeRowChangeEventHandler scenario_typeRowChanged;
            
            public event scenario_typeRowChangeEventHandler scenario_typeRowChanging;
            
            public event scenario_typeRowChangeEventHandler scenario_typeRowDeleted;
            
            public event scenario_typeRowChangeEventHandler scenario_typeRowDeleting;
            
            public void Addscenario_typeRow(scenario_typeRow row) {
                this.Rows.Add(row);
            }
            
            public scenario_typeRow Addscenario_typeRow(System.Byte scenario_type_id, string type) {
                scenario_typeRow rowscenario_typeRow = ((scenario_typeRow)(this.NewRow()));
                rowscenario_typeRow.ItemArray = new object[] {
                        scenario_type_id,
                        type};
                this.Rows.Add(rowscenario_typeRow);
                return rowscenario_typeRow;
            }
            
            public scenario_typeRow FindByscenario_type_id(System.Byte scenario_type_id) {
                return ((scenario_typeRow)(this.Rows.Find(new object[] {
                            scenario_type_id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                scenario_typeDataTable cln = ((scenario_typeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new scenario_typeDataTable();
            }
            
            internal void InitVars() {
                this.columnscenario_type_id = this.Columns["scenario_type_id"];
                this.columntype = this.Columns["type"];
            }
            
            private void InitClass() {
                this.columnscenario_type_id = new DataColumn("scenario_type_id", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscenario_type_id);
                this.columntype = new DataColumn("type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntype);
                this.Constraints.Add(new UniqueConstraint("ModelInfoKey5", new DataColumn[] {
                                this.columnscenario_type_id}, true));
                this.columnscenario_type_id.AllowDBNull = false;
                this.columnscenario_type_id.Unique = true;
                this.columntype.AllowDBNull = false;
            }
            
            public scenario_typeRow Newscenario_typeRow() {
                return ((scenario_typeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new scenario_typeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(scenario_typeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scenario_typeRowChanged != null)) {
                    this.scenario_typeRowChanged(this, new scenario_typeRowChangeEvent(((scenario_typeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scenario_typeRowChanging != null)) {
                    this.scenario_typeRowChanging(this, new scenario_typeRowChangeEvent(((scenario_typeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scenario_typeRowDeleted != null)) {
                    this.scenario_typeRowDeleted(this, new scenario_typeRowChangeEvent(((scenario_typeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scenario_typeRowDeleting != null)) {
                    this.scenario_typeRowDeleting(this, new scenario_typeRowChangeEvent(((scenario_typeRow)(e.Row)), e.Action));
                }
            }
            
            public void Removescenario_typeRow(scenario_typeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_typeRow : DataRow {
            
            private scenario_typeDataTable tablescenario_type;
            
            internal scenario_typeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablescenario_type = ((scenario_typeDataTable)(this.Table));
            }
            
            public System.Byte scenario_type_id {
                get {
                    return ((System.Byte)(this[this.tablescenario_type.scenario_type_idColumn]));
                }
                set {
                    this[this.tablescenario_type.scenario_type_idColumn] = value;
                }
            }
            
            public string type {
                get {
                    return ((string)(this[this.tablescenario_type.typeColumn]));
                }
                set {
                    this[this.tablescenario_type.typeColumn] = value;
                }
            }
            
            public scenarioRow[] GetscenarioRows() {
                return ((scenarioRow[])(this.GetChildRows(this.Table.ChildRelations["scenario_typescenario"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_typeRowChangeEvent : EventArgs {
            
            private scenario_typeRow eventRow;
            
            private DataRowAction eventAction;
            
            public scenario_typeRowChangeEvent(scenario_typeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public scenario_typeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class projectDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid;
            
            private DataColumn columnname;
            
            private DataColumn columndescr;
            
            private DataColumn columncreated;
            
            private DataColumn columnmodified;
            
            private DataColumn columnread_only;
            
            private DataColumn columnlocked;
            
            internal projectDataTable() : 
                    base("project") {
                this.InitClass();
            }
            
            internal projectDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn descrColumn {
                get {
                    return this.columndescr;
                }
            }
            
            internal DataColumn createdColumn {
                get {
                    return this.columncreated;
                }
            }
            
            internal DataColumn modifiedColumn {
                get {
                    return this.columnmodified;
                }
            }
            
            internal DataColumn read_onlyColumn {
                get {
                    return this.columnread_only;
                }
            }
            
            internal DataColumn lockedColumn {
                get {
                    return this.columnlocked;
                }
            }
            
            public projectRow this[int index] {
                get {
                    return ((projectRow)(this.Rows[index]));
                }
            }
            
            public event projectRowChangeEventHandler projectRowChanged;
            
            public event projectRowChangeEventHandler projectRowChanging;
            
            public event projectRowChangeEventHandler projectRowDeleted;
            
            public event projectRowChangeEventHandler projectRowDeleting;
            
            public void AddprojectRow(projectRow row) {
                this.Rows.Add(row);
            }
            
            public projectRow AddprojectRow(string name, string descr, System.DateTime created, System.DateTime modified, bool read_only, bool locked) {
                projectRow rowprojectRow = ((projectRow)(this.NewRow()));
                rowprojectRow.ItemArray = new object[] {
                        null,
                        name,
                        descr,
                        created,
                        modified,
                        read_only,
                        locked};
                this.Rows.Add(rowprojectRow);
                return rowprojectRow;
            }
            
            public projectRow FindByid(int id) {
                return ((projectRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                projectDataTable cln = ((projectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new projectDataTable();
            }
            
            internal void InitVars() {
                this.columnid = this.Columns["id"];
                this.columnname = this.Columns["name"];
                this.columndescr = this.Columns["descr"];
                this.columncreated = this.Columns["created"];
                this.columnmodified = this.Columns["modified"];
                this.columnread_only = this.Columns["read_only"];
                this.columnlocked = this.Columns["locked"];
            }
            
            private void InitClass() {
                this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnname);
                this.columndescr = new DataColumn("descr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescr);
                this.columncreated = new DataColumn("created", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreated);
                this.columnmodified = new DataColumn("modified", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodified);
                this.columnread_only = new DataColumn("read_only", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnread_only);
                this.columnlocked = new DataColumn("locked", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlocked);
                this.Constraints.Add(new UniqueConstraint("ModelInfoKey6", new DataColumn[] {
                                this.columnid}, true));
                this.columnid.AutoIncrement = true;
                this.columnid.AllowDBNull = false;
                this.columnid.ReadOnly = true;
                this.columnid.Unique = true;
                this.columnread_only.AllowDBNull = false;
                this.columnlocked.AllowDBNull = false;
            }
            
            public projectRow NewprojectRow() {
                return ((projectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new projectRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(projectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.projectRowChanged != null)) {
                    this.projectRowChanged(this, new projectRowChangeEvent(((projectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.projectRowChanging != null)) {
                    this.projectRowChanging(this, new projectRowChangeEvent(((projectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.projectRowDeleted != null)) {
                    this.projectRowDeleted(this, new projectRowChangeEvent(((projectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.projectRowDeleting != null)) {
                    this.projectRowDeleting(this, new projectRowChangeEvent(((projectRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveprojectRow(projectRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class projectRow : DataRow {
            
            private projectDataTable tableproject;
            
            internal projectRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableproject = ((projectDataTable)(this.Table));
            }
            
            public int id {
                get {
                    return ((int)(this[this.tableproject.idColumn]));
                }
                set {
                    this[this.tableproject.idColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableproject.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproject.nameColumn] = value;
                }
            }
            
            public string descr {
                get {
                    try {
                        return ((string)(this[this.tableproject.descrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproject.descrColumn] = value;
                }
            }
            
            public System.DateTime created {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableproject.createdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproject.createdColumn] = value;
                }
            }
            
            public System.DateTime modified {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableproject.modifiedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableproject.modifiedColumn] = value;
                }
            }
            
            public bool read_only {
                get {
                    return ((bool)(this[this.tableproject.read_onlyColumn]));
                }
                set {
                    this[this.tableproject.read_onlyColumn] = value;
                }
            }
            
            public bool locked {
                get {
                    return ((bool)(this[this.tableproject.lockedColumn]));
                }
                set {
                    this[this.tableproject.lockedColumn] = value;
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableproject.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableproject.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IsdescrNull() {
                return this.IsNull(this.tableproject.descrColumn);
            }
            
            public void SetdescrNull() {
                this[this.tableproject.descrColumn] = System.Convert.DBNull;
            }
            
            public bool IscreatedNull() {
                return this.IsNull(this.tableproject.createdColumn);
            }
            
            public void SetcreatedNull() {
                this[this.tableproject.createdColumn] = System.Convert.DBNull;
            }
            
            public bool IsmodifiedNull() {
                return this.IsNull(this.tableproject.modifiedColumn);
            }
            
            public void SetmodifiedNull() {
                this[this.tableproject.modifiedColumn] = System.Convert.DBNull;
            }
            
            public Model_infoRow[] GetModel_infoRowsByproject_Model_info() {
                return ((Model_infoRow[])(this.GetChildRows(this.Table.ChildRelations["project_Model_info"])));
            }
            
            public Model_infoRow[] GetModel_infoRowsByprojectModel_info() {
                return ((Model_infoRow[])(this.GetChildRows(this.Table.ChildRelations["projectModel_info"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class projectRowChangeEvent : EventArgs {
            
            private projectRow eventRow;
            
            private DataRowAction eventAction;
            
            public projectRowChangeEvent(projectRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public projectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Model_infoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnmodel_id;
            
            private DataColumn columnproject_id;
            
            private DataColumn columnmodel_name;
            
            private DataColumn columnmodel_type;
            
            private DataColumn columndescr;
            
            private DataColumn columnread_only;
            
            private DataColumn columnlocked;
            
            private DataColumn columncreated;
            
            private DataColumn columnmodified;
            
            private DataColumn columnstart_date;
            
            private DataColumn columnend_date;
            
            private DataColumn columntask_based;
            
            private DataColumn columnprofit_loss;
            
            private DataColumn columnproduct_extensions;
            
            private DataColumn columnproduct_dependency;
            
            private DataColumn columnsegment_growth;
            
            private DataColumn columnconsumer_budget;
            
            private DataColumn columnperiodic_price;
            
            private DataColumn columnpromoted_price;
            
            private DataColumn columndistribution;
            
            private DataColumn columndisplay;
            
            private DataColumn columnsocial_network;
            
            private DataColumn columnattribute_pre_and_post;
            
            private DataColumn columnapp_code;
            
            private DataColumn columnmarket_utility;
            
            private DataColumn columncheckpoint_file;
            
            private DataColumn columncheckpoint_date;
            
            private DataColumn columncheckpoint_valid;
            
            private DataColumn columnid;
            
            internal Model_infoDataTable() : 
                    base("Model_info") {
                this.InitClass();
            }
            
            internal Model_infoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn model_idColumn {
                get {
                    return this.columnmodel_id;
                }
            }
            
            internal DataColumn project_idColumn {
                get {
                    return this.columnproject_id;
                }
            }
            
            internal DataColumn model_nameColumn {
                get {
                    return this.columnmodel_name;
                }
            }
            
            internal DataColumn model_typeColumn {
                get {
                    return this.columnmodel_type;
                }
            }
            
            internal DataColumn descrColumn {
                get {
                    return this.columndescr;
                }
            }
            
            internal DataColumn read_onlyColumn {
                get {
                    return this.columnread_only;
                }
            }
            
            internal DataColumn lockedColumn {
                get {
                    return this.columnlocked;
                }
            }
            
            internal DataColumn createdColumn {
                get {
                    return this.columncreated;
                }
            }
            
            internal DataColumn modifiedColumn {
                get {
                    return this.columnmodified;
                }
            }
            
            internal DataColumn start_dateColumn {
                get {
                    return this.columnstart_date;
                }
            }
            
            internal DataColumn end_dateColumn {
                get {
                    return this.columnend_date;
                }
            }
            
            internal DataColumn task_basedColumn {
                get {
                    return this.columntask_based;
                }
            }
            
            internal DataColumn profit_lossColumn {
                get {
                    return this.columnprofit_loss;
                }
            }
            
            internal DataColumn product_extensionsColumn {
                get {
                    return this.columnproduct_extensions;
                }
            }
            
            internal DataColumn product_dependencyColumn {
                get {
                    return this.columnproduct_dependency;
                }
            }
            
            internal DataColumn segment_growthColumn {
                get {
                    return this.columnsegment_growth;
                }
            }
            
            internal DataColumn consumer_budgetColumn {
                get {
                    return this.columnconsumer_budget;
                }
            }
            
            internal DataColumn periodic_priceColumn {
                get {
                    return this.columnperiodic_price;
                }
            }
            
            internal DataColumn promoted_priceColumn {
                get {
                    return this.columnpromoted_price;
                }
            }
            
            internal DataColumn distributionColumn {
                get {
                    return this.columndistribution;
                }
            }
            
            internal DataColumn displayColumn {
                get {
                    return this.columndisplay;
                }
            }
            
            internal DataColumn social_networkColumn {
                get {
                    return this.columnsocial_network;
                }
            }
            
            internal DataColumn attribute_pre_and_postColumn {
                get {
                    return this.columnattribute_pre_and_post;
                }
            }
            
            internal DataColumn app_codeColumn {
                get {
                    return this.columnapp_code;
                }
            }
            
            internal DataColumn market_utilityColumn {
                get {
                    return this.columnmarket_utility;
                }
            }
            
            internal DataColumn checkpoint_fileColumn {
                get {
                    return this.columncheckpoint_file;
                }
            }
            
            internal DataColumn checkpoint_dateColumn {
                get {
                    return this.columncheckpoint_date;
                }
            }
            
            internal DataColumn checkpoint_validColumn {
                get {
                    return this.columncheckpoint_valid;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            public Model_infoRow this[int index] {
                get {
                    return ((Model_infoRow)(this.Rows[index]));
                }
            }
            
            public event Model_infoRowChangeEventHandler Model_infoRowChanged;
            
            public event Model_infoRowChangeEventHandler Model_infoRowChanging;
            
            public event Model_infoRowChangeEventHandler Model_infoRowDeleted;
            
            public event Model_infoRowChangeEventHandler Model_infoRowDeleting;
            
            public void AddModel_infoRow(Model_infoRow row) {
                this.Rows.Add(row);
            }
            
            public Model_infoRow AddModel_infoRow(
                        projectRow parentprojectRowByprojectModel_info, 
                        string model_name, 
                        int model_type, 
                        string descr, 
                        bool read_only, 
                        bool locked, 
                        System.DateTime created, 
                        System.DateTime modified, 
                        System.DateTime start_date, 
                        System.DateTime end_date, 
                        bool task_based, 
                        bool profit_loss, 
                        bool product_extensions, 
                        bool product_dependency, 
                        bool segment_growth, 
                        bool consumer_budget, 
                        bool periodic_price, 
                        bool promoted_price, 
                        bool distribution, 
                        bool display, 
                        bool social_network, 
                        bool attribute_pre_and_post, 
                        string app_code, 
                        bool market_utility, 
                        string checkpoint_file, 
                        System.DateTime checkpoint_date, 
                        bool checkpoint_valid, 
                        projectRow parentprojectRowByproject_Model_info) {
                Model_infoRow rowModel_infoRow = ((Model_infoRow)(this.NewRow()));
                rowModel_infoRow.ItemArray = new object[] {
                        null,
                        parentprojectRowByprojectModel_info[0],
                        model_name,
                        model_type,
                        descr,
                        read_only,
                        locked,
                        created,
                        modified,
                        start_date,
                        end_date,
                        task_based,
                        profit_loss,
                        product_extensions,
                        product_dependency,
                        segment_growth,
                        consumer_budget,
                        periodic_price,
                        promoted_price,
                        distribution,
                        display,
                        social_network,
                        attribute_pre_and_post,
                        app_code,
                        market_utility,
                        checkpoint_file,
                        checkpoint_date,
                        checkpoint_valid,
                        parentprojectRowByproject_Model_info[0]};
                this.Rows.Add(rowModel_infoRow);
                return rowModel_infoRow;
            }
            
            public Model_infoRow FindBymodel_id(int model_id) {
                return ((Model_infoRow)(this.Rows.Find(new object[] {
                            model_id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Model_infoDataTable cln = ((Model_infoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Model_infoDataTable();
            }
            
            internal void InitVars() {
                this.columnmodel_id = this.Columns["model_id"];
                this.columnproject_id = this.Columns["project_id"];
                this.columnmodel_name = this.Columns["model_name"];
                this.columnmodel_type = this.Columns["model_type"];
                this.columndescr = this.Columns["descr"];
                this.columnread_only = this.Columns["read_only"];
                this.columnlocked = this.Columns["locked"];
                this.columncreated = this.Columns["created"];
                this.columnmodified = this.Columns["modified"];
                this.columnstart_date = this.Columns["start_date"];
                this.columnend_date = this.Columns["end_date"];
                this.columntask_based = this.Columns["task_based"];
                this.columnprofit_loss = this.Columns["profit_loss"];
                this.columnproduct_extensions = this.Columns["product_extensions"];
                this.columnproduct_dependency = this.Columns["product_dependency"];
                this.columnsegment_growth = this.Columns["segment_growth"];
                this.columnconsumer_budget = this.Columns["consumer_budget"];
                this.columnperiodic_price = this.Columns["periodic_price"];
                this.columnpromoted_price = this.Columns["promoted_price"];
                this.columndistribution = this.Columns["distribution"];
                this.columndisplay = this.Columns["display"];
                this.columnsocial_network = this.Columns["social_network"];
                this.columnattribute_pre_and_post = this.Columns["attribute_pre_and_post"];
                this.columnapp_code = this.Columns["app_code"];
                this.columnmarket_utility = this.Columns["market_utility"];
                this.columncheckpoint_file = this.Columns["checkpoint_file"];
                this.columncheckpoint_date = this.Columns["checkpoint_date"];
                this.columncheckpoint_valid = this.Columns["checkpoint_valid"];
                this.columnid = this.Columns["id"];
            }
            
            private void InitClass() {
                this.columnmodel_id = new DataColumn("model_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodel_id);
                this.columnproject_id = new DataColumn("project_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnproject_id);
                this.columnmodel_name = new DataColumn("model_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodel_name);
                this.columnmodel_type = new DataColumn("model_type", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodel_type);
                this.columndescr = new DataColumn("descr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescr);
                this.columnread_only = new DataColumn("read_only", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnread_only);
                this.columnlocked = new DataColumn("locked", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlocked);
                this.columncreated = new DataColumn("created", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncreated);
                this.columnmodified = new DataColumn("modified", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodified);
                this.columnstart_date = new DataColumn("start_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnstart_date);
                this.columnend_date = new DataColumn("end_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnend_date);
                this.columntask_based = new DataColumn("task_based", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntask_based);
                this.columnprofit_loss = new DataColumn("profit_loss", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprofit_loss);
                this.columnproduct_extensions = new DataColumn("product_extensions", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnproduct_extensions);
                this.columnproduct_dependency = new DataColumn("product_dependency", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnproduct_dependency);
                this.columnsegment_growth = new DataColumn("segment_growth", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsegment_growth);
                this.columnconsumer_budget = new DataColumn("consumer_budget", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnconsumer_budget);
                this.columnperiodic_price = new DataColumn("periodic_price", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnperiodic_price);
                this.columnpromoted_price = new DataColumn("promoted_price", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpromoted_price);
                this.columndistribution = new DataColumn("distribution", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndistribution);
                this.columndisplay = new DataColumn("display", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndisplay);
                this.columnsocial_network = new DataColumn("social_network", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnsocial_network);
                this.columnattribute_pre_and_post = new DataColumn("attribute_pre_and_post", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnattribute_pre_and_post);
                this.columnapp_code = new DataColumn("app_code", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnapp_code);
                this.columnmarket_utility = new DataColumn("market_utility", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmarket_utility);
                this.columncheckpoint_file = new DataColumn("checkpoint_file", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncheckpoint_file);
                this.columncheckpoint_date = new DataColumn("checkpoint_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncheckpoint_date);
                this.columncheckpoint_valid = new DataColumn("checkpoint_valid", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncheckpoint_valid);
                this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnid);
                this.Constraints.Add(new UniqueConstraint("ModelInfoKey1", new DataColumn[] {
                                this.columnmodel_id}, true));
                this.columnmodel_id.AutoIncrement = true;
                this.columnmodel_id.AllowDBNull = false;
                this.columnmodel_id.ReadOnly = true;
                this.columnmodel_id.Unique = true;
                this.columnproject_id.AllowDBNull = false;
                this.columnmodel_type.AllowDBNull = false;
                this.columnread_only.AllowDBNull = false;
                this.columnlocked.AllowDBNull = false;
                this.columntask_based.AllowDBNull = false;
                this.columnprofit_loss.AllowDBNull = false;
                this.columnproduct_extensions.AllowDBNull = false;
                this.columnproduct_dependency.AllowDBNull = false;
                this.columnsegment_growth.AllowDBNull = false;
                this.columnconsumer_budget.AllowDBNull = false;
                this.columnperiodic_price.AllowDBNull = false;
                this.columnpromoted_price.AllowDBNull = false;
                this.columndistribution.AllowDBNull = false;
                this.columndisplay.AllowDBNull = false;
                this.columnsocial_network.AllowDBNull = false;
            }
            
            public Model_infoRow NewModel_infoRow() {
                return ((Model_infoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Model_infoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Model_infoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Model_infoRowChanged != null)) {
                    this.Model_infoRowChanged(this, new Model_infoRowChangeEvent(((Model_infoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Model_infoRowChanging != null)) {
                    this.Model_infoRowChanging(this, new Model_infoRowChangeEvent(((Model_infoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Model_infoRowDeleted != null)) {
                    this.Model_infoRowDeleted(this, new Model_infoRowChangeEvent(((Model_infoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Model_infoRowDeleting != null)) {
                    this.Model_infoRowDeleting(this, new Model_infoRowChangeEvent(((Model_infoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveModel_infoRow(Model_infoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Model_infoRow : DataRow {
            
            private Model_infoDataTable tableModel_info;
            
            internal Model_infoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableModel_info = ((Model_infoDataTable)(this.Table));
            }
            
            public int model_id {
                get {
                    return ((int)(this[this.tableModel_info.model_idColumn]));
                }
                set {
                    this[this.tableModel_info.model_idColumn] = value;
                }
            }
            
            public int project_id {
                get {
                    return ((int)(this[this.tableModel_info.project_idColumn]));
                }
                set {
                    this[this.tableModel_info.project_idColumn] = value;
                }
            }
            
            public string model_name {
                get {
                    try {
                        return ((string)(this[this.tableModel_info.model_nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.model_nameColumn] = value;
                }
            }
            
            public int model_type {
                get {
                    return ((int)(this[this.tableModel_info.model_typeColumn]));
                }
                set {
                    this[this.tableModel_info.model_typeColumn] = value;
                }
            }
            
            public string descr {
                get {
                    try {
                        return ((string)(this[this.tableModel_info.descrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.descrColumn] = value;
                }
            }
            
            public bool read_only {
                get {
                    return ((bool)(this[this.tableModel_info.read_onlyColumn]));
                }
                set {
                    this[this.tableModel_info.read_onlyColumn] = value;
                }
            }
            
            public bool locked {
                get {
                    return ((bool)(this[this.tableModel_info.lockedColumn]));
                }
                set {
                    this[this.tableModel_info.lockedColumn] = value;
                }
            }
            
            public System.DateTime created {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableModel_info.createdColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.createdColumn] = value;
                }
            }
            
            public System.DateTime modified {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableModel_info.modifiedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.modifiedColumn] = value;
                }
            }
            
            public System.DateTime start_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableModel_info.start_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.start_dateColumn] = value;
                }
            }
            
            public System.DateTime end_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableModel_info.end_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.end_dateColumn] = value;
                }
            }
            
            public bool task_based {
                get {
                    return ((bool)(this[this.tableModel_info.task_basedColumn]));
                }
                set {
                    this[this.tableModel_info.task_basedColumn] = value;
                }
            }
            
            public bool profit_loss {
                get {
                    return ((bool)(this[this.tableModel_info.profit_lossColumn]));
                }
                set {
                    this[this.tableModel_info.profit_lossColumn] = value;
                }
            }
            
            public bool product_extensions {
                get {
                    return ((bool)(this[this.tableModel_info.product_extensionsColumn]));
                }
                set {
                    this[this.tableModel_info.product_extensionsColumn] = value;
                }
            }
            
            public bool product_dependency {
                get {
                    return ((bool)(this[this.tableModel_info.product_dependencyColumn]));
                }
                set {
                    this[this.tableModel_info.product_dependencyColumn] = value;
                }
            }
            
            public bool segment_growth {
                get {
                    return ((bool)(this[this.tableModel_info.segment_growthColumn]));
                }
                set {
                    this[this.tableModel_info.segment_growthColumn] = value;
                }
            }
            
            public bool consumer_budget {
                get {
                    return ((bool)(this[this.tableModel_info.consumer_budgetColumn]));
                }
                set {
                    this[this.tableModel_info.consumer_budgetColumn] = value;
                }
            }
            
            public bool periodic_price {
                get {
                    return ((bool)(this[this.tableModel_info.periodic_priceColumn]));
                }
                set {
                    this[this.tableModel_info.periodic_priceColumn] = value;
                }
            }
            
            public bool promoted_price {
                get {
                    return ((bool)(this[this.tableModel_info.promoted_priceColumn]));
                }
                set {
                    this[this.tableModel_info.promoted_priceColumn] = value;
                }
            }
            
            public bool distribution {
                get {
                    return ((bool)(this[this.tableModel_info.distributionColumn]));
                }
                set {
                    this[this.tableModel_info.distributionColumn] = value;
                }
            }
            
            public bool display {
                get {
                    return ((bool)(this[this.tableModel_info.displayColumn]));
                }
                set {
                    this[this.tableModel_info.displayColumn] = value;
                }
            }
            
            public bool social_network {
                get {
                    return ((bool)(this[this.tableModel_info.social_networkColumn]));
                }
                set {
                    this[this.tableModel_info.social_networkColumn] = value;
                }
            }
            
            public bool attribute_pre_and_post {
                get {
                    try {
                        return ((bool)(this[this.tableModel_info.attribute_pre_and_postColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.attribute_pre_and_postColumn] = value;
                }
            }
            
            public string app_code {
                get {
                    try {
                        return ((string)(this[this.tableModel_info.app_codeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.app_codeColumn] = value;
                }
            }
            
            public bool market_utility {
                get {
                    try {
                        return ((bool)(this[this.tableModel_info.market_utilityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.market_utilityColumn] = value;
                }
            }
            
            public string checkpoint_file {
                get {
                    try {
                        return ((string)(this[this.tableModel_info.checkpoint_fileColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.checkpoint_fileColumn] = value;
                }
            }
            
            public System.DateTime checkpoint_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableModel_info.checkpoint_dateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.checkpoint_dateColumn] = value;
                }
            }
            
            public bool checkpoint_valid {
                get {
                    try {
                        return ((bool)(this[this.tableModel_info.checkpoint_validColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModel_info.checkpoint_validColumn] = value;
                }
            }
            
            public projectRow projectRowByproject_Model_info {
                get {
                    return ((projectRow)(this.GetParentRow(this.Table.ParentRelations["project_Model_info"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["project_Model_info"]);
                }
            }
            
            public projectRow projectRowByprojectModel_info {
                get {
                    return ((projectRow)(this.GetParentRow(this.Table.ParentRelations["projectModel_info"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["projectModel_info"]);
                }
            }
            
            public bool Ismodel_nameNull() {
                return this.IsNull(this.tableModel_info.model_nameColumn);
            }
            
            public void Setmodel_nameNull() {
                this[this.tableModel_info.model_nameColumn] = System.Convert.DBNull;
            }
            
            public bool IsdescrNull() {
                return this.IsNull(this.tableModel_info.descrColumn);
            }
            
            public void SetdescrNull() {
                this[this.tableModel_info.descrColumn] = System.Convert.DBNull;
            }
            
            public bool IscreatedNull() {
                return this.IsNull(this.tableModel_info.createdColumn);
            }
            
            public void SetcreatedNull() {
                this[this.tableModel_info.createdColumn] = System.Convert.DBNull;
            }
            
            public bool IsmodifiedNull() {
                return this.IsNull(this.tableModel_info.modifiedColumn);
            }
            
            public void SetmodifiedNull() {
                this[this.tableModel_info.modifiedColumn] = System.Convert.DBNull;
            }
            
            public bool Isstart_dateNull() {
                return this.IsNull(this.tableModel_info.start_dateColumn);
            }
            
            public void Setstart_dateNull() {
                this[this.tableModel_info.start_dateColumn] = System.Convert.DBNull;
            }
            
            public bool Isend_dateNull() {
                return this.IsNull(this.tableModel_info.end_dateColumn);
            }
            
            public void Setend_dateNull() {
                this[this.tableModel_info.end_dateColumn] = System.Convert.DBNull;
            }
            
            public bool Isattribute_pre_and_postNull() {
                return this.IsNull(this.tableModel_info.attribute_pre_and_postColumn);
            }
            
            public void Setattribute_pre_and_postNull() {
                this[this.tableModel_info.attribute_pre_and_postColumn] = System.Convert.DBNull;
            }
            
            public bool Isapp_codeNull() {
                return this.IsNull(this.tableModel_info.app_codeColumn);
            }
            
            public void Setapp_codeNull() {
                this[this.tableModel_info.app_codeColumn] = System.Convert.DBNull;
            }
            
            public bool Ismarket_utilityNull() {
                return this.IsNull(this.tableModel_info.market_utilityColumn);
            }
            
            public void Setmarket_utilityNull() {
                this[this.tableModel_info.market_utilityColumn] = System.Convert.DBNull;
            }
            
            public bool Ischeckpoint_fileNull() {
                return this.IsNull(this.tableModel_info.checkpoint_fileColumn);
            }
            
            public void Setcheckpoint_fileNull() {
                this[this.tableModel_info.checkpoint_fileColumn] = System.Convert.DBNull;
            }
            
            public bool Ischeckpoint_dateNull() {
                return this.IsNull(this.tableModel_info.checkpoint_dateColumn);
            }
            
            public void Setcheckpoint_dateNull() {
                this[this.tableModel_info.checkpoint_dateColumn] = System.Convert.DBNull;
            }
            
            public bool Ischeckpoint_validNull() {
                return this.IsNull(this.tableModel_info.checkpoint_validColumn);
            }
            
            public void Setcheckpoint_validNull() {
                this[this.tableModel_info.checkpoint_validColumn] = System.Convert.DBNull;
            }
            
            public scenarioRow[] GetscenarioRows() {
                return ((scenarioRow[])(this.GetChildRows(this.Table.ChildRelations["Model_infoscenario"])));
            }
            
            public sim_queueRow[] Getsim_queueRows() {
                return ((sim_queueRow[])(this.GetChildRows(this.Table.ChildRelations["Model_infosim_queue"])));
            }
            
            public scenario_parameterRow[] Getscenario_parameterRows() {
                return ((scenario_parameterRow[])(this.GetChildRows(this.Table.ChildRelations["Model_infoscenario_parameter"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Model_infoRowChangeEvent : EventArgs {
            
            private Model_infoRow eventRow;
            
            private DataRowAction eventAction;
            
            public Model_infoRowChangeEvent(Model_infoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Model_infoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sim_variable_valueDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnrun_id;
            
            private DataColumn columnvar_id;
            
            private DataColumn columnval;
            
            internal sim_variable_valueDataTable() : 
                    base("sim_variable_value") {
                this.InitClass();
            }
            
            internal sim_variable_valueDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn run_idColumn {
                get {
                    return this.columnrun_id;
                }
            }
            
            internal DataColumn var_idColumn {
                get {
                    return this.columnvar_id;
                }
            }
            
            internal DataColumn valColumn {
                get {
                    return this.columnval;
                }
            }
            
            public sim_variable_valueRow this[int index] {
                get {
                    return ((sim_variable_valueRow)(this.Rows[index]));
                }
            }
            
            public event sim_variable_valueRowChangeEventHandler sim_variable_valueRowChanged;
            
            public event sim_variable_valueRowChangeEventHandler sim_variable_valueRowChanging;
            
            public event sim_variable_valueRowChangeEventHandler sim_variable_valueRowDeleted;
            
            public event sim_variable_valueRowChangeEventHandler sim_variable_valueRowDeleting;
            
            public void Addsim_variable_valueRow(sim_variable_valueRow row) {
                this.Rows.Add(row);
            }
            
            public sim_variable_valueRow Addsim_variable_valueRow(sim_queueRow parentsim_queueRowBysim_queuesim_variable_value, scenario_variableRow parentscenario_variableRowByscenario_variablesim_variable_value, System.Double val) {
                sim_variable_valueRow rowsim_variable_valueRow = ((sim_variable_valueRow)(this.NewRow()));
                rowsim_variable_valueRow.ItemArray = new object[] {
                        parentsim_queueRowBysim_queuesim_variable_value[0],
                        parentscenario_variableRowByscenario_variablesim_variable_value[1],
                        val};
                this.Rows.Add(rowsim_variable_valueRow);
                return rowsim_variable_valueRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                sim_variable_valueDataTable cln = ((sim_variable_valueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new sim_variable_valueDataTable();
            }
            
            internal void InitVars() {
                this.columnrun_id = this.Columns["run_id"];
                this.columnvar_id = this.Columns["var_id"];
                this.columnval = this.Columns["val"];
            }
            
            private void InitClass() {
                this.columnrun_id = new DataColumn("run_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrun_id);
                this.columnvar_id = new DataColumn("var_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvar_id);
                this.columnval = new DataColumn("val", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnval);
                this.columnrun_id.AllowDBNull = false;
                this.columnvar_id.AllowDBNull = false;
                this.columnval.AllowDBNull = false;
            }
            
            public sim_variable_valueRow Newsim_variable_valueRow() {
                return ((sim_variable_valueRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new sim_variable_valueRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(sim_variable_valueRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sim_variable_valueRowChanged != null)) {
                    this.sim_variable_valueRowChanged(this, new sim_variable_valueRowChangeEvent(((sim_variable_valueRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sim_variable_valueRowChanging != null)) {
                    this.sim_variable_valueRowChanging(this, new sim_variable_valueRowChangeEvent(((sim_variable_valueRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sim_variable_valueRowDeleted != null)) {
                    this.sim_variable_valueRowDeleted(this, new sim_variable_valueRowChangeEvent(((sim_variable_valueRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sim_variable_valueRowDeleting != null)) {
                    this.sim_variable_valueRowDeleting(this, new sim_variable_valueRowChangeEvent(((sim_variable_valueRow)(e.Row)), e.Action));
                }
            }
            
            public void Removesim_variable_valueRow(sim_variable_valueRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sim_variable_valueRow : DataRow {
            
            private sim_variable_valueDataTable tablesim_variable_value;
            
            internal sim_variable_valueRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablesim_variable_value = ((sim_variable_valueDataTable)(this.Table));
            }
            
            public int run_id {
                get {
                    return ((int)(this[this.tablesim_variable_value.run_idColumn]));
                }
                set {
                    this[this.tablesim_variable_value.run_idColumn] = value;
                }
            }
            
            public int var_id {
                get {
                    return ((int)(this[this.tablesim_variable_value.var_idColumn]));
                }
                set {
                    this[this.tablesim_variable_value.var_idColumn] = value;
                }
            }
            
            public System.Double val {
                get {
                    return ((System.Double)(this[this.tablesim_variable_value.valColumn]));
                }
                set {
                    this[this.tablesim_variable_value.valColumn] = value;
                }
            }
            
            public sim_queueRow sim_queueRow {
                get {
                    return ((sim_queueRow)(this.GetParentRow(this.Table.ParentRelations["sim_queuesim_variable_value"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["sim_queuesim_variable_value"]);
                }
            }
            
            public scenario_variableRow scenario_variableRow {
                get {
                    return ((scenario_variableRow)(this.GetParentRow(this.Table.ParentRelations["scenario_variablesim_variable_value"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenario_variablesim_variable_value"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class sim_variable_valueRowChangeEvent : EventArgs {
            
            private sim_variable_valueRow eventRow;
            
            private DataRowAction eventAction;
            
            public sim_variable_valueRowChangeEvent(sim_variable_valueRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public sim_variable_valueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_variableDataTable : DataTable, System.Collections.IEnumerable {
          
            private DataColumn columnscenario_id;
            
            private DataColumn columnid;
            
            private DataColumn columntoken;
            
            private DataColumn columndescr;
            
            private DataColumn columnmin;
            
            private DataColumn columnmax;
            
            private DataColumn columnnum_steps;
            
            private DataColumn columntype;
            
            private DataColumn columnproduct_id;
            
            internal scenario_variableDataTable() : 
                    base("scenario_variable") {
                this.InitClass();
            }
            
            internal scenario_variableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn scenario_idColumn {
                get {
                    return this.columnscenario_id;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn tokenColumn {
                get {
                    return this.columntoken;
                }
            }
            
            internal DataColumn descrColumn {
                get {
                    return this.columndescr;
                }
            }
            
            internal DataColumn minColumn {
                get {
                    return this.columnmin;
                }
            }
            
            internal DataColumn maxColumn {
                get {
                    return this.columnmax;
                }
            }
            
            internal DataColumn num_stepsColumn {
                get {
                    return this.columnnum_steps;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            internal DataColumn product_idColumn {
                get {
                    return this.columnproduct_id;
                }
            }
            
            public scenario_variableRow this[int index] {
                get {
                    return ((scenario_variableRow)(this.Rows[index]));
                }
            }
            
            public event scenario_variableRowChangeEventHandler scenario_variableRowChanged;
            
            public event scenario_variableRowChangeEventHandler scenario_variableRowChanging;
            
            public event scenario_variableRowChangeEventHandler scenario_variableRowDeleted;
            
            public event scenario_variableRowChangeEventHandler scenario_variableRowDeleting;
            
            public void Addscenario_variableRow(scenario_variableRow row) {
                this.Rows.Add(row);
            }
            
            public scenario_variableRow Addscenario_variableRow(scenarioRow parentscenarioRowByscenarioscenario_variable, string token, string descr, System.Double min, System.Double max, int num_steps, System.Byte type, int product_id) {
                scenario_variableRow rowscenario_variableRow = ((scenario_variableRow)(this.NewRow()));
                rowscenario_variableRow.ItemArray = new object[] {
                        parentscenarioRowByscenarioscenario_variable[0],
                        null,
                        token,
                        descr,
                        min,
                        max,
                        num_steps,
                        type,
                        product_id};
                this.Rows.Add(rowscenario_variableRow);
                return rowscenario_variableRow;
            }
            
            public scenario_variableRow FindByid(int id) {
                return ((scenario_variableRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                scenario_variableDataTable cln = ((scenario_variableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new scenario_variableDataTable();
            }
            
            internal void InitVars() {
                this.columnscenario_id = this.Columns["scenario_id"];
                this.columnid = this.Columns["id"];
                this.columntoken = this.Columns["token"];
                this.columndescr = this.Columns["descr"];
                this.columnmin = this.Columns["min"];
                this.columnmax = this.Columns["max"];
                this.columnnum_steps = this.Columns["num_steps"];
                this.columntype = this.Columns["type"];
                this.columnproduct_id = this.Columns["product_id"];
            }
            
            private void InitClass() {
                this.columnscenario_id = new DataColumn("scenario_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscenario_id);
                this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid);
                this.columntoken = new DataColumn("token", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntoken);
                this.columndescr = new DataColumn("descr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescr);
                this.columnmin = new DataColumn("min", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmin);
                this.columnmax = new DataColumn("max", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmax);
                this.columnnum_steps = new DataColumn("num_steps", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnum_steps);
                this.columntype = new DataColumn("type", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntype);
                this.columnproduct_id = new DataColumn("product_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnproduct_id);
                this.Constraints.Add(new UniqueConstraint("ModelInfoKey13", new DataColumn[] {
                                this.columnid}, true));
                this.columnscenario_id.AllowDBNull = false;
                this.columnid.AutoIncrement = true;
                this.columnid.AllowDBNull = false;
                this.columnid.ReadOnly = true;
                this.columnid.Unique = true;
                this.columnmin.AllowDBNull = false;
                this.columnmax.AllowDBNull = false;
                this.columnnum_steps.AllowDBNull = false;
            }
            
            public scenario_variableRow Newscenario_variableRow() {
                return ((scenario_variableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new scenario_variableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(scenario_variableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scenario_variableRowChanged != null)) {
                    this.scenario_variableRowChanged(this, new scenario_variableRowChangeEvent(((scenario_variableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scenario_variableRowChanging != null)) {
                    this.scenario_variableRowChanging(this, new scenario_variableRowChangeEvent(((scenario_variableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scenario_variableRowDeleted != null)) {
                    this.scenario_variableRowDeleted(this, new scenario_variableRowChangeEvent(((scenario_variableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scenario_variableRowDeleting != null)) {
                    this.scenario_variableRowDeleting(this, new scenario_variableRowChangeEvent(((scenario_variableRow)(e.Row)), e.Action));
                }
            }
            
            public void Removescenario_variableRow(scenario_variableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_variableRow : DataRow {
            
            private scenario_variableDataTable tablescenario_variable;
            
            internal scenario_variableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablescenario_variable = ((scenario_variableDataTable)(this.Table));
            }
            
            public int scenario_id {
                get {
                    return ((int)(this[this.tablescenario_variable.scenario_idColumn]));
                }
                set {
                    this[this.tablescenario_variable.scenario_idColumn] = value;
                }
            }
            
            public int id {
                get {
                    return ((int)(this[this.tablescenario_variable.idColumn]));
                }
                set {
                    this[this.tablescenario_variable.idColumn] = value;
                }
            }
            
            public string token {
                get {
                    try {
                        return ((string)(this[this.tablescenario_variable.tokenColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario_variable.tokenColumn] = value;
                }
            }
            
            public string descr {
                get {
                    try {
                        return ((string)(this[this.tablescenario_variable.descrColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario_variable.descrColumn] = value;
                }
            }
            
            public System.Double min {
                get {
                    return ((System.Double)(this[this.tablescenario_variable.minColumn]));
                }
                set {
                    this[this.tablescenario_variable.minColumn] = value;
                }
            }
            
            public System.Double max {
                get {
                    return ((System.Double)(this[this.tablescenario_variable.maxColumn]));
                }
                set {
                    this[this.tablescenario_variable.maxColumn] = value;
                }
            }
            
            public int num_steps {
                get {
                    return ((int)(this[this.tablescenario_variable.num_stepsColumn]));
                }
                set {
                    this[this.tablescenario_variable.num_stepsColumn] = value;
                }
            }
            
            public System.Byte type {
                get {
                    try {
                        return ((System.Byte)(this[this.tablescenario_variable.typeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario_variable.typeColumn] = value;
                }
            }
            
            public int product_id {
                get {
                    try {
                        return ((int)(this[this.tablescenario_variable.product_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario_variable.product_idColumn] = value;
                }
            }
            
            public scenarioRow scenarioRow {
                get {
                    return ((scenarioRow)(this.GetParentRow(this.Table.ParentRelations["scenarioscenario_variable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenarioscenario_variable"]);
                }
            }
            
            public bool IstokenNull() {
                return this.IsNull(this.tablescenario_variable.tokenColumn);
            }
            
            public void SettokenNull() {
                this[this.tablescenario_variable.tokenColumn] = System.Convert.DBNull;
            }
            
            public bool IsdescrNull() {
                return this.IsNull(this.tablescenario_variable.descrColumn);
            }
            
            public void SetdescrNull() {
                this[this.tablescenario_variable.descrColumn] = System.Convert.DBNull;
            }
            
            public bool IstypeNull() {
                return this.IsNull(this.tablescenario_variable.typeColumn);
            }
            
            public void SettypeNull() {
                this[this.tablescenario_variable.typeColumn] = System.Convert.DBNull;
            }
            
            public bool Isproduct_idNull() {
                return this.IsNull(this.tablescenario_variable.product_idColumn);
            }
            
            public void Setproduct_idNull() {
                this[this.tablescenario_variable.product_idColumn] = System.Convert.DBNull;
            }
            
            public sim_variable_valueRow[] Getsim_variable_valueRows() {
                return ((sim_variable_valueRow[])(this.GetChildRows(this.Table.ChildRelations["scenario_variablesim_variable_value"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_variableRowChangeEvent : EventArgs {
            
            private scenario_variableRow eventRow;
            
            private DataRowAction eventAction;
            
            public scenario_variableRowChangeEvent(scenario_variableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public scenario_variableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_parameterDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnmodel_id;
            
            private DataColumn columnscenario_id;
            
            private DataColumn columnparam_id;
            
            private DataColumn columnaValue;
            
            private DataColumn columnexpression;
            
            internal scenario_parameterDataTable() : 
                    base("scenario_parameter") {
                this.InitClass();
            }
            
            internal scenario_parameterDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn model_idColumn {
                get {
                    return this.columnmodel_id;
                }
            }
            
            internal DataColumn scenario_idColumn {
                get {
                    return this.columnscenario_id;
                }
            }
            
            internal DataColumn param_idColumn {
                get {
                    return this.columnparam_id;
                }
            }
            
            internal DataColumn aValueColumn {
                get {
                    return this.columnaValue;
                }
            }
            
            internal DataColumn expressionColumn {
                get {
                    return this.columnexpression;
                }
            }
            
            public scenario_parameterRow this[int index] {
                get {
                    return ((scenario_parameterRow)(this.Rows[index]));
                }
            }
            
            public event scenario_parameterRowChangeEventHandler scenario_parameterRowChanged;
            
            public event scenario_parameterRowChangeEventHandler scenario_parameterRowChanging;
            
            public event scenario_parameterRowChangeEventHandler scenario_parameterRowDeleted;
            
            public event scenario_parameterRowChangeEventHandler scenario_parameterRowDeleting;
            
            public void Addscenario_parameterRow(scenario_parameterRow row) {
                this.Rows.Add(row);
            }
            
            public scenario_parameterRow Addscenario_parameterRow(Model_infoRow parentModel_infoRowByModel_infoscenario_parameter, scenarioRow parentscenarioRowByscenarioscenario_parameter, int param_id, System.Double aValue, string expression) {
                scenario_parameterRow rowscenario_parameterRow = ((scenario_parameterRow)(this.NewRow()));
                rowscenario_parameterRow.ItemArray = new object[] {
                        parentModel_infoRowByModel_infoscenario_parameter[0],
                        parentscenarioRowByscenarioscenario_parameter[0],
                        param_id,
                        aValue,
                        expression};
                this.Rows.Add(rowscenario_parameterRow);
                return rowscenario_parameterRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                scenario_parameterDataTable cln = ((scenario_parameterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new scenario_parameterDataTable();
            }
            
            internal void InitVars() {
                this.columnmodel_id = this.Columns["model_id"];
                this.columnscenario_id = this.Columns["scenario_id"];
                this.columnparam_id = this.Columns["param_id"];
                this.columnaValue = this.Columns["aValue"];
                this.columnexpression = this.Columns["expression"];
            }
            
            private void InitClass() {
                this.columnmodel_id = new DataColumn("model_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodel_id);
                this.columnscenario_id = new DataColumn("scenario_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscenario_id);
                this.columnparam_id = new DataColumn("param_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnparam_id);
                this.columnaValue = new DataColumn("aValue", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnaValue);
                this.columnexpression = new DataColumn("expression", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnexpression);
                this.columnmodel_id.AllowDBNull = false;
                this.columnscenario_id.AllowDBNull = false;
                this.columnparam_id.AllowDBNull = false;
                this.columnaValue.AllowDBNull = false;
            }
            
            public scenario_parameterRow Newscenario_parameterRow() {
                return ((scenario_parameterRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new scenario_parameterRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(scenario_parameterRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scenario_parameterRowChanged != null)) {
                    this.scenario_parameterRowChanged(this, new scenario_parameterRowChangeEvent(((scenario_parameterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scenario_parameterRowChanging != null)) {
                    this.scenario_parameterRowChanging(this, new scenario_parameterRowChangeEvent(((scenario_parameterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scenario_parameterRowDeleted != null)) {
                    this.scenario_parameterRowDeleted(this, new scenario_parameterRowChangeEvent(((scenario_parameterRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scenario_parameterRowDeleting != null)) {
                    this.scenario_parameterRowDeleting(this, new scenario_parameterRowChangeEvent(((scenario_parameterRow)(e.Row)), e.Action));
                }
            }
            
            public void Removescenario_parameterRow(scenario_parameterRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_parameterRow : DataRow {
            
            private scenario_parameterDataTable tablescenario_parameter;
            
            internal scenario_parameterRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablescenario_parameter = ((scenario_parameterDataTable)(this.Table));
            }
            
            public int model_id {
                get {
                    return ((int)(this[this.tablescenario_parameter.model_idColumn]));
                }
                set {
                    this[this.tablescenario_parameter.model_idColumn] = value;
                }
            }
            
            public int scenario_id {
                get {
                    return ((int)(this[this.tablescenario_parameter.scenario_idColumn]));
                }
                set {
                    this[this.tablescenario_parameter.scenario_idColumn] = value;
                }
            }
            
            public int param_id {
                get {
                    return ((int)(this[this.tablescenario_parameter.param_idColumn]));
                }
                set {
                    this[this.tablescenario_parameter.param_idColumn] = value;
                }
            }
            
            public System.Double aValue {
                get {
                    return ((System.Double)(this[this.tablescenario_parameter.aValueColumn]));
                }
                set {
                    this[this.tablescenario_parameter.aValueColumn] = value;
                }
            }
            
            public string expression {
                get {
                    try {
                        return ((string)(this[this.tablescenario_parameter.expressionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablescenario_parameter.expressionColumn] = value;
                }
            }
            
            public scenarioRow scenarioRow {
                get {
                    return ((scenarioRow)(this.GetParentRow(this.Table.ParentRelations["scenarioscenario_parameter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenarioscenario_parameter"]);
                }
            }
            
            public Model_infoRow Model_infoRow {
                get {
                    return ((Model_infoRow)(this.GetParentRow(this.Table.ParentRelations["Model_infoscenario_parameter"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Model_infoscenario_parameter"]);
                }
            }
            
            public bool IsexpressionNull() {
                return this.IsNull(this.tablescenario_parameter.expressionColumn);
            }
            
            public void SetexpressionNull() {
                this[this.tablescenario_parameter.expressionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_parameterRowChangeEvent : EventArgs {
            
            private scenario_parameterRow eventRow;
            
            private DataRowAction eventAction;
            
            public scenario_parameterRowChangeEvent(scenario_parameterRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public scenario_parameterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_simseedDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnscenario_id;
            
            private DataColumn columnid;
            
            private DataColumn columnseed;
            
            internal scenario_simseedDataTable() : 
                    base("scenario_simseed") {
                this.InitClass();
            }
            
            internal scenario_simseedDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn scenario_idColumn {
                get {
                    return this.columnscenario_id;
                }
            }
            
            internal DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            internal DataColumn seedColumn {
                get {
                    return this.columnseed;
                }
            }
            
            public scenario_simseedRow this[int index] {
                get {
                    return ((scenario_simseedRow)(this.Rows[index]));
                }
            }
            
            public event scenario_simseedRowChangeEventHandler scenario_simseedRowChanged;
            
            public event scenario_simseedRowChangeEventHandler scenario_simseedRowChanging;
            
            public event scenario_simseedRowChangeEventHandler scenario_simseedRowDeleted;
            
            public event scenario_simseedRowChangeEventHandler scenario_simseedRowDeleting;
            
            public void Addscenario_simseedRow(scenario_simseedRow row) {
                this.Rows.Add(row);
            }
            
            public scenario_simseedRow Addscenario_simseedRow(scenarioRow parentscenarioRowByscenarioscenario_simseed, int seed) {
                scenario_simseedRow rowscenario_simseedRow = ((scenario_simseedRow)(this.NewRow()));
                rowscenario_simseedRow.ItemArray = new object[] {
                        parentscenarioRowByscenarioscenario_simseed[0],
                        null,
                        seed};
                this.Rows.Add(rowscenario_simseedRow);
                return rowscenario_simseedRow;
            }
            
            public scenario_simseedRow FindByid(int id) {
                return ((scenario_simseedRow)(this.Rows.Find(new object[] {
                            id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                scenario_simseedDataTable cln = ((scenario_simseedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new scenario_simseedDataTable();
            }
            
            internal void InitVars() {
                this.columnscenario_id = this.Columns["scenario_id"];
                this.columnid = this.Columns["id"];
                this.columnseed = this.Columns["seed"];
            }
            
            private void InitClass() {
                this.columnscenario_id = new DataColumn("scenario_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscenario_id);
                this.columnid = new DataColumn("id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid);
                this.columnseed = new DataColumn("seed", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnseed);
                this.Constraints.Add(new UniqueConstraint("ModelInfoKey14", new DataColumn[] {
                                this.columnid}, true));
                this.columnscenario_id.AllowDBNull = false;
                this.columnid.AutoIncrement = true;
                this.columnid.AllowDBNull = false;
                this.columnid.ReadOnly = true;
                this.columnid.Unique = true;
                this.columnseed.AllowDBNull = false;
            }
            
            public scenario_simseedRow Newscenario_simseedRow() {
                return ((scenario_simseedRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new scenario_simseedRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(scenario_simseedRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scenario_simseedRowChanged != null)) {
                    this.scenario_simseedRowChanged(this, new scenario_simseedRowChangeEvent(((scenario_simseedRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scenario_simseedRowChanging != null)) {
                    this.scenario_simseedRowChanging(this, new scenario_simseedRowChangeEvent(((scenario_simseedRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scenario_simseedRowDeleted != null)) {
                    this.scenario_simseedRowDeleted(this, new scenario_simseedRowChangeEvent(((scenario_simseedRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scenario_simseedRowDeleting != null)) {
                    this.scenario_simseedRowDeleting(this, new scenario_simseedRowChangeEvent(((scenario_simseedRow)(e.Row)), e.Action));
                }
            }
            
            public void Removescenario_simseedRow(scenario_simseedRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_simseedRow : DataRow {
            
            private scenario_simseedDataTable tablescenario_simseed;
            
            internal scenario_simseedRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablescenario_simseed = ((scenario_simseedDataTable)(this.Table));
            }
            
            public int scenario_id {
                get {
                    return ((int)(this[this.tablescenario_simseed.scenario_idColumn]));
                }
                set {
                    this[this.tablescenario_simseed.scenario_idColumn] = value;
                }
            }
            
            public int id {
                get {
                    return ((int)(this[this.tablescenario_simseed.idColumn]));
                }
                set {
                    this[this.tablescenario_simseed.idColumn] = value;
                }
            }
            
            public int seed {
                get {
                    return ((int)(this[this.tablescenario_simseed.seedColumn]));
                }
                set {
                    this[this.tablescenario_simseed.seedColumn] = value;
                }
            }
            
            public scenarioRow scenarioRow {
                get {
                    return ((scenarioRow)(this.GetParentRow(this.Table.ParentRelations["scenarioscenario_simseed"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenarioscenario_simseed"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_simseedRowChangeEvent : EventArgs {
            
            private scenario_simseedRow eventRow;
            
            private DataRowAction eventAction;
            
            public scenario_simseedRowChangeEvent(scenario_simseedRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public scenario_simseedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class variable_typeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntype_id;
            
            private DataColumn columntype;
            
            internal variable_typeDataTable() : 
                    base("variable_type") {
                this.InitClass();
            }
            
            internal variable_typeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn type_idColumn {
                get {
                    return this.columntype_id;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            public variable_typeRow this[int index] {
                get {
                    return ((variable_typeRow)(this.Rows[index]));
                }
            }
            
            public event variable_typeRowChangeEventHandler variable_typeRowChanged;
            
            public event variable_typeRowChangeEventHandler variable_typeRowChanging;
            
            public event variable_typeRowChangeEventHandler variable_typeRowDeleted;
            
            public event variable_typeRowChangeEventHandler variable_typeRowDeleting;
            
            public void Addvariable_typeRow(variable_typeRow row) {
                this.Rows.Add(row);
            }
            
            public variable_typeRow Addvariable_typeRow(System.Byte type_id, string type) {
                variable_typeRow rowvariable_typeRow = ((variable_typeRow)(this.NewRow()));
                rowvariable_typeRow.ItemArray = new object[] {
                        type_id,
                        type};
                this.Rows.Add(rowvariable_typeRow);
                return rowvariable_typeRow;
            }
            
            public variable_typeRow FindBytype_id(System.Byte type_id) {
                return ((variable_typeRow)(this.Rows.Find(new object[] {
                            type_id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                variable_typeDataTable cln = ((variable_typeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new variable_typeDataTable();
            }
            
            internal void InitVars() {
                this.columntype_id = this.Columns["type_id"];
                this.columntype = this.Columns["type"];
            }
            
            private void InitClass() {
                this.columntype_id = new DataColumn("type_id", typeof(System.Byte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntype_id);
                this.columntype = new DataColumn("type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntype);
                this.Constraints.Add(new UniqueConstraint("ModelInfoKey15", new DataColumn[] {
                                this.columntype_id}, true));
                this.columntype_id.AllowDBNull = false;
                this.columntype_id.Unique = true;
                this.columntype.AllowDBNull = false;
            }
            
            public variable_typeRow Newvariable_typeRow() {
                return ((variable_typeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new variable_typeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(variable_typeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.variable_typeRowChanged != null)) {
                    this.variable_typeRowChanged(this, new variable_typeRowChangeEvent(((variable_typeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.variable_typeRowChanging != null)) {
                    this.variable_typeRowChanging(this, new variable_typeRowChangeEvent(((variable_typeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.variable_typeRowDeleted != null)) {
                    this.variable_typeRowDeleted(this, new variable_typeRowChangeEvent(((variable_typeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.variable_typeRowDeleting != null)) {
                    this.variable_typeRowDeleting(this, new variable_typeRowChangeEvent(((variable_typeRow)(e.Row)), e.Action));
                }
            }
            
            public void Removevariable_typeRow(variable_typeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class variable_typeRow : DataRow {
            
            private variable_typeDataTable tablevariable_type;
            
            internal variable_typeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablevariable_type = ((variable_typeDataTable)(this.Table));
            }
            
            public System.Byte type_id {
                get {
                    return ((System.Byte)(this[this.tablevariable_type.type_idColumn]));
                }
                set {
                    this[this.tablevariable_type.type_idColumn] = value;
                }
            }
            
            public string type {
                get {
                    return ((string)(this[this.tablevariable_type.typeColumn]));
                }
                set {
                    this[this.tablevariable_type.typeColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class variable_typeRowChangeEvent : EventArgs {
            
            private variable_typeRow eventRow;
            
            private DataRowAction eventAction;
            
            public variable_typeRowChangeEvent(variable_typeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public variable_typeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_metricDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnscenario_id;
            
            private DataColumn columntoken;
            
            internal scenario_metricDataTable() : 
                    base("scenario_metric") {
                this.InitClass();
            }
            
            internal scenario_metricDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn scenario_idColumn {
                get {
                    return this.columnscenario_id;
                }
            }
            
            internal DataColumn tokenColumn {
                get {
                    return this.columntoken;
                }
            }
            
            public scenario_metricRow this[int index] {
                get {
                    return ((scenario_metricRow)(this.Rows[index]));
                }
            }
            
            public event scenario_metricRowChangeEventHandler scenario_metricRowChanged;
            
            public event scenario_metricRowChangeEventHandler scenario_metricRowChanging;
            
            public event scenario_metricRowChangeEventHandler scenario_metricRowDeleted;
            
            public event scenario_metricRowChangeEventHandler scenario_metricRowDeleting;
            
            public void Addscenario_metricRow(scenario_metricRow row) {
                this.Rows.Add(row);
            }
            
            public scenario_metricRow Addscenario_metricRow(scenarioRow parentscenarioRowByscenarioscenario_metric, string token) {
                scenario_metricRow rowscenario_metricRow = ((scenario_metricRow)(this.NewRow()));
                rowscenario_metricRow.ItemArray = new object[] {
                        parentscenarioRowByscenarioscenario_metric[0],
                        token};
                this.Rows.Add(rowscenario_metricRow);
                return rowscenario_metricRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                scenario_metricDataTable cln = ((scenario_metricDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new scenario_metricDataTable();
            }
            
            internal void InitVars() {
                this.columnscenario_id = this.Columns["scenario_id"];
                this.columntoken = this.Columns["token"];
            }
            
            private void InitClass() {
                this.columnscenario_id = new DataColumn("scenario_id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnscenario_id);
                this.columntoken = new DataColumn("token", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntoken);
                this.columnscenario_id.AllowDBNull = false;
                this.columntoken.AllowDBNull = false;
            }
            
            public scenario_metricRow Newscenario_metricRow() {
                return ((scenario_metricRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new scenario_metricRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(scenario_metricRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.scenario_metricRowChanged != null)) {
                    this.scenario_metricRowChanged(this, new scenario_metricRowChangeEvent(((scenario_metricRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.scenario_metricRowChanging != null)) {
                    this.scenario_metricRowChanging(this, new scenario_metricRowChangeEvent(((scenario_metricRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.scenario_metricRowDeleted != null)) {
                    this.scenario_metricRowDeleted(this, new scenario_metricRowChangeEvent(((scenario_metricRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.scenario_metricRowDeleting != null)) {
                    this.scenario_metricRowDeleting(this, new scenario_metricRowChangeEvent(((scenario_metricRow)(e.Row)), e.Action));
                }
            }
            
            public void Removescenario_metricRow(scenario_metricRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_metricRow : DataRow {
            
            private scenario_metricDataTable tablescenario_metric;
            
            internal scenario_metricRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablescenario_metric = ((scenario_metricDataTable)(this.Table));
            }
            
            public int scenario_id {
                get {
                    return ((int)(this[this.tablescenario_metric.scenario_idColumn]));
                }
                set {
                    this[this.tablescenario_metric.scenario_idColumn] = value;
                }
            }
            
            public string token {
                get {
                    return ((string)(this[this.tablescenario_metric.tokenColumn]));
                }
                set {
                    this[this.tablescenario_metric.tokenColumn] = value;
                }
            }
            
            public scenarioRow scenarioRow {
                get {
                    return ((scenarioRow)(this.GetParentRow(this.Table.ParentRelations["scenarioscenario_metric"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["scenarioscenario_metric"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class scenario_metricRowChangeEvent : EventArgs {
            
            private scenario_metricRow eventRow;
            
            private DataRowAction eventAction;
            
            public scenario_metricRowChangeEvent(scenario_metricRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public scenario_metricRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
